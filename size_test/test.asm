		INCLUDE finit.asm
		IF (true)
MANT_BITS	EQU 0007
MANT_MASK	EQU 007F
MANT_XOR	EQU 0080
BIT_ALWAYS_ONE	EQU 0007
SIGN_MASK	EQU 0080
SIGN_XOR	EQU 007F
SIGN_BIT	EQU 0007
EXP_BITS	EQU 0008
EXP_PLUS_ONE	EQU 0001
BIAS		EQU 007F
FM256		EQU 8780
FM255		EQU 86FF
FM254		EQU 86FE
FM253		EQU 86FD
FM252		EQU 86FC
FM251		EQU 86FB
FM250		EQU 86FA
FM249		EQU 86F9
FM248		EQU 86F8
FM247		EQU 86F7
FM246		EQU 86F6
FM245		EQU 86F5
FM244		EQU 86F4
FM243		EQU 86F3
FM242		EQU 86F2
FM241		EQU 86F1
FM240		EQU 86F0
FM239		EQU 86EF
FM238		EQU 86EE
FM237		EQU 86ED
FM236		EQU 86EC
FM235		EQU 86EB
FM234		EQU 86EA
FM233		EQU 86E9
FM232		EQU 86E8
FM231		EQU 86E7
FM230		EQU 86E6
FM229		EQU 86E5
FM228		EQU 86E4
FM227		EQU 86E3
FM226		EQU 86E2
FM225		EQU 86E1
FM224		EQU 86E0
FM223		EQU 86DF
FM222		EQU 86DE
FM221		EQU 86DD
FM220		EQU 86DC
FM219		EQU 86DB
FM218		EQU 86DA
FM217		EQU 86D9
FM216		EQU 86D8
FM215		EQU 86D7
FM214		EQU 86D6
FM213		EQU 86D5
FM212		EQU 86D4
FM211		EQU 86D3
FM210		EQU 86D2
FM209		EQU 86D1
FM208		EQU 86D0
FM207		EQU 86CF
FM206		EQU 86CE
FM205		EQU 86CD
FM204		EQU 86CC
FM203		EQU 86CB
FM202		EQU 86CA
FM201		EQU 86C9
FM200		EQU 86C8
FM199		EQU 86C7
FM198		EQU 86C6
FM197		EQU 86C5
FM196		EQU 86C4
FM195		EQU 86C3
FM194		EQU 86C2
FM193		EQU 86C1
FM192		EQU 86C0
FM191		EQU 86BF
FM190		EQU 86BE
FM189		EQU 86BD
FM188		EQU 86BC
FM187		EQU 86BB
FM186		EQU 86BA
FM185		EQU 86B9
FM184		EQU 86B8
FM183		EQU 86B7
FM182		EQU 86B6
FM181		EQU 86B5
FM180		EQU 86B4
FM179		EQU 86B3
FM178		EQU 86B2
FM177		EQU 86B1
FM176		EQU 86B0
FM175		EQU 86AF
FM174		EQU 86AE
FM173		EQU 86AD
FM172		EQU 86AC
FM171		EQU 86AB
FM170		EQU 86AA
FM169		EQU 86A9
FM168		EQU 86A8
FM167		EQU 86A7
FM166		EQU 86A6
FM165		EQU 86A5
FM164		EQU 86A4
FM163		EQU 86A3
FM162		EQU 86A2
FM161		EQU 86A1
FM160		EQU 86A0
FM159		EQU 869F
FM158		EQU 869E
FM157		EQU 869D
FM156		EQU 869C
FM155		EQU 869B
FM154		EQU 869A
FM153		EQU 8699
FM152		EQU 8698
FM151		EQU 8697
FM150		EQU 8696
FM149		EQU 8695
FM148		EQU 8694
FM147		EQU 8693
FM146		EQU 8692
FM145		EQU 8691
FM144		EQU 8690
FM143		EQU 868F
FM142		EQU 868E
FM141		EQU 868D
FM140		EQU 868C
FM139		EQU 868B
FM138		EQU 868A
FM137		EQU 8689
FM136		EQU 8688
FM135		EQU 8687
FM134		EQU 8686
FM133		EQU 8685
FM132		EQU 8684
FM131		EQU 8683
FM130		EQU 8682
FM129		EQU 8681
FM128		EQU 8680
FM127		EQU 85FE
FM126		EQU 85FC
FM125		EQU 85FA
FM124		EQU 85F8
FM123		EQU 85F6
FM122		EQU 85F4
FM121		EQU 85F2
FM120		EQU 85F0
FM119		EQU 85EE
FM118		EQU 85EC
FM117		EQU 85EA
FM116		EQU 85E8
FM115		EQU 85E6
FM114		EQU 85E4
FM113		EQU 85E2
FM112		EQU 85E0
FM111		EQU 85DE
FM110		EQU 85DC
FM109		EQU 85DA
FM108		EQU 85D8
FM107		EQU 85D6
FM106		EQU 85D4
FM105		EQU 85D2
FM104		EQU 85D0
FM103		EQU 85CE
FM102		EQU 85CC
FM101		EQU 85CA
FM100		EQU 85C8
FM99		EQU 85C6
FM98		EQU 85C4
FM97		EQU 85C2
FM96		EQU 85C0
FM95		EQU 85BE
FM94		EQU 85BC
FM93		EQU 85BA
FM92		EQU 85B8
FM91		EQU 85B6
FM90		EQU 85B4
FM89		EQU 85B2
FM88		EQU 85B0
FM87		EQU 85AE
FM86		EQU 85AC
FM85		EQU 85AA
FM84		EQU 85A8
FM83		EQU 85A6
FM82		EQU 85A4
FM81		EQU 85A2
FM80		EQU 85A0
FM79		EQU 859E
FM78		EQU 859C
FM77		EQU 859A
FM76		EQU 8598
FM75		EQU 8596
FM74		EQU 8594
FM73		EQU 8592
FM72		EQU 8590
FM71		EQU 858E
FM70		EQU 858C
FM69		EQU 858A
FM68		EQU 8588
FM67		EQU 8586
FM66		EQU 8584
FM65		EQU 8582
FM64		EQU 8580
FM63		EQU 84FC
FM62		EQU 84F8
FM61		EQU 84F4
FM60		EQU 84F0
FM59		EQU 84EC
FM58		EQU 84E8
FM57		EQU 84E4
FM56		EQU 84E0
FM55		EQU 84DC
FM54		EQU 84D8
FM53		EQU 84D4
FM52		EQU 84D0
FM51		EQU 84CC
FM50		EQU 84C8
FM49		EQU 84C4
FM48		EQU 84C0
FM47		EQU 84BC
FM46		EQU 84B8
FM45		EQU 84B4
FM44		EQU 84B0
FM43		EQU 84AC
FM42		EQU 84A8
FM41		EQU 84A4
FM40		EQU 84A0
FM39		EQU 849C
FM38		EQU 8498
FM37		EQU 8494
FM36		EQU 8490
FM35		EQU 848C
FM34		EQU 8488
FM33		EQU 8484
FM32		EQU 8480
FM31		EQU 83F8
FM30		EQU 83F0
FM29		EQU 83E8
FM28		EQU 83E0
FM27		EQU 83D8
FM26		EQU 83D0
FM25		EQU 83C8
FM24		EQU 83C0
FM23		EQU 83B8
FM22		EQU 83B0
FM21		EQU 83A8
FM20		EQU 83A0
FM19		EQU 8398
FM18		EQU 8390
FM17		EQU 8388
FM16		EQU 8380
FM15		EQU 82F0
FM14		EQU 82E0
FM13		EQU 82D0
FM12		EQU 82C0
FM11		EQU 82B0
FM10		EQU 82A0
FM9		EQU 8290
FM8		EQU 8280
FM7		EQU 81E0
FM6		EQU 81C0
FM5		EQU 81A0
FM4		EQU 8180
FM3		EQU 80C0
FM2		EQU 8080
FM1		EQU 7F80
FM0_9		EQU 7EE6
FM0_8		EQU 7ECD
FM0_7		EQU 7EB3
FM0_6		EQU 7E9A
FM0_5		EQU 7E80
FM0_4		EQU 7DCD
FM0_3		EQU 7D9A
FM0_2		EQU 7CCD
FM0_1		EQU 7BCD
FP0_1		EQU 7B4D
FP0_2		EQU 7C4D
FP0_3		EQU 7D1A
FP0_4		EQU 7D4D
FP0_5		EQU 7E00
FP0_6		EQU 7E1A
FP0_7		EQU 7E33
FP0_8		EQU 7E4D
FP0_9		EQU 7E66
FP1		EQU 7F00
FP2		EQU 8000
FP3		EQU 8040
FP4		EQU 8100
FP5		EQU 8120
FP6		EQU 8140
FP7		EQU 8160
FP8		EQU 8200
FP9		EQU 8210
FP10		EQU 8220
FP11		EQU 8230
FP12		EQU 8240
FP13		EQU 8250
FP14		EQU 8260
FP15		EQU 8270
FP16		EQU 8300
FP17		EQU 8308
FP18		EQU 8310
FP19		EQU 8318
FP20		EQU 8320
FP21		EQU 8328
FP22		EQU 8330
FP23		EQU 8338
FP24		EQU 8340
FP25		EQU 8348
FP26		EQU 8350
FP27		EQU 8358
FP28		EQU 8360
FP29		EQU 8368
FP30		EQU 8370
FP31		EQU 8378
FP32		EQU 8400
FP33		EQU 8404
FP34		EQU 8408
FP35		EQU 840C
FP36		EQU 8410
FP37		EQU 8414
FP38		EQU 8418
FP39		EQU 841C
FP40		EQU 8420
FP41		EQU 8424
FP42		EQU 8428
FP43		EQU 842C
FP44		EQU 8430
FP45		EQU 8434
FP46		EQU 8438
FP47		EQU 843C
FP48		EQU 8440
FP49		EQU 8444
FP50		EQU 8448
FP51		EQU 844C
FP52		EQU 8450
FP53		EQU 8454
FP54		EQU 8458
FP55		EQU 845C
FP56		EQU 8460
FP57		EQU 8464
FP58		EQU 8468
FP59		EQU 846C
FP60		EQU 8470
FP61		EQU 8474
FP62		EQU 8478
FP63		EQU 847C
FP64		EQU 8500
FP65		EQU 8502
FP66		EQU 8504
FP67		EQU 8506
FP68		EQU 8508
FP69		EQU 850A
FP70		EQU 850C
FP71		EQU 850E
FP72		EQU 8510
FP73		EQU 8512
FP74		EQU 8514
FP75		EQU 8516
FP76		EQU 8518
FP77		EQU 851A
FP78		EQU 851C
FP79		EQU 851E
FP80		EQU 8520
FP81		EQU 8522
FP82		EQU 8524
FP83		EQU 8526
FP84		EQU 8528
FP85		EQU 852A
FP86		EQU 852C
FP87		EQU 852E
FP88		EQU 8530
FP89		EQU 8532
FP90		EQU 8534
FP91		EQU 8536
FP92		EQU 8538
FP93		EQU 853A
FP94		EQU 853C
FP95		EQU 853E
FP96		EQU 8540
FP97		EQU 8542
FP98		EQU 8544
FP99		EQU 8546
FP100		EQU 8548
FP101		EQU 854A
FP102		EQU 854C
FP103		EQU 854E
FP104		EQU 8550
FP105		EQU 8552
FP106		EQU 8554
FP107		EQU 8556
FP108		EQU 8558
FP109		EQU 855A
FP110		EQU 855C
FP111		EQU 855E
FP112		EQU 8560
FP113		EQU 8562
FP114		EQU 8564
FP115		EQU 8566
FP116		EQU 8568
FP117		EQU 856A
FP118		EQU 856C
FP119		EQU 856E
FP120		EQU 8570
FP121		EQU 8572
FP122		EQU 8574
FP123		EQU 8576
FP124		EQU 8578
FP125		EQU 857A
FP126		EQU 857C
FP127		EQU 857E
FP128		EQU 8600
FP129		EQU 8601
FP130		EQU 8602
FP131		EQU 8603
FP132		EQU 8604
FP133		EQU 8605
FP134		EQU 8606
FP135		EQU 8607
FP136		EQU 8608
FP137		EQU 8609
FP138		EQU 860A
FP139		EQU 860B
FP140		EQU 860C
FP141		EQU 860D
FP142		EQU 860E
FP143		EQU 860F
FP144		EQU 8610
FP145		EQU 8611
FP146		EQU 8612
FP147		EQU 8613
FP148		EQU 8614
FP149		EQU 8615
FP150		EQU 8616
FP151		EQU 8617
FP152		EQU 8618
FP153		EQU 8619
FP154		EQU 861A
FP155		EQU 861B
FP156		EQU 861C
FP157		EQU 861D
FP158		EQU 861E
FP159		EQU 861F
FP160		EQU 8620
FP161		EQU 8621
FP162		EQU 8622
FP163		EQU 8623
FP164		EQU 8624
FP165		EQU 8625
FP166		EQU 8626
FP167		EQU 8627
FP168		EQU 8628
FP169		EQU 8629
FP170		EQU 862A
FP171		EQU 862B
FP172		EQU 862C
FP173		EQU 862D
FP174		EQU 862E
FP175		EQU 862F
FP176		EQU 8630
FP177		EQU 8631
FP178		EQU 8632
FP179		EQU 8633
FP180		EQU 8634
FP181		EQU 8635
FP182		EQU 8636
FP183		EQU 8637
FP184		EQU 8638
FP185		EQU 8639
FP186		EQU 863A
FP187		EQU 863B
FP188		EQU 863C
FP189		EQU 863D
FP190		EQU 863E
FP191		EQU 863F
FP192		EQU 8640
FP193		EQU 8641
FP194		EQU 8642
FP195		EQU 8643
FP196		EQU 8644
FP197		EQU 8645
FP198		EQU 8646
FP199		EQU 8647
FP200		EQU 8648
FP201		EQU 8649
FP202		EQU 864A
FP203		EQU 864B
FP204		EQU 864C
FP205		EQU 864D
FP206		EQU 864E
FP207		EQU 864F
FP208		EQU 8650
FP209		EQU 8651
FP210		EQU 8652
FP211		EQU 8653
FP212		EQU 8654
FP213		EQU 8655
FP214		EQU 8656
FP215		EQU 8657
FP216		EQU 8658
FP217		EQU 8659
FP218		EQU 865A
FP219		EQU 865B
FP220		EQU 865C
FP221		EQU 865D
FP222		EQU 865E
FP223		EQU 865F
FP224		EQU 8660
FP225		EQU 8661
FP226		EQU 8662
FP227		EQU 8663
FP228		EQU 8664
FP229		EQU 8665
FP230		EQU 8666
FP231		EQU 8667
FP232		EQU 8668
FP233		EQU 8669
FP234		EQU 866A
FP235		EQU 866B
FP236		EQU 866C
FP237		EQU 866D
FP238		EQU 866E
FP239		EQU 866F
FP240		EQU 8670
FP241		EQU 8671
FP242		EQU 8672
FP243		EQU 8673
FP244		EQU 8674
FP245		EQU 8675
FP246		EQU 8676
FP247		EQU 8677
FP248		EQU 8678
FP249		EQU 8679
FP250		EQU 867A
FP251		EQU 867B
FP252		EQU 867C
FP253		EQU 867D
FP254		EQU 867E
FP255		EQU 867F
FP256		EQU 8700
ROOT2F		EQU 7F35
FPMIN		EQU 0000
FMMIN		EQU 0080
FM0		EQU 0080
FP0		EQU 0000
FMMAX		EQU FFFF
FPMAX		EQU FF7F
FM0_01875	EQU 799A
FM0_0375	EQU 7A9A
FM0_0625	EQU 7B80
FM0_075		EQU 7B9A
FM0_15		EQU 7C9A
FM0_25		EQU 7D80
FP0_000156	EQU 7224
FP0_001406	EQU 7538
FP0_0025	EQU 7624
FP0_01		EQU 7824
FP0_0125	EQU 784D
FP0_0225	EQU 7938
FP0_03125	EQU 7A00
FP0_0375	EQU 7A1A
FP0_04		EQU 7A24
FP0_05		EQU 7A4D
FP0_09		EQU 7B38
FP0_125		EQU 7C00
FP0_15		EQU 7C1A
FP0_1875	EQU 7C40
FP0_25		EQU 7D00
FP0_75		EQU 7E40
FP0_36		EQU 7D38
FP1_5		EQU 7F40
FP18_75		EQU 8316
FP300		EQU 8716
		ENDIF
		End of INCLUDE
		INCLUDE size_settings.asm
color_flow_warning EQU 0000
carry_flow_warning EQU 0001
DATA_ADR	EQU 6000
TEXT_ADR	EQU E000
		ORG 6000
		End of INCLUDE
fix_ln		EQU 0001
		INCLUDE fsin.tab
		IF (true)
	DEFS of 0 bytes with value 00
6000:		label SIN_TAB
		ENDIF
		End of INCLUDE
		INCLUDE fdiv.tab
		IF (true)
	DEFS of 0 bytes with value 00
6000:		label DIVTAB
6000:007E7C7A	DEFB of 16 bytes
6004:78767573
6008:716F6D6C
600C:6A686765
6010:6462605F	DEFB of 16 bytes
6014:5D5C5A59
6018:58565553
601C:52514F4E
6020:4D4C4A49	DEFB of 16 bytes
6024:48474544
6028:43424140
602C:3F3D3C3B
6030:3A393837	DEFB of 16 bytes
6034:36353433
6038:3231302F
603C:2E2D2C2C
6040:2B2A2928	DEFB of 16 bytes
6044:27262525
6048:24232221
604C:21201F1E
6050:1E1D1C1B	DEFB of 16 bytes
6054:1B1A1918
6058:18171616
605C:15141413
6060:12121110	DEFB of 16 bytes
6064:100F0E0E
6068:0D0D0C0B
606C:0B0A0A09
6070:09080707	DEFB of 16 bytes
6074:06060505
6078:04040303
607C:02020101
6080:80FEFCFA	DEFB of 16 bytes
6084:F8F6F5F3
6088:F1EFEDEC
608C:EAE8E7E5
6090:E4E2E0DF	DEFB of 16 bytes
6094:DDDCDAD9
6098:D8D6D5D3
609C:D2D1CFCE
60A0:CDCCCAC9	DEFB of 16 bytes
60A4:C8C7C5C4
60A8:C3C2C1C0
60AC:BFBDBCBB
60B0:BAB9B8B7	DEFB of 16 bytes
60B4:B6B5B4B3
60B8:B2B1B0AF
60BC:AEADACAC
60C0:ABAAA9A8	DEFB of 16 bytes
60C4:A7A6A5A5
60C8:A4A3A2A1
60CC:A1A09F9E
60D0:9E9D9C9B	DEFB of 16 bytes
60D4:9B9A9998
60D8:98979696
60DC:95949493
60E0:92929190	DEFB of 16 bytes
60E4:908F8E8E
60E8:8D8D8C8B
60EC:8B8A8A89
60F0:89888787	DEFB of 16 bytes
60F4:86868585
60F8:84848383
60FC:82828181
		INCLUDE fmul.tab
		IF (true)
	DEFS of 0 bytes with value 00
6100:		label Tab_AmB_lo
6100:C0C0BEBE	DEFB of 16 bytes
6104:BBBAB6B4
6108:AFACA6A2
610C:9C968E88
6110:80786E66	DEFB of 16 bytes
6114:5B52463B
6118:3024160A
611C:FBEEDED0
6120:C0B09F8E	DEFB of 16 bytes
6124:7B6A5744
6128:301C07F2
612C:DCC6AE98
6130:80684F36	DEFB of 16 bytes
6134:1B02E6CC
6138:B093775A
613C:3C1EFFE0
6140:C0A07F5E	DEFB of 16 bytes
6144:3C1AF7D4
6148:B08C6742
614C:1BF6CFA8
6150:80582E06	DEFB of 16 bytes
6154:DCB2875C
6158:3004D7AA
615C:7B4E1FF0
6160:C0905F2E	DEFB of 16 bytes
6164:FCCA9764
6168:30FCC792
616C:5B26EFB8
6170:80480FD6	DEFB of 16 bytes
6174:9C6227EC
6178:B07437FA
617C:BC7E3F00
6180:00003F7E	DEFB of 16 bytes
6184:BCFA3774
6188:B0EC2762
618C:9CD60F48
6190:80B8EF26	DEFB of 16 bytes
6194:5B92C7FC
6198:306497CA
619C:FC2E5F90
61A0:C0F01F4E	DEFB of 16 bytes
61A4:7BAAD704
61A8:305C87B2
61AC:DC062E58
61B0:80A8CFF6	DEFB of 16 bytes
61B4:1B42678C
61B8:B0D4F71A
61BC:3C5E7FA0
61C0:C0E0FF1E	DEFB of 16 bytes
61C4:3C5A7793
61C8:B0CCE602
61CC:1B364F68
61D0:8098AEC6	DEFB of 16 bytes
61D4:DCF2071C
61D8:3044576A
61DC:7B8E9FB0
61E0:C0D0DEEE	DEFB of 16 bytes
61E4:FB0A1624
61E8:303B4652
61EC:5B666E78
61F0:80888E96	DEFB of 16 bytes
61F4:9CA2A6AC
61F8:AFB4B6BA
61FC:BBBEBEC0
6200:0F0F0F0F	DEFB of 16 bytes
6204:0F0F0F0F
6208:0F0F0F0F
620C:0F0F0F0F
6210:0F0F0F0F	DEFB of 16 bytes
6214:0F0F0F0F
6218:0F0F0F0F
621C:0E0E0E0E
6220:0E0E0E0E	DEFB of 16 bytes
6224:0E0E0E0E
6228:0E0E0E0D
622C:0D0D0D0D
6230:0D0D0D0D	DEFB of 16 bytes
6234:0D0D0C0C
6238:0C0C0C0C
623C:0C0C0B0B
6240:0B0B0B0B	DEFB of 16 bytes
6244:0B0B0A0A
6248:0A0A0A0A
624C:0A090909
6250:09090909	DEFB of 16 bytes
6254:08080808
6258:08080707
625C:07070706
6260:06060606	DEFB of 16 bytes
6264:05050505
6268:05040404
626C:04040303
6270:03030302	DEFB of 16 bytes
6274:02020201
6278:01010100
627C:00000000
6280:00000000	DEFB of 16 bytes
6284:00000101
6288:01010202
628C:02020303
6290:03030304	DEFB of 16 bytes
6294:04040404
6298:05050505
629C:05060606
62A0:06060707	DEFB of 16 bytes
62A4:07070708
62A8:08080808
62AC:08090909
62B0:09090909	DEFB of 16 bytes
62B4:0A0A0A0A
62B8:0A0A0A0B
62BC:0B0B0B0B
62C0:0B0B0B0C	DEFB of 16 bytes
62C4:0C0C0C0C
62C8:0C0C0C0D
62CC:0D0D0D0D
62D0:0D0D0D0D	DEFB of 16 bytes
62D4:0D0D0E0E
62D8:0E0E0E0E
62DC:0E0E0E0E
62E0:0E0E0E0E	DEFB of 16 bytes
62E4:0E0F0F0F
62E8:0F0F0F0F
62EC:0F0F0F0F
62F0:0F0F0F0F	DEFB of 16 bytes
62F4:0F0F0F0F
62F8:0F0F0F0F
62FC:0F0F0F0F
6300:		label Tab_ApB_lo
6300:80008102	DEFB of 16 bytes
6304:8406890C
6308:9014991E
630C:A42AB138
6310:BF48D15A	DEFB of 16 bytes
6314:E36EF984
6318:109C29B6
631C:44D261F0
6320:7F10A132	DEFB of 16 bytes
6324:C456E97C
6328:10A439CE
632C:63FA9128
6330:BF58F18A	DEFB of 16 bytes
6334:23BE59F4
6338:902CC866
633C:03A240E0
6340:7F1FC161	DEFB of 16 bytes
6344:04A549EC
6348:9033D97D
634C:23C97117
6350:BF6711B9	DEFB of 16 bytes
6354:630DB963
6358:10BB6915
635C:C37121CF
6360:7F2FE091	DEFB of 16 bytes
6364:43F5A85B
6368:10C4782E
636C:E39A5108
6370:BF7830EA	DEFB of 16 bytes
6374:A45E19D4
6378:8F4C09C6
637C:834201C0
6380:804001C2	DEFB of 16 bytes
6384:834609CC
6388:8F5419DE
638C:A46A31F8
6390:C088511A	DEFB of 16 bytes
6394:E3AE7944
6398:0FDCA976
639C:4412E1B0
63A0:805020F2	DEFB of 16 bytes
63A4:C496683C
63A8:0FE4B88E
63AC:643A11E8
63B0:C098704A	DEFB of 16 bytes
63B4:23FED9B4
63B8:8F6C4826
63BC:04E2C0A0
63C0:80604122	DEFB of 16 bytes
63C4:04E6C9AC
63C8:8F74593E
63CC:230AF1D8
63D0:C0A8917A	DEFB of 16 bytes
63D4:644E3924
63D8:10FCE9D6
63DC:C4B2A190
63E0:80706152	DEFB of 16 bytes
63E4:4436291C
63E8:1004F9EE
63EC:E4DAD1C8
63F0:C0B8B1AA	DEFB of 16 bytes
63F4:A49E9994
63F8:908C8986
63FC:84828100
6400:30313132	DEFB of 16 bytes
6404:32333334
6408:34353536
640C:36373738
6410:3839393A	DEFB of 16 bytes
6414:3A3B3B3C
6418:3D3D3E3E
641C:3F3F4040
6420:41424243	DEFB of 16 bytes
6424:43444445
6428:46464747
642C:4848494A
6430:4A4B4B4C	DEFB of 16 bytes
6434:4D4D4E4E
6438:4F505051
643C:52525353
6440:54555556	DEFB of 16 bytes
6444:57575858
6448:595A5A5B
644C:5C5C5D5E
6450:5E5F6060	DEFB of 16 bytes
6454:61626263
6458:64646566
645C:66676868
6460:696A6A6B	DEFB of 16 bytes
6464:6C6C6D6E
6468:6F6F7071
646C:71727374
6470:74757676	DEFB of 16 bytes
6474:77787979
6478:7A7B7C7C
647C:7D7E7F7F
6480:80818282	DEFB of 16 bytes
6484:83848585
6488:86878888
648C:898A8B8B
6490:8C8D8E8F	DEFB of 16 bytes
6494:8F909192
6498:93939495
649C:96979798
64A0:999A9B9B	DEFB of 16 bytes
64A4:9C9D9E9F
64A8:A0A0A1A2
64AC:A3A4A5A5
64B0:A6A7A8A9	DEFB of 16 bytes
64B4:AAAAABAC
64B8:ADAEAFB0
64BC:B1B1B2B3
64C0:B4B5B6B7	DEFB of 16 bytes
64C4:B8B8B9BA
64C8:BBBCBDBE
64CC:BFC0C0C1
64D0:C2C3C4C5	DEFB of 16 bytes
64D4:C6C7C8C9
64D8:CACACBCC
64DC:CDCECFD0
64E0:D1D2D3D4	DEFB of 16 bytes
64E4:D5D6D7D8
64E8:D9DADADB
64EC:DCDDDEDF
64F0:E0E1E2E3	DEFB of 16 bytes
64F4:E4E5E6E7
64F8:E8E9EAEB
64FC:ECEDEE00
		ENDIF
		End of INCLUDE
		ENDIF
		End of INCLUDE
		INCLUDE fmul.tab
		IF (false)
- DEFS    (($ + $FF) / $100) * $100 - $
- Tab_AmB_lo:	; $FC0 - tab_minus[i]
- db $c0,$c0,$be,$be,$bb,$ba,$b6,$b4,$af,$ac,$a6,$a2,$9c,$96,$8e,$88   ; 0_     fc0,fc0,fbe,fbe,fbb,fba,fb6,fb4,faf,fac,fa6,fa2,f9c,f96,f8e,f88 0_
- db $80,$78,$6e,$66,$5b,$52,$46,$3b,$30,$24,$16,$0a,$fb,$ee,$de,$d0   ; 1_     f80,f78,f6e,f66,f5b,f52,f46,f3b,f30,f24,f16,f0a,efb,eee,ede,ed0 1_
- db $c0,$b0,$9f,$8e,$7b,$6a,$57,$44,$30,$1c,$07,$f2,$dc,$c6,$ae,$98   ; 2_     ec0,eb0,e9f,e8e,e7b,e6a,e57,e44,e30,e1c,e07,df2,ddc,dc6,dae,d98 2_
- db $80,$68,$4f,$36,$1b,$02,$e6,$cc,$b0,$93,$77,$5a,$3c,$1e,$ff,$e0   ; 3_     d80,d68,d4f,d36,d1b,d02,ce6,ccc,cb0,c93,c77,c5a,c3c,c1e,bff,be0 3_
- db $c0,$a0,$7f,$5e,$3c,$1a,$f7,$d4,$b0,$8c,$67,$42,$1b,$f6,$cf,$a8   ; 4_     bc0,ba0,b7f,b5e,b3c,b1a,af7,ad4,ab0,a8c,a67,a42,a1b,9f6,9cf,9a8 4_
- db $80,$58,$2e,$06,$dc,$b2,$87,$5c,$30,$04,$d7,$aa,$7b,$4e,$1f,$f0   ; 5_     980,958,92e,906,8dc,8b2,887,85c,830,804,7d7,7aa,77b,74e,71f,6f0 5_
- db $c0,$90,$5f,$2e,$fc,$ca,$97,$64,$30,$fc,$c7,$92,$5b,$26,$ef,$b8   ; 6_     6c0,690,65f,62e,5fc,5ca,597,564,530,4fc,4c7,492,45b,426,3ef,3b8 6_
- db $80,$48,$0f,$d6,$9c,$62,$27,$ec,$b0,$74,$37,$fa,$bc,$7e,$3f,$00   ; 7_     380,348,30f,2d6,29c,262,227,1ec,1b0,174,137, fa, bc, 7e, 3f, 00 7_
- db $00,$00,$3f,$7e,$bc,$fa,$37,$74,$b0,$ec,$27,$62,$9c,$d6,$0f,$48   ; 8_      00, 00, 3f, 7e, bc, fa,137,174,1b0,1ec,227,262,29c,2d6,30f,348 8_
- db $80,$b8,$ef,$26,$5b,$92,$c7,$fc,$30,$64,$97,$ca,$fc,$2e,$5f,$90   ; 9_     380,3b8,3ef,426,45b,492,4c7,4fc,530,564,597,5ca,5fc,62e,65f,690 9_
- db $c0,$f0,$1f,$4e,$7b,$aa,$d7,$04,$30,$5c,$87,$b2,$dc,$06,$2e,$58   ; A_     6c0,6f0,71f,74e,77b,7aa,7d7,804,830,85c,887,8b2,8dc,906,92e,958 A_
- db $80,$a8,$cf,$f6,$1b,$42,$67,$8c,$b0,$d4,$f7,$1a,$3c,$5e,$7f,$a0   ; B_     980,9a8,9cf,9f6,a1b,a42,a67,a8c,ab0,ad4,af7,b1a,b3c,b5e,b7f,ba0 B_
- db $c0,$e0,$ff,$1e,$3c,$5a,$77,$93,$b0,$cc,$e6,$02,$1b,$36,$4f,$68   ; C_     bc0,be0,bff,c1e,c3c,c5a,c77,c93,cb0,ccc,ce6,d02,d1b,d36,d4f,d68 C_
- db $80,$98,$ae,$c6,$dc,$f2,$07,$1c,$30,$44,$57,$6a,$7b,$8e,$9f,$b0   ; D_     d80,d98,dae,dc6,ddc,df2,e07,e1c,e30,e44,e57,e6a,e7b,e8e,e9f,eb0 D_
- db $c0,$d0,$de,$ee,$fb,$0a,$16,$24,$30,$3b,$46,$52,$5b,$66,$6e,$78   ; E_     ec0,ed0,ede,eee,efb,f0a,f16,f24,f30,f3b,f46,f52,f5b,f66,f6e,f78 E_
- db $80,$88,$8e,$96,$9c,$a2,$a6,$ac,$af,$b4,$b6,$ba,$bb,$be,$be,$c0   ; F_     f80,f88,f8e,f96,f9c,fa2,fa6,fac,faf,fb4,fb6,fba,fbb,fbe,fbe,fc0 F_
- db $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f   ; 0_  
- db $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0e,$0e,$0e,$0e   ; 1_  
- db $0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0d,$0d,$0d,$0d,$0d   ; 2_  
- db $0d,$0d,$0d,$0d,$0d,$0d,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0b,$0b   ; 3_  
- db $0b,$0b,$0b,$0b,$0b,$0b,$0a,$0a,$0a,$0a,$0a,$0a,$0a,$09,$09,$09   ; 4_  
- db $09,$09,$09,$09,$08,$08,$08,$08,$08,$08,$07,$07,$07,$07,$07,$06   ; 5_  
- db $06,$06,$06,$06,$05,$05,$05,$05,$05,$04,$04,$04,$04,$04,$03,$03   ; 6_  
- db $03,$03,$03,$02,$02,$02,$02,$01,$01,$01,$01,$00,$00,$00,$00,$00   ; 7_  
- db $00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03   ; 8_  
- db $03,$03,$03,$04,$04,$04,$04,$04,$05,$05,$05,$05,$05,$06,$06,$06   ; 9_  
- db $06,$06,$07,$07,$07,$07,$07,$08,$08,$08,$08,$08,$08,$09,$09,$09   ; A_  
- db $09,$09,$09,$09,$0a,$0a,$0a,$0a,$0a,$0a,$0a,$0b,$0b,$0b,$0b,$0b   ; B_  
- db $0b,$0b,$0b,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0d,$0d,$0d,$0d,$0d   ; C_  
- db $0d,$0d,$0d,$0d,$0d,$0d,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e   ; D_  
- db $0e,$0e,$0e,$0e,$0e,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f   ; E_  
- db $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f   ; F_  
- Tab_ApB_lo:	; tab_plus[i] - $FC0
- db $80,$00,$81,$02,$84,$06,$89,$0c,$90,$14,$99,$1e,$a4,$2a,$b1,$38   ; 0_     3080,3100,3181,3202,3284,3306,3389,340c,3490,3514,3599,361e,36a4,372a,37b1,3838 0_
- db $bf,$48,$d1,$5a,$e3,$6e,$f9,$84,$10,$9c,$29,$b6,$44,$d2,$61,$f0   ; 1_     38bf,3948,39d1,3a5a,3ae3,3b6e,3bf9,3c84,3d10,3d9c,3e29,3eb6,3f44,3fd2,4061,40f0 1_
- db $7f,$10,$a1,$32,$c4,$56,$e9,$7c,$10,$a4,$39,$ce,$63,$fa,$91,$28   ; 2_     417f,4210,42a1,4332,43c4,4456,44e9,457c,4610,46a4,4739,47ce,4863,48fa,4991,4a28 2_
- db $bf,$58,$f1,$8a,$23,$be,$59,$f4,$90,$2c,$c8,$66,$03,$a2,$40,$e0   ; 3_     4abf,4b58,4bf1,4c8a,4d23,4dbe,4e59,4ef4,4f90,502c,50c8,5166,5203,52a2,5340,53e0 3_
- db $7f,$1f,$c1,$61,$04,$a5,$49,$ec,$90,$33,$d9,$7d,$23,$c9,$71,$17   ; 4_     547f,551f,55c1,5661,5704,57a5,5849,58ec,5990,5a33,5ad9,5b7d,5c23,5cc9,5d71,5e17 4_
- db $bf,$67,$11,$b9,$63,$0d,$b9,$63,$10,$bb,$69,$15,$c3,$71,$21,$cf   ; 5_     5ebf,5f67,6011,60b9,6163,620d,62b9,6363,6410,64bb,6569,6615,66c3,6771,6821,68cf 5_
- db $7f,$2f,$e0,$91,$43,$f5,$a8,$5b,$10,$c4,$78,$2e,$e3,$9a,$51,$08   ; 6_     697f,6a2f,6ae0,6b91,6c43,6cf5,6da8,6e5b,6f10,6fc4,7078,712e,71e3,729a,7351,7408 6_
- db $bf,$78,$30,$ea,$a4,$5e,$19,$d4,$8f,$4c,$09,$c6,$83,$42,$01,$c0   ; 7_     74bf,7578,7630,76ea,77a4,785e,7919,79d4,7a8f,7b4c,7c09,7cc6,7d83,7e42,7f01,7fc0 7_
- db $80,$40,$01,$c2,$83,$46,$09,$cc,$8f,$54,$19,$de,$a4,$6a,$31,$f8   ; 8_     8080,8140,8201,82c2,8383,8446,8509,85cc,868f,8754,8819,88de,89a4,8a6a,8b31,8bf8 8_
- db $c0,$88,$51,$1a,$e3,$ae,$79,$44,$0f,$dc,$a9,$76,$44,$12,$e1,$b0   ; 9_     8cc0,8d88,8e51,8f1a,8fe3,90ae,9179,9244,930f,93dc,94a9,9576,9644,9712,97e1,98b0 9_
- db $80,$50,$20,$f2,$c4,$96,$68,$3c,$0f,$e4,$b8,$8e,$64,$3a,$11,$e8   ; A_     9980,9a50,9b20,9bf2,9cc4,9d96,9e68,9f3c,a00f,a0e4,a1b8,a28e,a364,a43a,a511,a5e8 A_
- db $c0,$98,$70,$4a,$23,$fe,$d9,$b4,$8f,$6c,$48,$26,$04,$e2,$c0,$a0   ; B_     a6c0,a798,a870,a94a,aa23,aafe,abd9,acb4,ad8f,ae6c,af48,b026,b104,b1e2,b2c0,b3a0 B_
- db $80,$60,$41,$22,$04,$e6,$c9,$ac,$8f,$74,$59,$3e,$23,$0a,$f1,$d8   ; C_     b480,b560,b641,b722,b804,b8e6,b9c9,baac,bb8f,bc74,bd59,be3e,bf23,c00a,c0f1,c1d8 C_
- db $c0,$a8,$91,$7a,$64,$4e,$39,$24,$10,$fc,$e9,$d6,$c4,$b2,$a1,$90   ; D_     c2c0,c3a8,c491,c57a,c664,c74e,c839,c924,ca10,cafc,cbe9,ccd6,cdc4,ceb2,cfa1,d090 D_
- db $80,$70,$61,$52,$44,$36,$29,$1c,$10,$04,$f9,$ee,$e4,$da,$d1,$c8   ; E_     d180,d270,d361,d452,d544,d636,d729,d81c,d910,da04,daf9,dbee,dce4,ddda,ded1,dfc8 E_
- db $c0,$b8,$b1,$aa,$a4,$9e,$99,$94,$90,$8c,$89,$86,$84,$82,$81,$00   ; F_     e0c0,e1b8,e2b1,e3aa,e4a4,e59e,e699,e794,e890,e98c,ea89,eb86,ec84,ed82,ee81,  00 F_
- db $30,$31,$31,$32,$32,$33,$33,$34,$34,$35,$35,$36,$36,$37,$37,$38   ; 0_  
- db $38,$39,$39,$3a,$3a,$3b,$3b,$3c,$3d,$3d,$3e,$3e,$3f,$3f,$40,$40   ; 1_  
- db $41,$42,$42,$43,$43,$44,$44,$45,$46,$46,$47,$47,$48,$48,$49,$4a   ; 2_  
- db $4a,$4b,$4b,$4c,$4d,$4d,$4e,$4e,$4f,$50,$50,$51,$52,$52,$53,$53   ; 3_  
- db $54,$55,$55,$56,$57,$57,$58,$58,$59,$5a,$5a,$5b,$5c,$5c,$5d,$5e   ; 4_  
- db $5e,$5f,$60,$60,$61,$62,$62,$63,$64,$64,$65,$66,$66,$67,$68,$68   ; 5_  
- db $69,$6a,$6a,$6b,$6c,$6c,$6d,$6e,$6f,$6f,$70,$71,$71,$72,$73,$74   ; 6_  
- db $74,$75,$76,$76,$77,$78,$79,$79,$7a,$7b,$7c,$7c,$7d,$7e,$7f,$7f   ; 7_  
- db $80,$81,$82,$82,$83,$84,$85,$85,$86,$87,$88,$88,$89,$8a,$8b,$8b   ; 8_  
- db $8c,$8d,$8e,$8f,$8f,$90,$91,$92,$93,$93,$94,$95,$96,$97,$97,$98   ; 9_  
- db $99,$9a,$9b,$9b,$9c,$9d,$9e,$9f,$a0,$a0,$a1,$a2,$a3,$a4,$a5,$a5   ; A_  
- db $a6,$a7,$a8,$a9,$aa,$aa,$ab,$ac,$ad,$ae,$af,$b0,$b1,$b1,$b2,$b3   ; B_  
- db $b4,$b5,$b6,$b7,$b8,$b8,$b9,$ba,$bb,$bc,$bd,$be,$bf,$c0,$c0,$c1   ; C_  
- db $c2,$c3,$c4,$c5,$c6,$c7,$c8,$c9,$ca,$ca,$cb,$cc,$cd,$ce,$cf,$d0   ; D_  
- db $d1,$d2,$d3,$d4,$d5,$d6,$d7,$d8,$d9,$da,$da,$db,$dc,$dd,$de,$df   ; E_  
- db $e0,$e1,$e2,$e3,$e4,$e5,$e6,$e7,$e8,$e9,$ea,$eb,$ec,$ed,$ee,$00   ; F_  
		ENDIF
		End of INCLUDE
		INCLUDE fsqrt.tab
		IF (true)
	DEFS of 0 bytes with value 00
6500:		label SQR_TAB
6500:00000101	DEFB of 16 bytes
6504:02020303
6508:04040505
650C:06060707
6510:08080909	DEFB of 16 bytes
6514:0A0A0B0B
6518:0B0C0C0D
651C:0D0E0E0F
6520:0F101010	DEFB of 16 bytes
6524:11111212
6528:13131414
652C:14151516
6530:16171717	DEFB of 16 bytes
6534:18181919
6538:191A1A1B
653C:1B1C1C1C
6540:1D1D1E1E	DEFB of 16 bytes
6544:1E1F1F20
6548:20202121
654C:22222223
6550:23242424	DEFB of 16 bytes
6554:25252626
6558:26272727
655C:28282929
6560:292A2A2A	DEFB of 16 bytes
6564:2B2B2C2C
6568:2C2D2D2D
656C:2E2E2F2F
6570:2F303030	DEFB of 16 bytes
6574:31313132
6578:32333333
657C:34343435
6580:35363637	DEFB of 16 bytes
6584:3839393A
6588:3B3B3C3D
658C:3D3E3F3F
6590:40414142	DEFB of 16 bytes
6594:43434445
6598:45464747
659C:4848494A
65A0:4A4B4C4C	DEFB of 16 bytes
65A4:4D4E4E4F
65A8:4F505151
65AC:52525354
65B0:54555556	DEFB of 16 bytes
65B4:57575858
65B8:595A5A5B
65BC:5B5C5D5D
65C0:5E5E5F5F	DEFB of 16 bytes
65C4:60616162
65C8:62636364
65CC:65656666
65D0:67676868	DEFB of 16 bytes
65D4:696A6A6B
65D8:6B6C6C6D
65DC:6D6E6E6F
65E0:6F707171	DEFB of 16 bytes
65E4:72727373
65E8:74747575
65EC:76767777
65F0:78787979	DEFB of 16 bytes
65F4:7A7A7B7B
65F8:7C7C7D7D
65FC:7E7E7F7F
		ENDIF
		End of INCLUDE
		INCLUDE fpow2.tab
		IF (true)
	DEFS of 0 bytes with value 00
6600:		label POW2TAB
6600:00020406	DEFB of 16 bytes
6604:080A0C0E
6608:10131517
660C:191B1E20
6610:22242729	DEFB of 16 bytes
6614:2B2D3032
6618:3437393C
661C:3E414346
6620:484B4D50	DEFB of 16 bytes
6624:5255575A
6628:5C5F6264
662C:676A6D6F
6630:7275787A	DEFB of 16 bytes
6634:7D000103
6638:04060709
663C:0A0C0D0F
6640:10121315	DEFB of 16 bytes
6644:1618191B
6648:1C1E1F21
664C:23242627
6650:292B2C2E	DEFB of 16 bytes
6654:30313335
6658:36383A3B
665C:3D3F4142
6660:44464849	DEFB of 16 bytes
6664:4B4D4F50
6668:52545658
666C:5A5B5D5F
6670:61636567	DEFB of 16 bytes
6674:696A6C6E
6678:70727476
667C:787A7C7E
PREDEL_POW2	EQU 0034
		ENDIF
		End of INCLUDE
		INCLUDE fln.tab
		IF (true)
6680:00000000	DEFS of 128 bytes with value 00
6684:00000000
6688:00000000
668C:00000000
6690:00000000
6694:00000000
6698:00000000
669C:00000000
66A0:00000000
66A4:00000000
66A8:00000000
66AC:00000000
66B0:00000000
66B4:00000000
66B8:00000000
66BC:00000000
66C0:00000000
66C4:00000000
66C8:00000000
66CC:00000000
66D0:00000000
66D4:00000000
66D8:00000000
66DC:00000000
66E0:00000000
66E4:00000000
66E8:00000000
66EC:00000000
66F0:00000000
66F4:00000000
66F8:00000000
66FC:00000000
6700:		label LN_M
6700:0000	DEFW of 1 words
6702:7F77	DEFW of 1 words
6704:7E78	DEFW of 1 words
6706:3E79	DEFW of 1 words
6708:7C79	DEFW of 1 words
670A:1D7A	DEFW of 1 words
670C:3C7A	DEFW of 1 words
670E:5A7A	DEFW of 1 words
6710:787A	DEFW of 1 words
6712:0B7B	DEFW of 1 words
6714:1A7B	DEFW of 1 words
6716:297B	DEFW of 1 words
6718:387B	DEFW of 1 words
671A:467B	DEFW of 1 words
671C:557B	DEFW of 1 words
671E:637B	DEFW of 1 words
6720:717B	DEFW of 1 words
6722:7F7B	DEFW of 1 words
6724:077C	DEFW of 1 words
6726:0E7C	DEFW of 1 words
6728:157C	DEFW of 1 words
672A:1C7C	DEFW of 1 words
672C:227C	DEFW of 1 words
672E:297C	DEFW of 1 words
6730:307C	DEFW of 1 words
6732:377C	DEFW of 1 words
6734:3D7C	DEFW of 1 words
6736:447C	DEFW of 1 words
6738:4B7C	DEFW of 1 words
673A:517C	DEFW of 1 words
673C:587C	DEFW of 1 words
673E:5E7C	DEFW of 1 words
6740:647C	DEFW of 1 words
6742:6B7C	DEFW of 1 words
6744:717C	DEFW of 1 words
6746:787C	DEFW of 1 words
6748:7E7C	DEFW of 1 words
674A:027D	DEFW of 1 words
674C:057D	DEFW of 1 words
674E:087D	DEFW of 1 words
6750:0B7D	DEFW of 1 words
6752:0E7D	DEFW of 1 words
6754:117D	DEFW of 1 words
6756:147D	DEFW of 1 words
6758:177D	DEFW of 1 words
675A:1A7D	DEFW of 1 words
675C:1D7D	DEFW of 1 words
675E:207D	DEFW of 1 words
6760:237D	DEFW of 1 words
6762:267D	DEFW of 1 words
6764:297D	DEFW of 1 words
6766:2C7D	DEFW of 1 words
6768:2F7D	DEFW of 1 words
676A:317D	DEFW of 1 words
676C:347D	DEFW of 1 words
676E:377D	DEFW of 1 words
6770:3A7D	DEFW of 1 words
6772:3D7D	DEFW of 1 words
6774:3F7D	DEFW of 1 words
6776:427D	DEFW of 1 words
6778:457D	DEFW of 1 words
677A:487D	DEFW of 1 words
677C:4A7D	DEFW of 1 words
677E:4D7D	DEFW of 1 words
6780:507D	DEFW of 1 words
6782:527D	DEFW of 1 words
6784:557D	DEFW of 1 words
6786:587D	DEFW of 1 words
6788:5A7D	DEFW of 1 words
678A:5D7D	DEFW of 1 words
678C:5F7D	DEFW of 1 words
678E:627D	DEFW of 1 words
6790:647D	DEFW of 1 words
6792:677D	DEFW of 1 words
6794:6A7D	DEFW of 1 words
6796:6C7D	DEFW of 1 words
6798:6F7D	DEFW of 1 words
679A:717D	DEFW of 1 words
679C:747D	DEFW of 1 words
679E:767D	DEFW of 1 words
67A0:797D	DEFW of 1 words
67A2:7B7D	DEFW of 1 words
67A4:7D7D	DEFW of 1 words
67A6:007E	DEFW of 1 words
67A8:017E	DEFW of 1 words
67AA:027E	DEFW of 1 words
67AC:047E	DEFW of 1 words
67AE:057E	DEFW of 1 words
67B0:067E	DEFW of 1 words
67B2:077E	DEFW of 1 words
67B4:087E	DEFW of 1 words
67B6:097E	DEFW of 1 words
67B8:0B7E	DEFW of 1 words
67BA:0C7E	DEFW of 1 words
67BC:0D7E	DEFW of 1 words
67BE:0E7E	DEFW of 1 words
67C0:0F7E	DEFW of 1 words
67C2:107E	DEFW of 1 words
67C4:127E	DEFW of 1 words
67C6:137E	DEFW of 1 words
67C8:147E	DEFW of 1 words
67CA:157E	DEFW of 1 words
67CC:167E	DEFW of 1 words
67CE:177E	DEFW of 1 words
67D0:187E	DEFW of 1 words
67D2:197E	DEFW of 1 words
67D4:1A7E	DEFW of 1 words
67D6:1C7E	DEFW of 1 words
67D8:1D7E	DEFW of 1 words
67DA:1E7E	DEFW of 1 words
67DC:1F7E	DEFW of 1 words
67DE:207E	DEFW of 1 words
67E0:217E	DEFW of 1 words
67E2:227E	DEFW of 1 words
67E4:237E	DEFW of 1 words
67E6:247E	DEFW of 1 words
67E8:257E	DEFW of 1 words
67EA:267E	DEFW of 1 words
67EC:277E	DEFW of 1 words
67EE:287E	DEFW of 1 words
67F0:297E	DEFW of 1 words
67F2:2A7E	DEFW of 1 words
67F4:2B7E	DEFW of 1 words
67F6:2C7E	DEFW of 1 words
67F8:2D7E	DEFW of 1 words
67FA:2E7E	DEFW of 1 words
67FC:2F7E	DEFW of 1 words
67FE:307E	DEFW of 1 words
6800:		label LN2_EXP
6800:B0AFADAC	DEFB of 16 bytes
6804:ABA9A8A6
6808:A5A4A2A1
680C:9F9E9D9B
6810:9A989796	DEFB of 16 bytes
6814:94939290
6818:8F8D8C8B
681C:89888685
6820:848281FF	DEFB of 16 bytes
6824:FCFAF7F4
6828:F1EEECE9
682C:E6E3E1DE
6830:DBD8D5D3	DEFB of 16 bytes
6834:D0CDCAC8
6838:C5C2BFBD
683C:BAB7B4B1
6840:AFACA9A6	DEFB of 16 bytes
6844:A4A19E9B
6848:98969390
684C:8D8B8885
6850:82FFFAF4	DEFB of 16 bytes
6854:EEE9E3DE
6858:D8D3CDC8
685C:C2BDB7B1
6860:ACA6A19B	DEFB of 16 bytes
6864:96908B85
6868:FFF4E9DE
686C:D3C8BDB1
6870:A69B9085	DEFB of 16 bytes
6874:F4DEC8B1
6878:9B85DEB1
687C:85B1B100
6880:31310531	DEFB of 16 bytes
6884:5E051B31
6888:485E7405
688C:101B2631
6890:3D48535E	DEFB of 16 bytes
6894:69747F05
6898:0B10161B
689C:21262C31
68A0:373D4248	DEFB of 16 bytes
68A4:4D53585E
68A8:63696E74
68AC:7A7F0205
68B0:080B0D10	DEFB of 16 bytes
68B4:1316181B
68B8:1E212426
68BC:292C2F31
68C0:34373A3D	DEFB of 16 bytes
68C4:3F424548
68C8:4A4D5053
68CC:55585B5E
68D0:61636669	DEFB of 16 bytes
68D4:6C6E7174
68D8:777A7C7F
68DC:01020405
68E0:0608090B	DEFB of 16 bytes
68E4:0C0D0F10
68E8:12131416
68EC:17181A1B
68F0:1D1E1F21	DEFB of 16 bytes
68F4:22242526
68F8:28292B2C
68FC:2D2F3031
6900:85858585	DEFB of 16 bytes
6904:85858585
6908:85858585
690C:85858585
6910:85858585	DEFB of 16 bytes
6914:85858585
6918:85858585
691C:85858585
6920:85858584	DEFB of 16 bytes
6924:84848484
6928:84848484
692C:84848484
6930:84848484	DEFB of 16 bytes
6934:84848484
6938:84848484
693C:84848484
6940:84848484	DEFB of 16 bytes
6944:84848484
6948:84848484
694C:84848484
6950:84838383	DEFB of 16 bytes
6954:83838383
6958:83838383
695C:83838383
6960:83838383	DEFB of 16 bytes
6964:83838383
6968:82828282
696C:82828282
6970:82828282	DEFB of 16 bytes
6974:81818181
6978:81818080
697C:807F7E00
6980:7E7F8080	DEFB of 16 bytes
6984:80818181
6988:81818182
698C:82828282
6990:82828282	DEFB of 16 bytes
6994:82828283
6998:83838383
699C:83838383
69A0:83838383	DEFB of 16 bytes
69A4:83838383
69A8:83838383
69AC:83838484
69B0:84848484	DEFB of 16 bytes
69B4:84848484
69B8:84848484
69BC:84848484
69C0:84848484	DEFB of 16 bytes
69C4:84848484
69C8:84848484
69CC:84848484
69D0:84848484	DEFB of 16 bytes
69D4:84848484
69D8:84848484
69DC:85858585
69E0:85858585	DEFB of 16 bytes
69E4:85858585
69E8:85858585
69EC:85858585
69F0:85858585	DEFB of 16 bytes
69F4:85858585
69F8:85858585
69FC:85858585
		IF (true)
6A00:		label LN_FIX
6A00:B17FB07F	DEFW of 16 words
6A04:AF7FAE7F
6A08:AE7FAD7F
6A0C:AC7FAB7F
6A10:AA7FA97F
6A14:A87FA77F
6A18:A67FA57F
6A1C:A47FA37F
6A20:A27FA17F	DEFW of 16 words
6A24:A17FA07F
6A28:9F7F9E7F
6A2C:9D7F9C7F
6A30:9B7F9B7F
6A34:9A7F997F
6A38:987F977F
6A3C:967F967F
6A40:957F947F	DEFW of 16 words
6A44:937F937F
6A48:927F917F
6A4C:907F8F7F
6A50:8F7F8E7F
6A54:8D7F8C7F
6A58:8C7F8B7F
6A5C:8A7F897F
6A60:897F887F	DEFW of 16 words
6A64:877F877F
6A68:867F857F
6A6C:847F847F
6A70:837F827F
6A74:827F817F
6A78:807FFF7E
6A7C:FE7EFC7E
6A80:FB7EFA7E	DEFW of 16 words
6A84:F87EF77E
6A88:F67EF57E
6A8C:F37EF27E
6A90:F17EEF7E
6A94:EE7EED7E
6A98:EC7EEA7E
6A9C:E97EE87E
6AA0:E77EE57E	DEFW of 16 words
6AA4:E47EE37E
6AA8:E27EE17E
6AAC:DF7EDE7E
6AB0:DD7EDC7E
6AB4:DB7ED97E
6AB8:D87ED77E
6ABC:D67ED57E
6AC0:D47ED27E	DEFW of 16 words
6AC4:D17ED07E
6AC8:CF7ECE7E
6ACC:CD7ECC7E
6AD0:CB7ECA7E
6AD4:C87EC77E
6AD8:C67EC57E
6ADC:C47EC37E
6AE0:C27EC17E	DEFW of 16 words
6AE4:C07EBF7E
6AE8:BE7EBD7E
6AEC:BC7EBB7E
6AF0:BA7EB97E
6AF4:B87EB67E
6AF8:B57EB47E
6AFC:B37EB27E
6B00:B17EAF7E	DEFW of 16 words
6B04:AD7EAC7E
6B08:AA7EA87E
6B0C:A67EA47E
6B10:A27EA07E
6B14:9E7E9C7E
6B18:9B7E997E
6B1C:977E957E
6B20:937E927E	DEFW of 16 words
6B24:907E8E7E
6B28:8C7E8B7E
6B2C:897E877E
6B30:857E847E
6B34:827E807E
6B38:FE7DFA7D
6B3C:F77DF47D
6B40:F17DED7D	DEFW of 16 words
6B44:EA7DE77D
6B48:E47DE17D
6B4C:DE7DDB7D
6B50:D87DD57D
6B54:D27DCF7D
6B58:CC7DC97D
6B5C:C67DC37D
6B60:C07DBD7D	DEFW of 16 words
6B64:BA7DB77D
6B68:B47DB27D
6B6C:AF7DAC7D
6B70:A97DA67D
6B74:A47DA17D
6B78:9E7D9B7D
6B7C:997D967D
6B80:937D917D	DEFW of 16 words
6B84:8E7D8B7D
6B88:897D867D
6B8C:847D817D
6B90:FD7CF87C
6B94:F37CEE7C
6B98:E97CE37C
6B9C:DF7CDA7C
6BA0:D57CD07C	DEFW of 16 words
6BA4:CB7CC67C
6BA8:C17CBC7C
6BAC:B87CB37C
6BB0:AE7CA97C
6BB4:A57CA07C
6BB8:9B7C977C
6BBC:927C8D7C
6BC0:897C847C	DEFW of 16 words
6BC4:FF7BF67B
6BC8:ED7BE47B
6BCC:DB7BD27B
6BD0:CA7BC17B
6BD4:B87BAF7B
6BD8:A77B9E7B
6BDC:957B8D7B
6BE0:847BF77A	DEFW of 16 words
6BE4:E67AD57A
6BE8:C57AB47A
6BEC:A37A937A
6BF0:827AE379
6BF4:C279A279
6BF8:8179C178
6BFC:81788077
		ENDIF
		ENDIF
		End of INCLUDE
		INCLUDE fexp.tab
		IF (true)
		INCLUDE fmul.tab
		IF (false)
- DEFS    (($ + $FF) / $100) * $100 - $
- Tab_AmB_lo:	; $FC0 - tab_minus[i]
- db $c0,$c0,$be,$be,$bb,$ba,$b6,$b4,$af,$ac,$a6,$a2,$9c,$96,$8e,$88   ; 0_     fc0,fc0,fbe,fbe,fbb,fba,fb6,fb4,faf,fac,fa6,fa2,f9c,f96,f8e,f88 0_
- db $80,$78,$6e,$66,$5b,$52,$46,$3b,$30,$24,$16,$0a,$fb,$ee,$de,$d0   ; 1_     f80,f78,f6e,f66,f5b,f52,f46,f3b,f30,f24,f16,f0a,efb,eee,ede,ed0 1_
- db $c0,$b0,$9f,$8e,$7b,$6a,$57,$44,$30,$1c,$07,$f2,$dc,$c6,$ae,$98   ; 2_     ec0,eb0,e9f,e8e,e7b,e6a,e57,e44,e30,e1c,e07,df2,ddc,dc6,dae,d98 2_
- db $80,$68,$4f,$36,$1b,$02,$e6,$cc,$b0,$93,$77,$5a,$3c,$1e,$ff,$e0   ; 3_     d80,d68,d4f,d36,d1b,d02,ce6,ccc,cb0,c93,c77,c5a,c3c,c1e,bff,be0 3_
- db $c0,$a0,$7f,$5e,$3c,$1a,$f7,$d4,$b0,$8c,$67,$42,$1b,$f6,$cf,$a8   ; 4_     bc0,ba0,b7f,b5e,b3c,b1a,af7,ad4,ab0,a8c,a67,a42,a1b,9f6,9cf,9a8 4_
- db $80,$58,$2e,$06,$dc,$b2,$87,$5c,$30,$04,$d7,$aa,$7b,$4e,$1f,$f0   ; 5_     980,958,92e,906,8dc,8b2,887,85c,830,804,7d7,7aa,77b,74e,71f,6f0 5_
- db $c0,$90,$5f,$2e,$fc,$ca,$97,$64,$30,$fc,$c7,$92,$5b,$26,$ef,$b8   ; 6_     6c0,690,65f,62e,5fc,5ca,597,564,530,4fc,4c7,492,45b,426,3ef,3b8 6_
- db $80,$48,$0f,$d6,$9c,$62,$27,$ec,$b0,$74,$37,$fa,$bc,$7e,$3f,$00   ; 7_     380,348,30f,2d6,29c,262,227,1ec,1b0,174,137, fa, bc, 7e, 3f, 00 7_
- db $00,$00,$3f,$7e,$bc,$fa,$37,$74,$b0,$ec,$27,$62,$9c,$d6,$0f,$48   ; 8_      00, 00, 3f, 7e, bc, fa,137,174,1b0,1ec,227,262,29c,2d6,30f,348 8_
- db $80,$b8,$ef,$26,$5b,$92,$c7,$fc,$30,$64,$97,$ca,$fc,$2e,$5f,$90   ; 9_     380,3b8,3ef,426,45b,492,4c7,4fc,530,564,597,5ca,5fc,62e,65f,690 9_
- db $c0,$f0,$1f,$4e,$7b,$aa,$d7,$04,$30,$5c,$87,$b2,$dc,$06,$2e,$58   ; A_     6c0,6f0,71f,74e,77b,7aa,7d7,804,830,85c,887,8b2,8dc,906,92e,958 A_
- db $80,$a8,$cf,$f6,$1b,$42,$67,$8c,$b0,$d4,$f7,$1a,$3c,$5e,$7f,$a0   ; B_     980,9a8,9cf,9f6,a1b,a42,a67,a8c,ab0,ad4,af7,b1a,b3c,b5e,b7f,ba0 B_
- db $c0,$e0,$ff,$1e,$3c,$5a,$77,$93,$b0,$cc,$e6,$02,$1b,$36,$4f,$68   ; C_     bc0,be0,bff,c1e,c3c,c5a,c77,c93,cb0,ccc,ce6,d02,d1b,d36,d4f,d68 C_
- db $80,$98,$ae,$c6,$dc,$f2,$07,$1c,$30,$44,$57,$6a,$7b,$8e,$9f,$b0   ; D_     d80,d98,dae,dc6,ddc,df2,e07,e1c,e30,e44,e57,e6a,e7b,e8e,e9f,eb0 D_
- db $c0,$d0,$de,$ee,$fb,$0a,$16,$24,$30,$3b,$46,$52,$5b,$66,$6e,$78   ; E_     ec0,ed0,ede,eee,efb,f0a,f16,f24,f30,f3b,f46,f52,f5b,f66,f6e,f78 E_
- db $80,$88,$8e,$96,$9c,$a2,$a6,$ac,$af,$b4,$b6,$ba,$bb,$be,$be,$c0   ; F_     f80,f88,f8e,f96,f9c,fa2,fa6,fac,faf,fb4,fb6,fba,fbb,fbe,fbe,fc0 F_
- db $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f   ; 0_  
- db $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0e,$0e,$0e,$0e   ; 1_  
- db $0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0d,$0d,$0d,$0d,$0d   ; 2_  
- db $0d,$0d,$0d,$0d,$0d,$0d,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0b,$0b   ; 3_  
- db $0b,$0b,$0b,$0b,$0b,$0b,$0a,$0a,$0a,$0a,$0a,$0a,$0a,$09,$09,$09   ; 4_  
- db $09,$09,$09,$09,$08,$08,$08,$08,$08,$08,$07,$07,$07,$07,$07,$06   ; 5_  
- db $06,$06,$06,$06,$05,$05,$05,$05,$05,$04,$04,$04,$04,$04,$03,$03   ; 6_  
- db $03,$03,$03,$02,$02,$02,$02,$01,$01,$01,$01,$00,$00,$00,$00,$00   ; 7_  
- db $00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03   ; 8_  
- db $03,$03,$03,$04,$04,$04,$04,$04,$05,$05,$05,$05,$05,$06,$06,$06   ; 9_  
- db $06,$06,$07,$07,$07,$07,$07,$08,$08,$08,$08,$08,$08,$09,$09,$09   ; A_  
- db $09,$09,$09,$09,$0a,$0a,$0a,$0a,$0a,$0a,$0a,$0b,$0b,$0b,$0b,$0b   ; B_  
- db $0b,$0b,$0b,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0d,$0d,$0d,$0d,$0d   ; C_  
- db $0d,$0d,$0d,$0d,$0d,$0d,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e   ; D_  
- db $0e,$0e,$0e,$0e,$0e,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f   ; E_  
- db $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f   ; F_  
- Tab_ApB_lo:	; tab_plus[i] - $FC0
- db $80,$00,$81,$02,$84,$06,$89,$0c,$90,$14,$99,$1e,$a4,$2a,$b1,$38   ; 0_     3080,3100,3181,3202,3284,3306,3389,340c,3490,3514,3599,361e,36a4,372a,37b1,3838 0_
- db $bf,$48,$d1,$5a,$e3,$6e,$f9,$84,$10,$9c,$29,$b6,$44,$d2,$61,$f0   ; 1_     38bf,3948,39d1,3a5a,3ae3,3b6e,3bf9,3c84,3d10,3d9c,3e29,3eb6,3f44,3fd2,4061,40f0 1_
- db $7f,$10,$a1,$32,$c4,$56,$e9,$7c,$10,$a4,$39,$ce,$63,$fa,$91,$28   ; 2_     417f,4210,42a1,4332,43c4,4456,44e9,457c,4610,46a4,4739,47ce,4863,48fa,4991,4a28 2_
- db $bf,$58,$f1,$8a,$23,$be,$59,$f4,$90,$2c,$c8,$66,$03,$a2,$40,$e0   ; 3_     4abf,4b58,4bf1,4c8a,4d23,4dbe,4e59,4ef4,4f90,502c,50c8,5166,5203,52a2,5340,53e0 3_
- db $7f,$1f,$c1,$61,$04,$a5,$49,$ec,$90,$33,$d9,$7d,$23,$c9,$71,$17   ; 4_     547f,551f,55c1,5661,5704,57a5,5849,58ec,5990,5a33,5ad9,5b7d,5c23,5cc9,5d71,5e17 4_
- db $bf,$67,$11,$b9,$63,$0d,$b9,$63,$10,$bb,$69,$15,$c3,$71,$21,$cf   ; 5_     5ebf,5f67,6011,60b9,6163,620d,62b9,6363,6410,64bb,6569,6615,66c3,6771,6821,68cf 5_
- db $7f,$2f,$e0,$91,$43,$f5,$a8,$5b,$10,$c4,$78,$2e,$e3,$9a,$51,$08   ; 6_     697f,6a2f,6ae0,6b91,6c43,6cf5,6da8,6e5b,6f10,6fc4,7078,712e,71e3,729a,7351,7408 6_
- db $bf,$78,$30,$ea,$a4,$5e,$19,$d4,$8f,$4c,$09,$c6,$83,$42,$01,$c0   ; 7_     74bf,7578,7630,76ea,77a4,785e,7919,79d4,7a8f,7b4c,7c09,7cc6,7d83,7e42,7f01,7fc0 7_
- db $80,$40,$01,$c2,$83,$46,$09,$cc,$8f,$54,$19,$de,$a4,$6a,$31,$f8   ; 8_     8080,8140,8201,82c2,8383,8446,8509,85cc,868f,8754,8819,88de,89a4,8a6a,8b31,8bf8 8_
- db $c0,$88,$51,$1a,$e3,$ae,$79,$44,$0f,$dc,$a9,$76,$44,$12,$e1,$b0   ; 9_     8cc0,8d88,8e51,8f1a,8fe3,90ae,9179,9244,930f,93dc,94a9,9576,9644,9712,97e1,98b0 9_
- db $80,$50,$20,$f2,$c4,$96,$68,$3c,$0f,$e4,$b8,$8e,$64,$3a,$11,$e8   ; A_     9980,9a50,9b20,9bf2,9cc4,9d96,9e68,9f3c,a00f,a0e4,a1b8,a28e,a364,a43a,a511,a5e8 A_
- db $c0,$98,$70,$4a,$23,$fe,$d9,$b4,$8f,$6c,$48,$26,$04,$e2,$c0,$a0   ; B_     a6c0,a798,a870,a94a,aa23,aafe,abd9,acb4,ad8f,ae6c,af48,b026,b104,b1e2,b2c0,b3a0 B_
- db $80,$60,$41,$22,$04,$e6,$c9,$ac,$8f,$74,$59,$3e,$23,$0a,$f1,$d8   ; C_     b480,b560,b641,b722,b804,b8e6,b9c9,baac,bb8f,bc74,bd59,be3e,bf23,c00a,c0f1,c1d8 C_
- db $c0,$a8,$91,$7a,$64,$4e,$39,$24,$10,$fc,$e9,$d6,$c4,$b2,$a1,$90   ; D_     c2c0,c3a8,c491,c57a,c664,c74e,c839,c924,ca10,cafc,cbe9,ccd6,cdc4,ceb2,cfa1,d090 D_
- db $80,$70,$61,$52,$44,$36,$29,$1c,$10,$04,$f9,$ee,$e4,$da,$d1,$c8   ; E_     d180,d270,d361,d452,d544,d636,d729,d81c,d910,da04,daf9,dbee,dce4,ddda,ded1,dfc8 E_
- db $c0,$b8,$b1,$aa,$a4,$9e,$99,$94,$90,$8c,$89,$86,$84,$82,$81,$00   ; F_     e0c0,e1b8,e2b1,e3aa,e4a4,e59e,e699,e794,e890,e98c,ea89,eb86,ec84,ed82,ee81,  00 F_
- db $30,$31,$31,$32,$32,$33,$33,$34,$34,$35,$35,$36,$36,$37,$37,$38   ; 0_  
- db $38,$39,$39,$3a,$3a,$3b,$3b,$3c,$3d,$3d,$3e,$3e,$3f,$3f,$40,$40   ; 1_  
- db $41,$42,$42,$43,$43,$44,$44,$45,$46,$46,$47,$47,$48,$48,$49,$4a   ; 2_  
- db $4a,$4b,$4b,$4c,$4d,$4d,$4e,$4e,$4f,$50,$50,$51,$52,$52,$53,$53   ; 3_  
- db $54,$55,$55,$56,$57,$57,$58,$58,$59,$5a,$5a,$5b,$5c,$5c,$5d,$5e   ; 4_  
- db $5e,$5f,$60,$60,$61,$62,$62,$63,$64,$64,$65,$66,$66,$67,$68,$68   ; 5_  
- db $69,$6a,$6a,$6b,$6c,$6c,$6d,$6e,$6f,$6f,$70,$71,$71,$72,$73,$74   ; 6_  
- db $74,$75,$76,$76,$77,$78,$79,$79,$7a,$7b,$7c,$7c,$7d,$7e,$7f,$7f   ; 7_  
- db $80,$81,$82,$82,$83,$84,$85,$85,$86,$87,$88,$88,$89,$8a,$8b,$8b   ; 8_  
- db $8c,$8d,$8e,$8f,$8f,$90,$91,$92,$93,$93,$94,$95,$96,$97,$97,$98   ; 9_  
- db $99,$9a,$9b,$9b,$9c,$9d,$9e,$9f,$a0,$a0,$a1,$a2,$a3,$a4,$a5,$a5   ; A_  
- db $a6,$a7,$a8,$a9,$aa,$aa,$ab,$ac,$ad,$ae,$af,$b0,$b1,$b1,$b2,$b3   ; B_  
- db $b4,$b5,$b6,$b7,$b8,$b8,$b9,$ba,$bb,$bc,$bd,$be,$bf,$c0,$c0,$c1   ; C_  
- db $c2,$c3,$c4,$c5,$c6,$c7,$c8,$c9,$ca,$ca,$cb,$cc,$cd,$ce,$cf,$d0   ; D_  
- db $d1,$d2,$d3,$d4,$d5,$d6,$d7,$d8,$d9,$da,$da,$db,$dc,$dd,$de,$df   ; E_  
- db $e0,$e1,$e2,$e3,$e4,$e5,$e6,$e7,$e8,$e9,$ea,$eb,$ec,$ed,$ee,$00   ; F_  
		ENDIF
		End of INCLUDE
	DEFS of 0 bytes with value 00
6C00:		label EXP_TAB
6C00:00000000	DEFB of 16 bytes
6C04:00000001
6C08:01020408
6C0C:1124532E
6C10:6C5A3A08	DEFB of 16 bytes
6C14:10217F7F
6C18:7F7F7F7F
6C1C:7F7F7F7F
6C20:7F7F7F7F	DEFB of 16 bytes
6C24:7F7F7F7F
6C28:7F7F7F7F
6C2C:7F7F7F7F
6C30:7F7F7F7F	DEFB of 16 bytes
6C34:7F7F7F7F
6C38:7F7F7F7F
6C3C:7F7F7F7F
6C40:7F7F7F7F	DEFB of 16 bytes
6C44:7F7F7F7F
6C48:7F7F7F7F
6C4C:7F7F7F7F
6C50:7F7F7F7F	DEFB of 16 bytes
6C54:7F7F7F7F
6C58:7F7F7F7F
6C5C:7F7F7F7F
6C60:7F7F7F7F	DEFB of 16 bytes
6C64:7F7F7F7F
6C68:7F7F7F7F
6C6C:7F7F7F7F
6C70:00000000	DEFB of 16 bytes
6C74:00000000
6C78:00000000
6C7C:00000000
6C80:00000000	DEFB of 16 bytes
6C84:0000007F
6C88:7E7C7870
6C8C:62471B3C
6C90:0B163072	DEFB of 16 bytes
6C94:644B0000
6C98:00000000
6C9C:00000000
6CA0:00000000	DEFB of 16 bytes
6CA4:00000000
6CA8:00000000
6CAC:00000000
6CB0:00000000	DEFB of 16 bytes
6CB4:00000000
6CB8:00000000
6CBC:00000000
6CC0:00000000	DEFB of 16 bytes
6CC4:00000000
6CC8:00000000
6CCC:00000000
6CD0:00000000	DEFB of 16 bytes
6CD4:00000000
6CD8:00000000
6CDC:00000000
6CE0:00000000	DEFB of 16 bytes
6CE4:00000000
6CE8:00000000
6CEC:00000000
6CF0:00000000	DEFB of 16 bytes
6CF4:00000000
6CF8:00000000
6CFC:00000000
6D00:7F7F7F7F	DEFB of 16 bytes
6D04:7F7F7F7F
6D08:7F7F7F7F
6D0C:7F7F7F80
6D10:81848A96	DEFB of 16 bytes
6D14:ADDBFFFF
6D18:FFFFFFFF
6D1C:FFFFFFFF
6D20:FFFFFFFF	DEFB of 16 bytes
6D24:FFFFFFFF
6D28:FFFFFFFF
6D2C:FFFFFFFF
6D30:FFFFFFFF	DEFB of 16 bytes
6D34:FFFFFFFF
6D38:FFFFFFFF
6D3C:FFFFFFFF
6D40:FFFFFFFF	DEFB of 16 bytes
6D44:FFFFFFFF
6D48:FFFFFFFF
6D4C:FFFFFFFF
6D50:FFFFFFFF	DEFB of 16 bytes
6D54:FFFFFFFF
6D58:FFFFFFFF
6D5C:FFFFFFFF
6D60:FFFFFFFF	DEFB of 16 bytes
6D64:FFFFFFFF
6D68:FFFFFFFF
6D6C:FFFFFFFF
6D70:7F7F7F7F	DEFB of 16 bytes
6D74:7F7F7F7F
6D78:7F7F7F7F
6D7C:7F7F7F7F
6D80:7F7F7F7F	DEFB of 16 bytes
6D84:7F7F7F7E
6D88:7E7E7E7E
6D8C:7E7E7E7D
6D90:7C797367	DEFB of 16 bytes
6D94:50220000
6D98:00000000
6D9C:00000000
6DA0:00000000	DEFB of 16 bytes
6DA4:00000000
6DA8:00000000
6DAC:00000000
6DB0:00000000	DEFB of 16 bytes
6DB4:00000000
6DB8:00000000
6DBC:00000000
6DC0:00000000	DEFB of 16 bytes
6DC4:00000000
6DC8:00000000
6DCC:00000000
6DD0:00000000	DEFB of 16 bytes
6DD4:00000000
6DD8:00000000
6DDC:00000000
6DE0:00000000	DEFB of 16 bytes
6DE4:00000000
6DE8:00000000
6DEC:00000000
6DF0:00000000	DEFB of 16 bytes
6DF4:00000000
6DF8:00000000
6DFC:00000000
		ENDIF
		End of INCLUDE
		INCLUDE fdiv.asm
		IF (true)
		INCLUDE fdiv_pow2.asm
		IF (true)
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
6E00:		label @FDIV_POW2
		IF (true)
6E00:		label FDIV_POW2
		ENDIF
6E00:7D		LD A, L
6E01:A9		XOR C
6E02:6F		LD L, A
6E03:78		LD A, B
6E04:94		SUB H
6E05:380C	JR C, 6E13
6E07:C67F	ADD A, 7F
6E09:67		LD H, A
6E0A:D0		RET NC
6E0B:		label FDIV_POW2_OVER
6E0B:26FF	LD H, FF
6E0D:7D		LD A, L
6E0E:F67F	OR 7F
6E10:6F		LD L, A
		IF (false)
-         CALL    OVER_COL_WARNING    ;  3:17
		ENDIF
		IF (true)
6E11:37		SCF
		ENDIF
6E12:C9		RET
6E13:		label FDIV_POW2_HL_GR
6E13:C67F	ADD A, 7F
6E15:67		LD H, A
6E16:D8		RET C
6E17:		label FDIV_POW2_UNDER
6E17:2600	LD H, 00
6E19:7D		LD A, L
6E1A:E680	AND 80
6E1C:6F		LD L, A
		IF (false)
-         CALL    UNDER_COL_WARNING   ;  3:17
		ENDIF
		IF (true)
6E1D:37		SCF
		ENDIF
6E1E:C9		RET
		ENDIF
		End of INCLUDE
		IF (true)
6E1F:		label FDIV_UNDERFLOW
6E1F:7B		LD A, E
6E20:A9		XOR C
6E21:E680	AND 80
6E23:62		LD H, D
6E24:6F		LD L, A
6E25:37		SCF
6E26:C9		RET
		ENDIF
6E27:		label @FDIV
		IF (true)
6E27:		label FDIV
		ENDIF
6E27:7D		LD A, L
6E28:87		ADD A, A
6E29:28D5	JR Z, 6E00
6E2B:3EFD	LD A, FD
6E2D:94		SUB H
6E2E:2660	LD H, 60
6E30:5E		LD E, (HL)
6E31:57		LD D, A
6E32:3006	JR NC, 6E3A
6E34:80		ADD A, B
6E35:47		LD B, A
6E36:1600	LD D, 00
		IF (true)
6E38:30E5	JR NC, 6E1F
		INCLUDE fmul.asm
		IF (true)
6E3A:		label @FMUL
		IF (true)
6E3A:		label FMUL
		ENDIF
6E3A:79		LD A, C
6E3B:AB		XOR E
6E3C:F67F	OR 7F
6E3E:6F		LD L, A
6E3F:7A		LD A, D
6E40:80		ADD A, B
6E41:3815	JR C, 6E58
6E43:D67F	SUB 7F
6E45:3015	JR NC, 6E5C
6E47:3C		INC A
6E48:2006	JR NZ, 6E50
6E4A:14		INC D
6E4B:CD3A6E	CALL 6E3A
6E4E:25		DEC H
6E4F:C8		RET Z
6E50:		label FMULP_UNDERFLOW
6E50:2600	LD H, 00
		IF (false)
-         CALL    UNDER_COL_WARNING   ;  3:17
		ENDIF
6E52:7D		LD A, L
6E53:E680	AND 80
6E55:6F		LD L, A
		IF (true)
6E56:37		SCF
		ENDIF
6E57:C9		RET
6E58:		label FMUL_C1
6E58:D67F	SUB 7F
6E5A:3027	JR NC, 6E83
6E5C:		label FMUL_NEXT
6E5C:67		LD H, A
6E5D:E5		PUSH HL
6E5E:CBB9	RES 7, C
6E60:CBBB	RES 7, E
6E62:79		LD A, C
6E63:83		ADD A, E
6E64:5F		LD E, A
6E65:1663	LD D, 63
6E67:91		SUB C
6E68:91		SUB C
6E69:6F		LD L, A
6E6A:2661	LD H, 61
6E6C:1A		LD A, (DE)
6E6D:86		ADD A, (HL)
6E6E:4F		LD C, A
6E6F:14		INC D
6E70:1A		LD A, (DE)
6E71:24		INC H
6E72:8E		ADC A, (HL)
6E73:F2876E	JP P, 6E87
6E76:E1		POP HL
6E77:24		INC H
6E78:2809	JR Z, 6E83
6E7A:A5		AND L
6E7B:6F		LD L, A
6E7C:79		LD A, C
6E7D:C640	ADD A, 40
6E7F:D0		RET NC
6E80:2C		INC L
		IF (true)
6E81:B7		OR A
		ENDIF
6E82:C9		RET
6E83:		label FMULP_OVERFLOW
6E83:26FF	LD H, FF
		IF (false)
-         CALL    OVER_COL_WARNING    ;  3:17
		ENDIF
		IF (true)
6E85:37		SCF
		ENDIF
6E86:C9		RET
6E87:		label FMULP_SAME_EXP
6E87:CB11	RL C
6E89:8F		ADC A, A
6E8A:E1		POP HL
6E8B:A5		AND L
6E8C:6F		LD L, A
6E8D:C9		RET
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
		ENDIF
		End of INCLUDE
		ELSE (false)
-         JR      c, @FMUL            ;  2:7/12       continues with FMUL (HL = BC * DE), DE = 1 / HL
- FDIV_UNDERFLOW:                     ;
-         LD      A, E                ;  1:4
-         XOR     C                   ;  1:4
-         AND     SIGN_MASK           ;  2:7
-         LD      H, D                ;  1:4
-         LD      L, A                ;  1:4
-         SCF                         ;  1:4          carry = error
-         RET                         ;  1:10         HL = 0000 0000 s000 0000
		ENDIF
		ENDIF
		End of INCLUDE
		INCLUDE fmul.asm
		IF (false)
- @FMUL:
-                    FMUL                ; *
-         LD      A, C                ;  1:4
-         XOR     E                   ;  1:4
-         OR      $FF - SIGN_MASK     ;  2:7
-         LD      L, A                ;  1:4          s111 1111
-         LD      A, D                ;  1:4
-         ADD     A, B                ;  1:4
-         JR      c, FMUL_C1          ;  2:12/7
-         SUB     BIAS                ;  2:7
-         JR      nc, FMUL_NEXT       ;  2:12/7
-         INC     A                   ;  1:4          $FF => $00?
-         JR      nz, FMULP_UNDERFLOW ;  2:12/7       no chance        
-         INC     D                   ;  1:4
-         CALL    FMUL                ;  3:17         recursion
-         DEC     H                   ;  1:4
-         RET     z                   ;  1:11/5      
- FMULP_UNDERFLOW:
-         LD      H, $00              ;  1:4          HL = 0000 0000 s000 0000
-         CALL    UNDER_COL_WARNING   ;  3:17
-         LD      A, L                ;  1:4          s111 1111
-         AND     SIGN_MASK           ;  2:7          
-         LD      L, A                ;  1:4
-         SCF                         ;  1:4          carry = error
-         RET                         ;  1:10
- FMUL_C1:
-         SUB     BIAS                ;  2:7
-         JR      nc, FMULP_OVERFLOW  ;  2:12/7        
- FMUL_NEXT:
-         LD      H, A                ;  1:4          new exponent
-         PUSH    HL                  ;  1:11
-         RES     7, C                ;  2:8
-         RES     7, E                ;  2:8
-         LD      A, C                ;  1:4
-         ADD     A, E                ;  1:4
-         LD      E, A                ;  1:4          E = A + B
-         LD      D, Tab_ApB_lo/256   ;  2:7          (DE) = Tab_ApB_lo
-         SUB     C                   ;  1:4
-         SUB     C                   ;  1:4
-         LD      L, A                ;  1:4          L = A - B
-         LD      H, Tab_AmB_lo/256   ;  2:7
-         LD      A, (DE)             ;  1:7
-         ADD     A, (HL)             ;  1:7
-         LD      C, A                ;  1:4
-         INC     D                   ;  1:4
-         LD      A, (DE)             ;  1:7
-         INC     H                   ;  1:4
-         ADC     A, (HL)             ;  1:7
-         JP      p, FMULP_SAME_EXP   ;  3:10
-         POP     HL                  ;  1:10
-         INC     H                   ;  1:4          exp++
-         JR      z, FMULP_OVERFLOW   ;  2:7/12
-         AND     L                   ;  1:4
-         LD      L, A                ;  1:4
-         LD      A, C                ;  1:4
-         ADD     A, $40              ;  2:7
-         RET     nc                  ;  1:11/5       RET with reset carry
-         INC     L                   ;  1:4          25%
-         OR      A                   ;  1:4          RET with reset carry
-         RET                         ;  1:10
- FMULP_OVERFLOW:
-         LD      H, $FF              ;  3:10
-         CALL    OVER_COL_WARNING    ;  3:17
-         SCF                         ;  1:4          carry = error
-         RET                         ;  1:10
- FMULP_SAME_EXP:                     ;               (ApB)+(AmB) >= $4000 => pricti: $0 (38.882446%)
-         RL      C                   ;  2:8          
-         ADC     A, A                ;  1:4
-         POP     HL                  ;  1:10         AC = 1mmm mmmm mmmm mmm0
-         AND     L                   ;  1:4          RET with reset carry
-         LD      L, A                ;  1:4
-         RET                         ;  1:10
-     include "color_flow_warning.asm"
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- 
		ENDIF
		End of INCLUDE
		INCLUDE fsub.asm
		IF (true)
6E8E:		label @FSUB
		IF (true)
6E8E:		label FSUB
		ENDIF
		IF (false)
-         LD      A, D                ;  1:4
-         XOR     SIGN_MASK           ;  2:7
-         LD      D, A                ;  1:4      DE = -DE
		ENDIF
		IF (true)
6E8E:7B		LD A, E
6E8F:EE80	XOR 80
6E91:5F		LD E, A
		ENDIF
		IF (false)
-         .ERROR Unexpected value in SIGN_BIT!
		ENDIF
		IF (false)
-         .ERROR  You must exclude the file "fadd.asm" or include "fsub.asm" first
		ELSE (true)
		INCLUDE fadd.asm
		IF (true)
6E92:		label @FADD
		IF (true)
6E92:		label FADD
		ENDIF
		IF (false)
-         LD      A, H                ;  1:4
-         XOR     D                   ;  1:4
-         JP      m, FSUBP_FADD_OP_SGN;  3:10
		ENDIF
		IF (true)
6E92:7D		LD A, L
6E93:AB		XOR E
6E94:FAE06E	JP M, 6EE0
		ENDIF
		IF (false)
-         .ERROR Unexpected value in SIGN_BIT!
		ENDIF
		IF (false)
-         .ERROR  You must exclude the file "faddp.asm" or include "fadd.asm" first
		ELSE (true)
		INCLUDE faddp.asm
		IF (true)
6E97:		label @FADDP
		IF (true)
6E97:		label FADDP
		ENDIF
6E97:7C		LD A, H
6E98:92		SUB D
6E99:2834	JR Z, 6ECF
6E9B:3003	JR NC, 6EA0
6E9D:EB		EX DE, HL
6E9E:ED44	NEG
6EA0:		label FADDP_HL_GR
6EA0:FE09	CP 09
6EA2:D0		RET NC
6EA3:CBFB	SET 7, E
6EA5:1D		DEC E
6EA6:3D		DEC A
6EA7:2805	JR Z, 6EAE
6EA9:47		LD B, A
6EAA:		label FADDP_LOOP
6EAA:CB3B	SRL E
6EAC:10FC	DJNZ 6EAA
6EAE:		label FADDP_STOP
6EAE:7D		LD A, L
6EAF:87		ADD A, A
6EB0:83		ADD A, E
6EB1:300C	JR NC, 6EBF
6EB3:C602	ADD A, 02
6EB5:1F		RRA
6EB6:		label FADDP_EXP_PLUS
6EB6:CB15	RL L
6EB8:1F		RRA
6EB9:6F		LD L, A
		IF (true)
6EBA:B7		OR A
		ENDIF
6EBB:24		INC H
6EBC:C0		RET NZ
6EBD:1817	JR 6ED6
6EBF:		label FADDP_SAME_EXP
		IF (true)
6EBF:CB15	RL L
6EC1:1F		RRA
6EC2:6F		LD L, A
6EC3:D0		RET NC
6EC4:2C		INC L
6EC5:AD		XOR L
6EC6:F0		RET P
6EC7:7D		LD A, L
6EC8:EE80	XOR 80
6ECA:6F		LD L, A
6ECB:24		INC H
6ECC:C0		RET NZ
6ECD:1807	JR 6ED6
		ELSE (false)
-         INC     A                   ;  1:4      rounding
-         JR      z, FADDP_EXP_PLUS   ;  2:12/7   A = 10 0000 0000 && carry = 0
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         RET                         ;  1:10
		ENDIF
6ECF:		label FADDP_EQ_EXP
6ECF:7D		LD A, L
6ED0:83		ADD A, E
6ED1:1F		RRA
6ED2:6F		LD L, A
		IF (true)
6ED3:B7		OR A
		ENDIF
6ED4:24		INC H
6ED5:C0		RET NZ
6ED6:		label FADDP_OVERFLOW
6ED6:25		DEC H
6ED7:F67F	OR 7F
6ED9:6F		LD L, A
		IF (false)
-         CALL    OVER_COL_WARNING    ;  3:17
		ENDIF
		IF (true)
6EDA:37		SCF
		ENDIF
6EDB:C9		RET
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
		ENDIF
		End of INCLUDE
		ENDIF
		INCLUDE fsubp.asm
		IF (true)
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
6EDC:		label @FSUBP
		IF (true)
6EDC:		label FSUBP
		ENDIF
6EDC:7B		LD A, E
6EDD:EE80	XOR 80
6EDF:5F		LD E, A
6EE0:		label FSUBP_FADD_OP_SGN
6EE0:7C		LD A, H
6EE1:92		SUB D
6EE2:283E	JR Z, 6F22
6EE4:3003	JR NC, 6EE9
6EE6:EB		EX DE, HL
6EE7:ED44	NEG
6EE9:		label FSUBP_HL_GR
6EE9:FE09	CP 09
6EEB:3052	JR NC, 6F3F
6EED:47		LD B, A
6EEE:7B		LD A, E
6EEF:F680	OR 80
6EF1:05		DEC B
6EF2:2806	JR Z, 6EFA
6EF4:		label FSUBP_LOOP
6EF4:B7		OR A
6EF5:1F		RRA
6EF6:10FC	DJNZ 6EF4
6EF8:CB10	RL B
6EFA:		label FSUBP_NOLOOP
6EFA:5F		LD E, A
6EFB:7D		LD A, L
6EFC:87		ADD A, A
6EFD:93		SUB E
6EFE:300F	JR NC, 6F0F
6F00:54		LD D, H
6F01:		label FSUBP_NORM
6F01:25		DEC H
6F02:87		ADD A, A
6F03:30FC	JR NC, 6F01
6F05:90		SUB B
6F06:CB15	RL L
6F08:1F		RRA
6F09:6F		LD L, A
6F0A:7A		LD A, D
6F0B:94		SUB H
6F0C:D0		RET NC
6F0D:1828	JR 6F37
6F0F:		label FSUBP_SAME_EXP
6F0F:CB15	RL L
6F11:1F		RRA
6F12:6F		LD L, A
6F13:8F		ADC A, A
		IF (true)
6F14:B7		OR A
		ENDIF
6F15:C0		RET NZ
6F16:05		DEC B
6F17:C0		RET NZ
6F18:7D		LD A, L
6F19:F67F	OR 7F
6F1B:6F		LD L, A
6F1C:7C		LD A, H
6F1D:25		DEC H
6F1E:94		SUB H
6F1F:D0		RET NC
6F20:1815	JR 6F37
6F22:		label FSUBP_EQ_EXP
6F22:7D		LD A, L
6F23:93		SUB E
6F24:87		ADD A, A
6F25:2810	JR Z, 6F37
6F27:3803	JR C, 6F2C
6F29:EB		EX DE, HL
6F2A:ED44	NEG
6F2C:		label FSUBP_EQ_LOOP
6F2C:25		DEC H
6F2D:87		ADD A, A
6F2E:30FC	JR NC, 6F2C
6F30:CB15	RL L
6F32:1F		RRA
6F33:6F		LD L, A
6F34:7A		LD A, D
6F35:94		SUB H
6F36:D0		RET NC
6F37:		label FSUBP_UNDERFLOW
6F37:2600	LD H, 00
6F39:7D		LD A, L
6F3A:E680	AND 80
6F3C:6F		LD L, A
		IF (false)
-         CALL    UNDER_COL_WARNING   ;  3:17
		ENDIF
		IF (true)
6F3D:37		SCF
		ENDIF
6F3E:C9		RET
6F3F:		label FSUBP_TOOBIG
6F3F:C0		RET NZ
6F40:7D		LD A, L
		IF (true)
6F41:E67F	AND 7F
6F43:C0		RET NZ
6F44:7D		LD A, L
6F45:F67F	OR 7F
6F47:6F		LD L, A
		ELSE (false)
-         ADD     A, A                ;  1:4      sign out
-         RET     nz                  ;  1:11/5   HL_mant > 1.0           => HL - DE = HL
-         DEC     A                   ;  1:4      $00 => $ff
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
		ENDIF
6F48:25		DEC H
6F49:C9		RET
		ENDIF
		End of INCLUDE
		ENDIF
		End of INCLUDE
		ENDIF
		ENDIF
		End of INCLUDE
		INCLUDE fadd.asm
		IF (false)
- @FADD:
-                     FADD                ; *
-         LD      A, H                ;  1:4
-         XOR     D                   ;  1:4
-         JP      m, FSUBP_FADD_OP_SGN;  3:10
-         LD      A, L                ;  1:4
-         XOR     E                   ;  1:4
-         JP      m, FSUBP_FADD_OP_SGN;  3:10
-         .ERROR Unexpected value in SIGN_BIT!
-         .ERROR  You must exclude the file "faddp.asm" or include "fadd.asm" first
-         include "faddp.asm"
- @FADDP:
-                    FADDP                ; *
-         LD      A, H                ;  1:4
-         SUB     D                   ;  1:4
-         JR      z, FADDP_EQ_EXP     ;  2:7/12
-         JR      nc, FADDP_HL_GR     ;  2:7/12   
-         EX      DE, HL              ;  1:4      
-         NEG                         ;  2:8
- FADDP_HL_GR:
-         CP      2 + MANT_BITS       ;  2:7      pri posunu o NEUKLADANY_BIT+BITS_MANTIS uz mantisy nemaji prekryt, ale jeste se muze zaokrouhlovat 
-         RET     nc                  ;  1:5/11   HL + DE = HL
-         SET     7, E                ;  2:8
-         DEC     E                   ;  1:4
-         DEC     A                   ;  1:4
-         JR      z, FADDP_STOP       ;  2:12/7
-         LD      B, A                ;  1:4
- FADDP_LOOP:
-         SRL     E                   ;  2:8
-         DJNZ    FADDP_LOOP          ;  2:13/8
- FADDP_STOP:
-         LD      A, L                ;  1:4
-         ADD     A, A                ;  1:4      A = 01 mmmm mmm0, kvuli zaokrouhleni potrebujeme znat hodnotu prvniho bitu za desetinou carkou 
-         ADD     A, E                ;  1:4      soucet mantis
-         JR      nc, FADDP_SAME_EXP  ;  2:12/7
-         ADD     A, $02              ;  2:7      rounding
-         RRA                         ;  1:4      A = 01 cmmm mmmr
- FADDP_EXP_PLUS:
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         INC     H                   ;  1:4      exp++
-         RET     nz                  ;  1:11/5
-         JR      FADDP_OVERFLOW      ;  2:12
- FADDP_SAME_EXP:                     ;           A = 01 mmmm mmmr, r = rounding bit
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         RET     nc                  ;  1:11/5   50%
-         INC     L                   ;  1:4      rounding
-         XOR     L                   ;  1:4      clear carry
-         RET     p                   ;  1.11/5   49% same sign
-         LD      A, L                ;  1:4      
-         XOR     SIGN_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         INC     H                   ;  1:4      exp++
-         RET     nz                  ;  1:11/5
-         JR      FADDP_OVERFLOW      ;  2:12        
-         INC     A                   ;  1:4      rounding
-         JR      z, FADDP_EXP_PLUS   ;  2:12/7   A = 10 0000 0000 && carry = 0
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         RET                         ;  1:10
- FADDP_EQ_EXP:                       ;           HL exp = DE exp
-         LD      A, L                ;  1:4        1mmm mmmm    0mmm mmmm
-         ADD     A, E                ;  1:4       +1mmm mmmm    0mmm mmmm
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         INC     H                   ;  1:4      exp++
-         RET     nz                  ;  1:11/5
- FADDP_OVERFLOW:
-         DEC     H                   ;  1:4      $00 => $FF
-         OR      SIGN_XOR            ;  2:7
-         LD      L, A                ;  1:4
-         CALL    OVER_COL_WARNING    ;  3:17
-         SCF                         ;  1:4      carry = error
-         RET                         ;  1:10
-     include "color_flow_warning.asm"
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- 
- 
-     include "fsubp.asm"
- include "color_flow_warning.asm"
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- 
- @FSUBP:
-                    FSUBP                ; *
-         LD      A, E                ;  1:4
-         XOR     SIGN_MASK           ;  2:7
-         LD      E, A                ;  1:4
- FSUBP_FADD_OP_SGN:
-         LD      A, H                ;  1:4
-         SUB     D                   ;  1:4
-         JR      z, FSUBP_EQ_EXP     ;  2:12/7
-         JR      nc, FSUBP_HL_GR     ;  2:12/7
-         EX      DE, HL              ;  1:4
-         NEG                         ;  2:8
- FSUBP_HL_GR:
-         CP      2 + MANT_BITS       ;  2:7      pri posunu vetsim nez o MANT_BITS + NEUKLADANY_BIT + ZAOKROUHLOVACI_BIT uz mantisy nemaji prekryt
-         JR      nc, FSUBP_TOOBIG    ;  2:12/7   HL - DE = HL
-         LD      B, A                ;  1:4
-         LD      A, E                ;  1:4
-         OR      SIGN_MASK           ;  2:7
-         DEC     B                   ;  1:4
-         JR      z, FSUBP_NOLOOP     ;  2:12/7
- FSUBP_LOOP:
-         OR      A                   ;  1:4
-         RRA                         ;  1:4
-         DJNZ    FSUBP_LOOP          ;  2:13/8
-         RL      B                   ;  2:8      B = rounding 0.25
- FSUBP_NOLOOP:                       ;
-         LD      E, A                ;  1:4
-         LD      A, L                ;  1:4
-         ADD     A, A                ;  1:4
-         SUB     E                   ;  1:4
-         JR      nc, FSUBP_SAME_EXP  ;  2:12/7
-         LD      D, H                ;  1:4      save exp
- FSUBP_NORM:                         ;           normalizace cisla
-         DEC     H                   ;  1:4      exp--
-         ADD     A, A                ;  1:4
-         JR      nc, FSUBP_NORM      ;  2:7/12
-         SUB     B                   ;  1:4
-         RL      L                   ;  2:8      sign out  
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         LD      A, D                ;  1:4
-         SUB     H                   ;  1:4
-         RET     nc                  ;  1:11/5   RET with reset carry
-         JR      FSUBP_UNDERFLOW     ;  2:12
- FSUBP_SAME_EXP:                     ;  2:8      reset carry
-         RL      L                   ;  2:8      sign out  
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         ADC     A, A                ;  1:4      
-         OR      A                   ;  1:4
-         RET     nz                  ;  1:11/5
-         DEC     B                   ;  1:4
-         RET     nz                  ;  1:11/5
-         LD      A, L                ;  1:4
-         OR      MANT_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         LD      A, H                ;  1:4
-         DEC     H                   ;  1:4
-         SUB     H                   ;  1:4
-         RET     nc                  ;  1:11/5   RET with reset carry
-         JR      FSUBP_UNDERFLOW     ;  2:12
- FSUBP_EQ_EXP:
-         LD      A, L                ;  1:4
-         SUB     E                   ;  1:4
-         ADD     A, A                ;  1:4      delete sign
-         JR      z, FSUBP_UNDERFLOW  ;  2:12/7   (HL_exp = DE_exp && HL_mant = DE_mant) => HL = -DE
-         JR      c, FSUBP_EQ_LOOP    ;  2:12/7
-         EX      DE, HL              ;  1:4
-         NEG                         ;  2:8
- FSUBP_EQ_LOOP:                      ;           normalizace cisla
-         DEC     H                   ;  1:4      exp--
-         ADD     A, A                ;  1:4      musime posouvat minimalne jednou, protoze NEUKLADANY_BIT byl vynulovan
-         JR      nc, FSUBP_EQ_LOOP   ;  2:7/12
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         LD      A, D                ;  1:4      old exp
-         SUB     H                   ;  1:4      -new exp
-         RET     nc                  ;  1:11/5
- FSUBP_UNDERFLOW:
-         LD      H, $00              ;  2:7      sign only
-         LD      A, L                ;  1:4
-         AND     SIGN_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         CALL    UNDER_COL_WARNING   ;  3:17
-         SCF                         ;  1:4      carry = error
-         RET                         ;  1:10
- FSUBP_TOOBIG:
-         RET     nz                  ;  1:11/5   HL_exp - DE_exp > 7+1+1 => HL - DE = HL
-         LD      A, L                ;  1:4
-         AND     MANT_MASK           ;  2:7
-         RET     nz                  ;  1:11/5   HL_mant > 1.0           => HL - DE = HL
-         LD      A, L                ;  1:4
-         OR      MANT_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         ADD     A, A                ;  1:4      sign out
-         RET     nz                  ;  1:11/5   HL_mant > 1.0           => HL - DE = HL
-         DEC     A                   ;  1:4      $00 => $ff
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         DEC     H                   ;  1:4      HL_exp = 7 + 1 + DE_exp  => HL_exp >= 8 => not underflow
-         RET                         ;  1:10
- 
		ENDIF
		End of INCLUDE
		INCLUDE fmod.asm
		IF (true)
6F4A:		label @FMOD
		IF (true)
6F4A:		label FMOD
		ENDIF
		INCLUDE mcmpa.asm
		IF (true)
Defining MACRO MCMPA
Params: reg1_hi, reg1_lo, reg2_hi, reg2_lo
		ENDIF
		End of INCLUDE
Expanding MACRO MCMPA
reg1_hi= H 
reg1_lo= L 
reg2_hi= B 
reg2_lo= C 
IF SIGN_BIT > 0007 
		IF (false)
-         LD      A, reg1_hi          ;  1:4
-         XOR     reg2_hi             ;  1:4
-         AND     SIGN_MASK           ;  2:7
-         XOR     reg1_hi             ;  1:4      A = 2111 1111
-         SUB     reg2_hi             ;  1:4
-         JP      nz, $+5             ;  3:10    
-         JR      nz, $+4             ;  2:12/7
-         LD      A, reg1_lo          ;  1:4
		ELSE (true)
LD A , reg1_hi 
6F4A:7C		LD A, H
SUB reg2_hi 
6F4B:90		SUB B
IF 0000 
		IF (false)
-         JP      nz, $+9             ;  3:10
		ELSE (true)
JR NZ , $ + 0008 
6F4C:2006	JR NZ, 6F54
ENDIF 
		ENDIF
LD A , reg1_lo 
6F4E:7D		LD A, L
XOR reg2_lo 
6F4F:A9		XOR C
AND SIGN_MASK 
6F50:E680	AND 80
XOR reg1_lo 
6F52:AD		XOR L
ENDIF 
		ENDIF
SUB reg2_lo 
6F53:91		SUB C
ENDM 
		ENDM
End of MACRO MCMPA
6F54:DA606F	JP C, 6F60
6F57:60		LD H, B
6F58:69		LD L, C
6F59:C0		RET NZ
6F5A:67		LD H, A
6F5B:79		LD A, C
6F5C:E680	AND 80
6F5E:6F		LD L, A
6F5F:C9		RET
6F60:		label FMOD_BC_GR
6F60:54		LD D, H
6F61:60		LD H, B
6F62:7D		LD A, L
6F63:F680	OR 80
6F65:5F		LD E, A
6F66:79		LD A, C
6F67:E680	AND 80
6F69:6F		LD L, A
6F6A:79		LD A, C
6F6B:87		ADD A, A
6F6C:4F		LD C, A
6F6D:7A		LD A, D
6F6E:94		SUB H
6F6F:79		LD A, C
6F70:2819	JR Z, 6F8B
6F72:		label FMOD_SUB
6F72:93		SUB E
6F73:30FD	JR NC, 6F72
6F75:		label FMOD_NORM
6F75:24		INC H
6F76:		label FMOD_NORM_LOOP
6F76:25		DEC H
		IF (false)
-         RET     z                   ;           
		ELSE (true)
6F77:281C	JR Z, 6F95
		ENDIF
6F79:87		ADD A, A
6F7A:30FA	JR NC, 6F76
6F7C:25		DEC H
6F7D:4F		LD C, A
6F7E:7A		LD A, D
6F7F:BC		CP H
6F80:79		LD A, C
6F81:38EF	JR C, 6F72
6F83:2806	JR Z, 6F8B
6F85:		label FMOD_EXIT
6F85:CB15	RL L
6F87:1F		RRA
		IF (true)
6F88:B7		OR A
		ENDIF
6F89:6F		LD L, A
6F8A:C9		RET
6F8B:		label FMOD_SAME_EXP
6F8B:CB23	SLA E
6F8D:BB		CP E
6F8E:38F5	JR C, 6F85
6F90:93		SUB E
6F91:20E2	JR NZ, 6F75
6F93:67		LD H, A
6F94:C9		RET
6F95:		label FMOD_UNDERFLOW
		IF (false)
-         CALL    UNDER_COL_WARNING   ;  3:17
		ENDIF
		IF (true)
6F95:37		SCF
		ENDIF
6F96:C9		RET
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
		ENDIF
		End of INCLUDE
		INCLUDE fpow2.asm
		IF (true)
6F97:		label @FPOW2
		IF (true)
6F97:		label FPOW2
		ENDIF
6F97:CBBD	RES 7, L
6F99:3E34	LD A, 34
6F9B:BD		CP L
6F9C:7C		LD A, H
6F9D:8F		ADC A, A
6F9E:2666	LD H, 66
6FA0:6E		LD L, (HL)
6FA1:3808	JR C, 6FAB
6FA3:D67F	SUB 7F
6FA5:67		LD H, A
6FA6:D0		RET NC
6FA7:		label FPOW2_UNDERFLOW
6FA7:210000	LD HL, 0000
		IF (false)
-         CALL    UNDER_COL_WARNING   ;  3:17
		ENDIF
6FAA:C9		RET
6FAB:		label FPOW2_HI
6FAB:D67F	SUB 7F
6FAD:67		LD H, A
		IF (true)
6FAE:3F		CCF
6FAF:D0		RET NC
		ELSE (false)
-         RET     c                   ;  1:11/5
		ENDIF
6FB0:		label FPOW2_OVERFLOW
6FB0:217FFF	LD HL, FF7F
		IF (false)
-         CALL    OVER_COL_WARNING    ;  3:17
		ENDIF
		IF (true)
6FB3:37		SCF
		ENDIF
6FB4:C9		RET
		IF (true)
6FB5:		label FPOW2_USE_FMUL
6FB5:C5		PUSH BC
6FB6:D5		PUSH DE
6FB7:44		LD B, H
6FB8:4D		LD C, L
6FB9:EB		EX DE, HL
6FBA:CD3A6E	CALL 6E3A
6FBD:D1		POP DE
6FBE:C1		POP BC
6FBF:C9		RET
		ENDIF
		ENDIF
		End of INCLUDE
		INCLUDE fsqrt.asm
		IF (true)
6FC0:		label @FSQRT
		IF (true)
6FC0:		label FSQRT
		ENDIF
6FC0:CB25	SLA L
6FC2:7C		LD A, H
6FC3:C67F	ADD A, 7F
6FC5:1F		RRA
6FC6:CB1D	RR L
6FC8:2665	LD H, 65
6FCA:6E		LD L, (HL)
6FCB:67		LD H, A
6FCC:C9		RET
		ENDIF
		End of INCLUDE
		INCLUDE frac.asm
		IF (true)
6FCD:		label @FRAC
		IF (true)
6FCD:		label FRAC
		ENDIF
6FCD:7C		LD A, H
6FCE:FE86	CP 86
		IF (false)
-         JR      nc, FINT_ZERO       ;           Already integer
		ELSE (true)
6FD0:3018	JR NC, 6FEA
		ENDIF
6FD2:D67F	SUB 7F
6FD4:D8		RET C
6FD5:3C		INC A
6FD6:47		LD B, A
6FD7:7D		LD A, L
6FD8:87		ADD A, A
6FD9:		label FRAC_LOOP
6FD9:25		DEC H
6FDA:87		ADD A, A
6FDB:10FC	DJNZ 6FD9
6FDD:3806	JR C, 6FE5
		IF (false)
-         JR      z, FINT_ZERO        ;
		ELSE (true)
6FDF:2809	JR Z, 6FEA
		ENDIF
6FE1:		label FRAC_LOOP2
6FE1:25		DEC H
6FE2:87		ADD A, A
6FE3:30FC	JR NC, 6FE1
6FE5:		label FRAC_SIGN
6FE5:CB15	RL L
6FE7:1F		RRA
6FE8:6F		LD L, A
6FE9:C9		RET
		IF (true)
6FEA:		label FRAC_ZERO
6FEA:210000	LD HL, 0000
6FED:C9		RET
		ENDIF
		ENDIF
		End of INCLUDE
		INCLUDE fint.asm
		IF (true)
6FEE:		label @FINT
		IF (true)
6FEE:		label FINT
		ENDIF
6FEE:7C		LD A, H
6FEF:D67F	SUB 7F
		IF (true)
6FF1:38F7	JR C, 6FEA
		ELSE (false)
-         JR      c, FINT_ZERO        ;  2:12/7   Completely fractional
		ENDIF
6FF3:D607	SUB 07
6FF5:D0		RET NC
6FF6:ED44	NEG
6FF8:47		LD B, A
6FF9:3EFF	LD A, FF
6FFB:		label FINT_LOOP
6FFB:87		ADD A, A
6FFC:10FD	DJNZ 6FFB
6FFE:A5		AND L
6FFF:6F		LD L, A
7000:C9		RET
		IF (false)
- FINT_ZERO:
-         LD      HL, FPMIN           ; -0???
-         RET
		ENDIF
		ENDIF
		End of INCLUDE
		INCLUDE fwld.asm
		IF (true)
7001:		label @FWLD
		IF (true)
7001:		label FWLD
		ENDIF
7001:7C		LD A, H
7002:B7		OR A
7003:2816	JR Z, 701B
7005:3E8F	LD A, 8F
7007:		label FWLD_NORM
7007:29		ADD HL, HL
7008:3D		DEC A
7009:D20770	JP NC, 7007
700C:CB3C	SRL H
700E:3F		CCF
700F:CB1D	RR L
7011:6C		LD L, H
7012:67		LD H, A
7013:F8		RET M
7014:C8		RET Z
7015:2C		INC L
7016:F0		RET P
7017:24		INC H
7018:2E00	LD L, 00
701A:C9		RET
701B:		label FWLD_BYTE
701B:B5		OR L
701C:C8		RET Z
701D:2687	LD H, 87
701F:		label FWLD_BYTE_NORM
701F:25		DEC H
7020:87		ADD A, A
7021:30FC	JR NC, 701F
7023:0F		RRCA
7024:6F		LD L, A
7025:C9		RET
		ENDIF
		End of INCLUDE
		INCLUDE fwst.asm
		IF (true)
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
7026:		label @FWST
		IF (true)
7026:		label FWST
		ENDIF
7026:CBFD	SET 7, L
7028:7C		LD A, H
7029:FE8F	CP 8F
702B:301E	JR NC, 704B
702D:D67E	SUB 7E
702F:381F	JR C, 7050
		IF (false)
-         LD      B, A                ;  1:4
-         LD      A, L                ;  1:4
-         LD      HL, $0000           ;  3:10
-         JR      z, FWST_ROUNDING    ;  2:7/12
-         ADD     A, A                ;  1:4
-         ADC     HL, HL              ;  2:15
-         DJNZ    $-3                 ;  2:13/8
- FWST_ROUNDING:        
-         ADD     A, A                ;  1:4
-         RET     nc                  ;  1:11/5
-         OR      A                   ;  1:4          reset carry
-         RET     z                   ;  1:11/5
-         INC     HL                  ;  1:6
-         RET                         ;  1:10
		ELSE (true)
7031:2600	LD H, 00
7033:47		LD B, A
7034:2807	JR Z, 703D
7036:D608	SUB 08
7038:300B	JR NC, 7045
703A:29		ADD HL, HL
703B:10FD	DJNZ 703A
703D:		label FWST_ROUNDING
703D:7D		LD A, L
703E:C67F	ADD A, 7F
7040:7C		LD A, H
7041:60		LD H, B
		IF (true)
7042:88		ADC A, B
7043:6F		LD L, A
		ELSE (false)
-         RET     nc                  ;  1:5/11
-         INC     L                   ;  1:4
		ENDIF
7044:C9		RET
7045:		label FWST_256PLUS
7045:C8		RET Z
7046:47		LD B, A
7047:29		ADD HL, HL
7048:10FD	DJNZ 7047
704A:C9		RET
		ENDIF
704B:		label FWST_OVERFLOW
		IF (false)
-         CALL    OVER_COL_WARNING    ;  3:17
		ENDIF
704B:21FFFF	LD HL, FFFF
		IF (true)
704E:37		SCF
		ENDIF
704F:C9		RET
7050:		label FWST_ZERO
		IF (true)
7050:AF		XOR A
7051:67		LD H, A
7052:6F		LD L, A
		ELSE (false)
-         LD      HL, $0000           ;  3:10    
		ENDIF
7053:C9		RET
		ENDIF
		End of INCLUDE
		INCLUDE fbld.asm
		IF (true)
7054:		label @FBLD
		IF (true)
7054:		label FBLD
		ENDIF
		IF (true)
FBLD_D		EQU 0086
7054:1686	LD D, 86
7056:		label FBLD_X
7056:87		ADD A, A
7057:3806	JR C, 705F
		ELSE (false)
-         FBLD_D  EQU     BIAS+8
-         LD      D, FBLD_D           ;  2:7
- FBLD_X:
-         OR      A, A                ;  1:4
		ENDIF
7059:2807	JR Z, 7062
705B:		label FBLD_LOOP
705B:15		DEC D
705C:87		ADD A, A
705D:30FC	JR NC, 705B
705F:		label FBLD_ALIGNED
705F:0F		RRCA
7060:5F		LD E, A
7061:C9		RET
7062:		label FBLD_OUT_ZERO
7062:57		LD D, A
7063:5F		LD E, A
7064:C9		RET
		ENDIF
		End of INCLUDE
		INCLUDE fln.asm
		IF (true)
		INCLUDE fadd.asm
		IF (false)
- @FADD:
-                     FADD                ; *
-         LD      A, H                ;  1:4
-         XOR     D                   ;  1:4
-         JP      m, FSUBP_FADD_OP_SGN;  3:10
-         LD      A, L                ;  1:4
-         XOR     E                   ;  1:4
-         JP      m, FSUBP_FADD_OP_SGN;  3:10
-         .ERROR Unexpected value in SIGN_BIT!
-         .ERROR  You must exclude the file "faddp.asm" or include "fadd.asm" first
-         include "faddp.asm"
- @FADDP:
-                    FADDP                ; *
-         LD      A, H                ;  1:4
-         SUB     D                   ;  1:4
-         JR      z, FADDP_EQ_EXP     ;  2:7/12
-         JR      nc, FADDP_HL_GR     ;  2:7/12   
-         EX      DE, HL              ;  1:4      
-         NEG                         ;  2:8
- FADDP_HL_GR:
-         CP      2 + MANT_BITS       ;  2:7      pri posunu o NEUKLADANY_BIT+BITS_MANTIS uz mantisy nemaji prekryt, ale jeste se muze zaokrouhlovat 
-         RET     nc                  ;  1:5/11   HL + DE = HL
-         SET     7, E                ;  2:8
-         DEC     E                   ;  1:4
-         DEC     A                   ;  1:4
-         JR      z, FADDP_STOP       ;  2:12/7
-         LD      B, A                ;  1:4
- FADDP_LOOP:
-         SRL     E                   ;  2:8
-         DJNZ    FADDP_LOOP          ;  2:13/8
- FADDP_STOP:
-         LD      A, L                ;  1:4
-         ADD     A, A                ;  1:4      A = 01 mmmm mmm0, kvuli zaokrouhleni potrebujeme znat hodnotu prvniho bitu za desetinou carkou 
-         ADD     A, E                ;  1:4      soucet mantis
-         JR      nc, FADDP_SAME_EXP  ;  2:12/7
-         ADD     A, $02              ;  2:7      rounding
-         RRA                         ;  1:4      A = 01 cmmm mmmr
- FADDP_EXP_PLUS:
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         INC     H                   ;  1:4      exp++
-         RET     nz                  ;  1:11/5
-         JR      FADDP_OVERFLOW      ;  2:12
- FADDP_SAME_EXP:                     ;           A = 01 mmmm mmmr, r = rounding bit
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         RET     nc                  ;  1:11/5   50%
-         INC     L                   ;  1:4      rounding
-         XOR     L                   ;  1:4      clear carry
-         RET     p                   ;  1.11/5   49% same sign
-         LD      A, L                ;  1:4      
-         XOR     SIGN_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         INC     H                   ;  1:4      exp++
-         RET     nz                  ;  1:11/5
-         JR      FADDP_OVERFLOW      ;  2:12        
-         INC     A                   ;  1:4      rounding
-         JR      z, FADDP_EXP_PLUS   ;  2:12/7   A = 10 0000 0000 && carry = 0
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         RET                         ;  1:10
- FADDP_EQ_EXP:                       ;           HL exp = DE exp
-         LD      A, L                ;  1:4        1mmm mmmm    0mmm mmmm
-         ADD     A, E                ;  1:4       +1mmm mmmm    0mmm mmmm
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         INC     H                   ;  1:4      exp++
-         RET     nz                  ;  1:11/5
- FADDP_OVERFLOW:
-         DEC     H                   ;  1:4      $00 => $FF
-         OR      SIGN_XOR            ;  2:7
-         LD      L, A                ;  1:4
-         CALL    OVER_COL_WARNING    ;  3:17
-         SCF                         ;  1:4      carry = error
-         RET                         ;  1:10
-     include "color_flow_warning.asm"
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- 
- 
-     include "fsubp.asm"
- include "color_flow_warning.asm"
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- 
- @FSUBP:
-                    FSUBP                ; *
-         LD      A, E                ;  1:4
-         XOR     SIGN_MASK           ;  2:7
-         LD      E, A                ;  1:4
- FSUBP_FADD_OP_SGN:
-         LD      A, H                ;  1:4
-         SUB     D                   ;  1:4
-         JR      z, FSUBP_EQ_EXP     ;  2:12/7
-         JR      nc, FSUBP_HL_GR     ;  2:12/7
-         EX      DE, HL              ;  1:4
-         NEG                         ;  2:8
- FSUBP_HL_GR:
-         CP      2 + MANT_BITS       ;  2:7      pri posunu vetsim nez o MANT_BITS + NEUKLADANY_BIT + ZAOKROUHLOVACI_BIT uz mantisy nemaji prekryt
-         JR      nc, FSUBP_TOOBIG    ;  2:12/7   HL - DE = HL
-         LD      B, A                ;  1:4
-         LD      A, E                ;  1:4
-         OR      SIGN_MASK           ;  2:7
-         DEC     B                   ;  1:4
-         JR      z, FSUBP_NOLOOP     ;  2:12/7
- FSUBP_LOOP:
-         OR      A                   ;  1:4
-         RRA                         ;  1:4
-         DJNZ    FSUBP_LOOP          ;  2:13/8
-         RL      B                   ;  2:8      B = rounding 0.25
- FSUBP_NOLOOP:                       ;
-         LD      E, A                ;  1:4
-         LD      A, L                ;  1:4
-         ADD     A, A                ;  1:4
-         SUB     E                   ;  1:4
-         JR      nc, FSUBP_SAME_EXP  ;  2:12/7
-         LD      D, H                ;  1:4      save exp
- FSUBP_NORM:                         ;           normalizace cisla
-         DEC     H                   ;  1:4      exp--
-         ADD     A, A                ;  1:4
-         JR      nc, FSUBP_NORM      ;  2:7/12
-         SUB     B                   ;  1:4
-         RL      L                   ;  2:8      sign out  
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         LD      A, D                ;  1:4
-         SUB     H                   ;  1:4
-         RET     nc                  ;  1:11/5   RET with reset carry
-         JR      FSUBP_UNDERFLOW     ;  2:12
- FSUBP_SAME_EXP:                     ;  2:8      reset carry
-         RL      L                   ;  2:8      sign out  
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         ADC     A, A                ;  1:4      
-         OR      A                   ;  1:4
-         RET     nz                  ;  1:11/5
-         DEC     B                   ;  1:4
-         RET     nz                  ;  1:11/5
-         LD      A, L                ;  1:4
-         OR      MANT_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         LD      A, H                ;  1:4
-         DEC     H                   ;  1:4
-         SUB     H                   ;  1:4
-         RET     nc                  ;  1:11/5   RET with reset carry
-         JR      FSUBP_UNDERFLOW     ;  2:12
- FSUBP_EQ_EXP:
-         LD      A, L                ;  1:4
-         SUB     E                   ;  1:4
-         ADD     A, A                ;  1:4      delete sign
-         JR      z, FSUBP_UNDERFLOW  ;  2:12/7   (HL_exp = DE_exp && HL_mant = DE_mant) => HL = -DE
-         JR      c, FSUBP_EQ_LOOP    ;  2:12/7
-         EX      DE, HL              ;  1:4
-         NEG                         ;  2:8
- FSUBP_EQ_LOOP:                      ;           normalizace cisla
-         DEC     H                   ;  1:4      exp--
-         ADD     A, A                ;  1:4      musime posouvat minimalne jednou, protoze NEUKLADANY_BIT byl vynulovan
-         JR      nc, FSUBP_EQ_LOOP   ;  2:7/12
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         LD      A, D                ;  1:4      old exp
-         SUB     H                   ;  1:4      -new exp
-         RET     nc                  ;  1:11/5
- FSUBP_UNDERFLOW:
-         LD      H, $00              ;  2:7      sign only
-         LD      A, L                ;  1:4
-         AND     SIGN_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         CALL    UNDER_COL_WARNING   ;  3:17
-         SCF                         ;  1:4      carry = error
-         RET                         ;  1:10
- FSUBP_TOOBIG:
-         RET     nz                  ;  1:11/5   HL_exp - DE_exp > 7+1+1 => HL - DE = HL
-         LD      A, L                ;  1:4
-         AND     MANT_MASK           ;  2:7
-         RET     nz                  ;  1:11/5   HL_mant > 1.0           => HL - DE = HL
-         LD      A, L                ;  1:4
-         OR      MANT_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         ADD     A, A                ;  1:4      sign out
-         RET     nz                  ;  1:11/5   HL_mant > 1.0           => HL - DE = HL
-         DEC     A                   ;  1:4      $00 => $ff
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         DEC     H                   ;  1:4      HL_exp = 7 + 1 + DE_exp  => HL_exp >= 8 => not underflow
-         RET                         ;  1:10
- 
		ENDIF
		End of INCLUDE
7065:		label @FLN
		IF (true)
7065:		label FLN
		ENDIF
		IF (true)
7065:7C		LD A, H
7066:D67D	SUB 7D
7068:CB1F	RR A
706A:2816	JR Z, 7082
		ENDIF
706C:7D		LD A, L
706D:6C		LD L, H
706E:2669	LD H, 69
7070:56		LD D, (HL)
7071:25		DEC H
7072:5E		LD E, (HL)
7073:87		ADD A, A
7074:2815	JR Z, 708B
7076:25		DEC H
7077:6F		LD L, A
7078:7E		LD A, (HL)
7079:2C		INC L
707A:66		LD H, (HL)
707B:6F		LD L, A
707C:7A		LD A, D
707D:B3		OR E
707E:C2926E	JP NZ, 6E92
7081:C9		RET
		IF (true)
7082:		label FLN_FIX
7082:CE6A	ADC A, 6A
7084:67		LD H, A
7085:CB25	SLA L
7087:5E		LD E, (HL)
7088:2C		INC L
7089:56		LD D, (HL)
		IF (true)
708A:B7		OR A
		ENDIF
		ENDIF
708B:		label FLN_NO_ADD
708B:EB		EX DE, HL
708C:C9		RET
		ENDIF
		End of INCLUDE
		INCLUDE fexp.asm
		IF (true)
		INCLUDE fmul.asm
		IF (false)
- @FMUL:
-                    FMUL                ; *
-         LD      A, C                ;  1:4
-         XOR     E                   ;  1:4
-         OR      $FF - SIGN_MASK     ;  2:7
-         LD      L, A                ;  1:4          s111 1111
-         LD      A, D                ;  1:4
-         ADD     A, B                ;  1:4
-         JR      c, FMUL_C1          ;  2:12/7
-         SUB     BIAS                ;  2:7
-         JR      nc, FMUL_NEXT       ;  2:12/7
-         INC     A                   ;  1:4          $FF => $00?
-         JR      nz, FMULP_UNDERFLOW ;  2:12/7       no chance        
-         INC     D                   ;  1:4
-         CALL    FMUL                ;  3:17         recursion
-         DEC     H                   ;  1:4
-         RET     z                   ;  1:11/5      
- FMULP_UNDERFLOW:
-         LD      H, $00              ;  1:4          HL = 0000 0000 s000 0000
-         CALL    UNDER_COL_WARNING   ;  3:17
-         LD      A, L                ;  1:4          s111 1111
-         AND     SIGN_MASK           ;  2:7          
-         LD      L, A                ;  1:4
-         SCF                         ;  1:4          carry = error
-         RET                         ;  1:10
- FMUL_C1:
-         SUB     BIAS                ;  2:7
-         JR      nc, FMULP_OVERFLOW  ;  2:12/7        
- FMUL_NEXT:
-         LD      H, A                ;  1:4          new exponent
-         PUSH    HL                  ;  1:11
-         RES     7, C                ;  2:8
-         RES     7, E                ;  2:8
-         LD      A, C                ;  1:4
-         ADD     A, E                ;  1:4
-         LD      E, A                ;  1:4          E = A + B
-         LD      D, Tab_ApB_lo/256   ;  2:7          (DE) = Tab_ApB_lo
-         SUB     C                   ;  1:4
-         SUB     C                   ;  1:4
-         LD      L, A                ;  1:4          L = A - B
-         LD      H, Tab_AmB_lo/256   ;  2:7
-         LD      A, (DE)             ;  1:7
-         ADD     A, (HL)             ;  1:7
-         LD      C, A                ;  1:4
-         INC     D                   ;  1:4
-         LD      A, (DE)             ;  1:7
-         INC     H                   ;  1:4
-         ADC     A, (HL)             ;  1:7
-         JP      p, FMULP_SAME_EXP   ;  3:10
-         POP     HL                  ;  1:10
-         INC     H                   ;  1:4          exp++
-         JR      z, FMULP_OVERFLOW   ;  2:7/12
-         AND     L                   ;  1:4
-         LD      L, A                ;  1:4
-         LD      A, C                ;  1:4
-         ADD     A, $40              ;  2:7
-         RET     nc                  ;  1:11/5       RET with reset carry
-         INC     L                   ;  1:4          25%
-         OR      A                   ;  1:4          RET with reset carry
-         RET                         ;  1:10
- FMULP_OVERFLOW:
-         LD      H, $FF              ;  3:10
-         CALL    OVER_COL_WARNING    ;  3:17
-         SCF                         ;  1:4          carry = error
-         RET                         ;  1:10
- FMULP_SAME_EXP:                     ;               (ApB)+(AmB) >= $4000 => pricti: $0 (38.882446%)
-         RL      C                   ;  2:8          
-         ADC     A, A                ;  1:4
-         POP     HL                  ;  1:10         AC = 1mmm mmmm mmmm mmm0
-         AND     L                   ;  1:4          RET with reset carry
-         LD      L, A                ;  1:4
-         RET                         ;  1:10
-     include "color_flow_warning.asm"
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- 
		ENDIF
		End of INCLUDE
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
708D:		label @FEXP
		IF (true)
708D:		label FEXP
		ENDIF
708D:7C		LD A, H
708E:FE77	CP 77
7090:3828	JR C, 70BA
7092:FE86	CP 86
7094:3029	JR NC, 70BF
7096:D670	SUB 70
7098:67		LD H, A
7099:7D		LD A, L
709A:87		ADD A, A
709B:6C		LD L, H
709C:266C	LD H, 6C
709E:3002	JR NC, 70A2
70A0:CBFD	SET 7, L
70A2:5E		LD E, (HL)
70A3:E5		PUSH HL
70A4:24		INC H
70A5:56		LD D, (HL)
70A6:		label FEXP_LOOP
70A6:E1		POP HL
70A7:		label FEXP_ZEROBIT
70A7:2814	JR Z, 70BD
70A9:2D		DEC L
70AA:87		ADD A, A
70AB:30FA	JR NC, 70A7
70AD:4E		LD C, (HL)
70AE:E5		PUSH HL
70AF:24		INC H
70B0:46		LD B, (HL)
70B1:F5		PUSH AF
70B2:CD3A6E	CALL 6E3A
70B5:F1		POP AF
70B6:EB		EX DE, HL
70B7:C3A670	JP 70A6
70BA:		label FEXP_ONE
70BA:11007F	LD DE, 7F00
70BD:		label FEXP_EXIT
70BD:EB		EX DE, HL
70BE:C9		RET
70BF:		label FEXP_FLOW
70BF:7D		LD A, L
70C0:87		ADD A, A
70C1:3805	JR C, 70C8
70C3:		label FEXP_OVER
		IF (false)
-         CALL    OVER_COL_WARNING    ;
		ENDIF
		IF (true)
70C3:37		SCF
		ENDIF
70C4:217FFF	LD HL, FF7F
70C7:C9		RET
70C8:		label FEXP_UNDER
		IF (false)
-         CALL    UNDER_COL_WARNING   ;
		ENDIF
70C8:210000	LD HL, 0000
70CB:C9		RET
		ENDIF
		End of INCLUDE
Emiting raw binary from 6000 to 70CB
