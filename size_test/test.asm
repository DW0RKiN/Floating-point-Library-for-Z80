		INCLUDE finit.asm
		IF (true)
MANT_BITS	EQU 0007
MANT_MASK	EQU 007F
MANT_XOR	EQU 0080
BIT_ALWAYS_ONE	EQU 0007
SIGN_MASK	EQU 0080
SIGN_XOR	EQU 007F
SIGN_BIT	EQU 0007
EXP_BITS	EQU 0008
EXP_PLUS_ONE	EQU 0001
BIAS		EQU 007F
FM256		EQU 8780
FM255		EQU 86FF
FM254		EQU 86FE
FM253		EQU 86FD
FM252		EQU 86FC
FM251		EQU 86FB
FM250		EQU 86FA
FM249		EQU 86F9
FM248		EQU 86F8
FM247		EQU 86F7
FM246		EQU 86F6
FM245		EQU 86F5
FM244		EQU 86F4
FM243		EQU 86F3
FM242		EQU 86F2
FM241		EQU 86F1
FM240		EQU 86F0
FM239		EQU 86EF
FM238		EQU 86EE
FM237		EQU 86ED
FM236		EQU 86EC
FM235		EQU 86EB
FM234		EQU 86EA
FM233		EQU 86E9
FM232		EQU 86E8
FM231		EQU 86E7
FM230		EQU 86E6
FM229		EQU 86E5
FM228		EQU 86E4
FM227		EQU 86E3
FM226		EQU 86E2
FM225		EQU 86E1
FM224		EQU 86E0
FM223		EQU 86DF
FM222		EQU 86DE
FM221		EQU 86DD
FM220		EQU 86DC
FM219		EQU 86DB
FM218		EQU 86DA
FM217		EQU 86D9
FM216		EQU 86D8
FM215		EQU 86D7
FM214		EQU 86D6
FM213		EQU 86D5
FM212		EQU 86D4
FM211		EQU 86D3
FM210		EQU 86D2
FM209		EQU 86D1
FM208		EQU 86D0
FM207		EQU 86CF
FM206		EQU 86CE
FM205		EQU 86CD
FM204		EQU 86CC
FM203		EQU 86CB
FM202		EQU 86CA
FM201		EQU 86C9
FM200		EQU 86C8
FM199		EQU 86C7
FM198		EQU 86C6
FM197		EQU 86C5
FM196		EQU 86C4
FM195		EQU 86C3
FM194		EQU 86C2
FM193		EQU 86C1
FM192		EQU 86C0
FM191		EQU 86BF
FM190		EQU 86BE
FM189		EQU 86BD
FM188		EQU 86BC
FM187		EQU 86BB
FM186		EQU 86BA
FM185		EQU 86B9
FM184		EQU 86B8
FM183		EQU 86B7
FM182		EQU 86B6
FM181		EQU 86B5
FM180		EQU 86B4
FM179		EQU 86B3
FM178		EQU 86B2
FM177		EQU 86B1
FM176		EQU 86B0
FM175		EQU 86AF
FM174		EQU 86AE
FM173		EQU 86AD
FM172		EQU 86AC
FM171		EQU 86AB
FM170		EQU 86AA
FM169		EQU 86A9
FM168		EQU 86A8
FM167		EQU 86A7
FM166		EQU 86A6
FM165		EQU 86A5
FM164		EQU 86A4
FM163		EQU 86A3
FM162		EQU 86A2
FM161		EQU 86A1
FM160		EQU 86A0
FM159		EQU 869F
FM158		EQU 869E
FM157		EQU 869D
FM156		EQU 869C
FM155		EQU 869B
FM154		EQU 869A
FM153		EQU 8699
FM152		EQU 8698
FM151		EQU 8697
FM150		EQU 8696
FM149		EQU 8695
FM148		EQU 8694
FM147		EQU 8693
FM146		EQU 8692
FM145		EQU 8691
FM144		EQU 8690
FM143		EQU 868F
FM142		EQU 868E
FM141		EQU 868D
FM140		EQU 868C
FM139		EQU 868B
FM138		EQU 868A
FM137		EQU 8689
FM136		EQU 8688
FM135		EQU 8687
FM134		EQU 8686
FM133		EQU 8685
FM132		EQU 8684
FM131		EQU 8683
FM130		EQU 8682
FM129		EQU 8681
FM128		EQU 8680
FM127		EQU 85FE
FM126		EQU 85FC
FM125		EQU 85FA
FM124		EQU 85F8
FM123		EQU 85F6
FM122		EQU 85F4
FM121		EQU 85F2
FM120		EQU 85F0
FM119		EQU 85EE
FM118		EQU 85EC
FM117		EQU 85EA
FM116		EQU 85E8
FM115		EQU 85E6
FM114		EQU 85E4
FM113		EQU 85E2
FM112		EQU 85E0
FM111		EQU 85DE
FM110		EQU 85DC
FM109		EQU 85DA
FM108		EQU 85D8
FM107		EQU 85D6
FM106		EQU 85D4
FM105		EQU 85D2
FM104		EQU 85D0
FM103		EQU 85CE
FM102		EQU 85CC
FM101		EQU 85CA
FM100		EQU 85C8
FM99		EQU 85C6
FM98		EQU 85C4
FM97		EQU 85C2
FM96		EQU 85C0
FM95		EQU 85BE
FM94		EQU 85BC
FM93		EQU 85BA
FM92		EQU 85B8
FM91		EQU 85B6
FM90		EQU 85B4
FM89		EQU 85B2
FM88		EQU 85B0
FM87		EQU 85AE
FM86		EQU 85AC
FM85		EQU 85AA
FM84		EQU 85A8
FM83		EQU 85A6
FM82		EQU 85A4
FM81		EQU 85A2
FM80		EQU 85A0
FM79		EQU 859E
FM78		EQU 859C
FM77		EQU 859A
FM76		EQU 8598
FM75		EQU 8596
FM74		EQU 8594
FM73		EQU 8592
FM72		EQU 8590
FM71		EQU 858E
FM70		EQU 858C
FM69		EQU 858A
FM68		EQU 8588
FM67		EQU 8586
FM66		EQU 8584
FM65		EQU 8582
FM64		EQU 8580
FM63		EQU 84FC
FM62		EQU 84F8
FM61		EQU 84F4
FM60		EQU 84F0
FM59		EQU 84EC
FM58		EQU 84E8
FM57		EQU 84E4
FM56		EQU 84E0
FM55		EQU 84DC
FM54		EQU 84D8
FM53		EQU 84D4
FM52		EQU 84D0
FM51		EQU 84CC
FM50		EQU 84C8
FM49		EQU 84C4
FM48		EQU 84C0
FM47		EQU 84BC
FM46		EQU 84B8
FM45		EQU 84B4
FM44		EQU 84B0
FM43		EQU 84AC
FM42		EQU 84A8
FM41		EQU 84A4
FM40		EQU 84A0
FM39		EQU 849C
FM38		EQU 8498
FM37		EQU 8494
FM36		EQU 8490
FM35		EQU 848C
FM34		EQU 8488
FM33		EQU 8484
FM32		EQU 8480
FM31		EQU 83F8
FM30		EQU 83F0
FM29		EQU 83E8
FM28		EQU 83E0
FM27		EQU 83D8
FM26		EQU 83D0
FM25		EQU 83C8
FM24		EQU 83C0
FM23		EQU 83B8
FM22		EQU 83B0
FM21		EQU 83A8
FM20		EQU 83A0
FM19		EQU 8398
FM18		EQU 8390
FM17		EQU 8388
FM16		EQU 8380
FM15		EQU 82F0
FM14		EQU 82E0
FM13		EQU 82D0
FM12		EQU 82C0
FM11		EQU 82B0
FM10		EQU 82A0
FM9		EQU 8290
FM8		EQU 8280
FM7		EQU 81E0
FM6		EQU 81C0
FM5		EQU 81A0
FM4		EQU 8180
FM3		EQU 80C0
FM2		EQU 8080
FM1		EQU 7F80
FM0_9		EQU 7EE6
FM0_8		EQU 7ECD
FM0_7		EQU 7EB3
FM0_6		EQU 7E9A
FM0_5		EQU 7E80
FM0_4		EQU 7DCD
FM0_3		EQU 7D9A
FM0_2		EQU 7CCD
FM0_1		EQU 7BCD
FP0_1		EQU 7B4D
FP0_2		EQU 7C4D
FP0_3		EQU 7D1A
FP0_4		EQU 7D4D
FP0_5		EQU 7E00
FP0_6		EQU 7E1A
FP0_7		EQU 7E33
FP0_8		EQU 7E4D
FP0_9		EQU 7E66
FP1		EQU 7F00
FP2		EQU 8000
FP3		EQU 8040
FP4		EQU 8100
FP5		EQU 8120
FP6		EQU 8140
FP7		EQU 8160
FP8		EQU 8200
FP9		EQU 8210
FP10		EQU 8220
FP11		EQU 8230
FP12		EQU 8240
FP13		EQU 8250
FP14		EQU 8260
FP15		EQU 8270
FP16		EQU 8300
FP17		EQU 8308
FP18		EQU 8310
FP19		EQU 8318
FP20		EQU 8320
FP21		EQU 8328
FP22		EQU 8330
FP23		EQU 8338
FP24		EQU 8340
FP25		EQU 8348
FP26		EQU 8350
FP27		EQU 8358
FP28		EQU 8360
FP29		EQU 8368
FP30		EQU 8370
FP31		EQU 8378
FP32		EQU 8400
FP33		EQU 8404
FP34		EQU 8408
FP35		EQU 840C
FP36		EQU 8410
FP37		EQU 8414
FP38		EQU 8418
FP39		EQU 841C
FP40		EQU 8420
FP41		EQU 8424
FP42		EQU 8428
FP43		EQU 842C
FP44		EQU 8430
FP45		EQU 8434
FP46		EQU 8438
FP47		EQU 843C
FP48		EQU 8440
FP49		EQU 8444
FP50		EQU 8448
FP51		EQU 844C
FP52		EQU 8450
FP53		EQU 8454
FP54		EQU 8458
FP55		EQU 845C
FP56		EQU 8460
FP57		EQU 8464
FP58		EQU 8468
FP59		EQU 846C
FP60		EQU 8470
FP61		EQU 8474
FP62		EQU 8478
FP63		EQU 847C
FP64		EQU 8500
FP65		EQU 8502
FP66		EQU 8504
FP67		EQU 8506
FP68		EQU 8508
FP69		EQU 850A
FP70		EQU 850C
FP71		EQU 850E
FP72		EQU 8510
FP73		EQU 8512
FP74		EQU 8514
FP75		EQU 8516
FP76		EQU 8518
FP77		EQU 851A
FP78		EQU 851C
FP79		EQU 851E
FP80		EQU 8520
FP81		EQU 8522
FP82		EQU 8524
FP83		EQU 8526
FP84		EQU 8528
FP85		EQU 852A
FP86		EQU 852C
FP87		EQU 852E
FP88		EQU 8530
FP89		EQU 8532
FP90		EQU 8534
FP91		EQU 8536
FP92		EQU 8538
FP93		EQU 853A
FP94		EQU 853C
FP95		EQU 853E
FP96		EQU 8540
FP97		EQU 8542
FP98		EQU 8544
FP99		EQU 8546
FP100		EQU 8548
FP101		EQU 854A
FP102		EQU 854C
FP103		EQU 854E
FP104		EQU 8550
FP105		EQU 8552
FP106		EQU 8554
FP107		EQU 8556
FP108		EQU 8558
FP109		EQU 855A
FP110		EQU 855C
FP111		EQU 855E
FP112		EQU 8560
FP113		EQU 8562
FP114		EQU 8564
FP115		EQU 8566
FP116		EQU 8568
FP117		EQU 856A
FP118		EQU 856C
FP119		EQU 856E
FP120		EQU 8570
FP121		EQU 8572
FP122		EQU 8574
FP123		EQU 8576
FP124		EQU 8578
FP125		EQU 857A
FP126		EQU 857C
FP127		EQU 857E
FP128		EQU 8600
FP129		EQU 8601
FP130		EQU 8602
FP131		EQU 8603
FP132		EQU 8604
FP133		EQU 8605
FP134		EQU 8606
FP135		EQU 8607
FP136		EQU 8608
FP137		EQU 8609
FP138		EQU 860A
FP139		EQU 860B
FP140		EQU 860C
FP141		EQU 860D
FP142		EQU 860E
FP143		EQU 860F
FP144		EQU 8610
FP145		EQU 8611
FP146		EQU 8612
FP147		EQU 8613
FP148		EQU 8614
FP149		EQU 8615
FP150		EQU 8616
FP151		EQU 8617
FP152		EQU 8618
FP153		EQU 8619
FP154		EQU 861A
FP155		EQU 861B
FP156		EQU 861C
FP157		EQU 861D
FP158		EQU 861E
FP159		EQU 861F
FP160		EQU 8620
FP161		EQU 8621
FP162		EQU 8622
FP163		EQU 8623
FP164		EQU 8624
FP165		EQU 8625
FP166		EQU 8626
FP167		EQU 8627
FP168		EQU 8628
FP169		EQU 8629
FP170		EQU 862A
FP171		EQU 862B
FP172		EQU 862C
FP173		EQU 862D
FP174		EQU 862E
FP175		EQU 862F
FP176		EQU 8630
FP177		EQU 8631
FP178		EQU 8632
FP179		EQU 8633
FP180		EQU 8634
FP181		EQU 8635
FP182		EQU 8636
FP183		EQU 8637
FP184		EQU 8638
FP185		EQU 8639
FP186		EQU 863A
FP187		EQU 863B
FP188		EQU 863C
FP189		EQU 863D
FP190		EQU 863E
FP191		EQU 863F
FP192		EQU 8640
FP193		EQU 8641
FP194		EQU 8642
FP195		EQU 8643
FP196		EQU 8644
FP197		EQU 8645
FP198		EQU 8646
FP199		EQU 8647
FP200		EQU 8648
FP201		EQU 8649
FP202		EQU 864A
FP203		EQU 864B
FP204		EQU 864C
FP205		EQU 864D
FP206		EQU 864E
FP207		EQU 864F
FP208		EQU 8650
FP209		EQU 8651
FP210		EQU 8652
FP211		EQU 8653
FP212		EQU 8654
FP213		EQU 8655
FP214		EQU 8656
FP215		EQU 8657
FP216		EQU 8658
FP217		EQU 8659
FP218		EQU 865A
FP219		EQU 865B
FP220		EQU 865C
FP221		EQU 865D
FP222		EQU 865E
FP223		EQU 865F
FP224		EQU 8660
FP225		EQU 8661
FP226		EQU 8662
FP227		EQU 8663
FP228		EQU 8664
FP229		EQU 8665
FP230		EQU 8666
FP231		EQU 8667
FP232		EQU 8668
FP233		EQU 8669
FP234		EQU 866A
FP235		EQU 866B
FP236		EQU 866C
FP237		EQU 866D
FP238		EQU 866E
FP239		EQU 866F
FP240		EQU 8670
FP241		EQU 8671
FP242		EQU 8672
FP243		EQU 8673
FP244		EQU 8674
FP245		EQU 8675
FP246		EQU 8676
FP247		EQU 8677
FP248		EQU 8678
FP249		EQU 8679
FP250		EQU 867A
FP251		EQU 867B
FP252		EQU 867C
FP253		EQU 867D
FP254		EQU 867E
FP255		EQU 867F
FP256		EQU 8700
ROOT2F		EQU 7F35
FPMIN		EQU 0000
FMMIN		EQU 0080
FM0		EQU 0080
FP0		EQU 0000
FMMAX		EQU FFFF
FPMAX		EQU FF7F
FM0_01875	EQU 799A
FM0_0375	EQU 7A9A
FM0_0625	EQU 7B80
FM0_075		EQU 7B9A
FM0_15		EQU 7C9A
FM0_25		EQU 7D80
FP0_000156	EQU 7224
FP0_001406	EQU 7538
FP0_0025	EQU 7624
FP0_01		EQU 7824
FP0_0125	EQU 784D
FP0_0225	EQU 7938
FP0_03125	EQU 7A00
FP0_0375	EQU 7A1A
FP0_04		EQU 7A24
FP0_05		EQU 7A4D
FP0_09		EQU 7B38
FP0_125		EQU 7C00
FP0_15		EQU 7C1A
FP0_1875	EQU 7C40
FP0_25		EQU 7D00
FP0_75		EQU 7E40
FP0_36		EQU 7D38
FP1_5		EQU 7F40
FP18_75		EQU 8316
FP300		EQU 8716
		ENDIF
		End of INCLUDE
		INCLUDE size_settings.asm
color_flow_warning EQU 0000
carry_flow_warning EQU 0001
DATA_ADR	EQU 6000
TEXT_ADR	EQU E000
		ORG 6000
		End of INCLUDE
fix_ln		EQU 0001
		INCLUDE fsin.tab
		IF (true)
	DEFS of 0 bytes with value 00
6000:		label SIN_TAB_7C7D
6000:FFFB02FF	DEFB of 16 bytes
6004:04020604
6008:08060A08
600C:0C080E0A
6010:100C120E	DEFB of 16 bytes
6014:14101612
6018:18141A16
601C:1C181E1A
6020:201C221E	DEFB of 16 bytes
6024:24202422
6028:26242826
602C:2A282C2A
6030:2E2C302E	DEFB of 16 bytes
6034:32303432
6038:36343836
603C:3A383C38
6040:3E3A403C	DEFB of 16 bytes
6044:423E4440
6048:46424844
604C:4A464C48
6050:4E4A504C	DEFB of 16 bytes
6054:524E5450
6058:56525854
605C:5A565C58
6060:5E5A605A	DEFB of 16 bytes
6064:625C645E
6068:66606862
606C:6A646C66
6070:6E68706A	DEFB of 16 bytes
6074:726C746E
6078:76707872
607C:7A747C76
6080:7E788078	DEFB of 16 bytes
6084:827A847C
6088:867E8880
608C:8A828C84
6090:8E869088	DEFB of 16 bytes
6094:928A948C
6098:968E9890
609C:9A909C92
60A0:9E94A096	DEFB of 16 bytes
60A4:A298A49A
60A8:A49CA69E
60AC:A8A0AAA2
60B0:ACA4AEA6	DEFB of 16 bytes
60B4:B0A6B2A8
60B8:B4AAB6AC
60BC:B8AEBAB0
60C0:BCB2BEB4	DEFB of 16 bytes
60C4:C0B6C2B8
60C8:C4BAC6BA
60CC:C8BCCABE
60D0:CCC0CEC2	DEFB of 16 bytes
60D4:D0C4D2C6
60D8:D4C8D6CA
60DC:D8CCDACC
60E0:DCCEDED0	DEFB of 16 bytes
60E4:E0D2E2D4
60E8:E4D6E6D8
60EC:E8DAEADC
60F0:ECDCEEDE	DEFB of 16 bytes
60F4:F0E0F0E2
60F8:F2E4F4E6
60FC:F6E8F8EA
6100:		label SIN_TAB_7E7F
6100:EBAFEFB1	DEFB of 16 bytes
6104:F3B5F7B7
6108:F9B9FDBB
610C:00BD02BF
6110:04C106C3	DEFB of 16 bytes
6114:06C508C5
6118:0AC70CC9
611C:0ECB10CD
6120:12CF12D1	DEFB of 16 bytes
6124:14D316D5
6128:18D51AD7
612C:1CD91CDB
6130:1EDB20DD	DEFB of 16 bytes
6134:22DF24E1
6138:26E126E3
613C:28E52AE5
6140:2CE72EE9	DEFB of 16 bytes
6144:2EE930EB
6148:32EB34ED
614C:36ED36EF
6150:38F13AF1	DEFB of 16 bytes
6154:3CF13EF3
6158:3EF340F5
615C:42F544F7
6160:44F746F7	DEFB of 16 bytes
6164:48F94AF9
6168:4CFB4CFB
616C:4EFB50FB
6170:52FD52FD	DEFB of 16 bytes
6174:54FD56FD
6178:58FF58FF
617C:5AFF5CFF
6180:5CFF5EFF	DEFB of 16 bytes
6184:60006200
6188:62006400
618C:66006800
6190:68006A00	DEFB of 16 bytes
6194:6C006C00
6198:6E007000
619C:70007200
61A0:74007600	DEFB of 16 bytes
61A4:76FF78FF
61A8:7AFF7AFF
61AC:7CFF7EFD
61B0:7EFD80FD	DEFB of 16 bytes
61B4:82FD82FB
61B8:84FB86FB
61BC:86FB88F9
61C0:88F98AF9	DEFB of 16 bytes
61C4:8CF78CF7
61C8:8EF590F5
61CC:90F392F3
61D0:94F394F1	DEFB of 16 bytes
61D4:96F196EF
61D8:98EF9AED
61DC:9AEB9CEB
61E0:9CE99EE9	DEFB of 16 bytes
61E4:A0E7A0E5
61E8:A2E5A2E3
61EC:A4E1A4E1
61F0:A6DFA8DD	DEFB of 16 bytes
61F4:A8DDAADB
61F8:AAD9ACD7
61FC:ACD5AED5
		ENDIF
		End of INCLUDE
		INCLUDE fdiv.tab
		IF (true)
	DEFS of 0 bytes with value 00
6200:		label DIVTAB
6200:007E7C7A	DEFB of 16 bytes
6204:78767573
6208:716F6D6C
620C:6A686765
6210:6462605F	DEFB of 16 bytes
6214:5D5C5A59
6218:58565553
621C:52514F4E
6220:4D4C4A49	DEFB of 16 bytes
6224:48474544
6228:43424140
622C:3F3D3C3B
6230:3A393837	DEFB of 16 bytes
6234:36353433
6238:3231302F
623C:2E2D2C2C
6240:2B2A2928	DEFB of 16 bytes
6244:27262525
6248:24232221
624C:21201F1E
6250:1E1D1C1B	DEFB of 16 bytes
6254:1B1A1918
6258:18171616
625C:15141413
6260:12121110	DEFB of 16 bytes
6264:100F0E0E
6268:0D0D0C0B
626C:0B0A0A09
6270:09080707	DEFB of 16 bytes
6274:06060505
6278:04040303
627C:02020101
6280:80FEFCFA	DEFB of 16 bytes
6284:F8F6F5F3
6288:F1EFEDEC
628C:EAE8E7E5
6290:E4E2E0DF	DEFB of 16 bytes
6294:DDDCDAD9
6298:D8D6D5D3
629C:D2D1CFCE
62A0:CDCCCAC9	DEFB of 16 bytes
62A4:C8C7C5C4
62A8:C3C2C1C0
62AC:BFBDBCBB
62B0:BAB9B8B7	DEFB of 16 bytes
62B4:B6B5B4B3
62B8:B2B1B0AF
62BC:AEADACAC
62C0:ABAAA9A8	DEFB of 16 bytes
62C4:A7A6A5A5
62C8:A4A3A2A1
62CC:A1A09F9E
62D0:9E9D9C9B	DEFB of 16 bytes
62D4:9B9A9998
62D8:98979696
62DC:95949493
62E0:92929190	DEFB of 16 bytes
62E4:908F8E8E
62E8:8D8D8C8B
62EC:8B8A8A89
62F0:89888787	DEFB of 16 bytes
62F4:86868585
62F8:84848383
62FC:82828181
		INCLUDE fmul.tab
		IF (true)
	DEFS of 0 bytes with value 00
6300:		label Tab_AmB_lo
6300:C0C0BEBE	DEFB of 16 bytes
6304:BBBAB6B4
6308:AFACA6A2
630C:9C968E88
6310:80786E66	DEFB of 16 bytes
6314:5B52463B
6318:3024160A
631C:FBEEDED0
6320:C0B09F8E	DEFB of 16 bytes
6324:7B6A5744
6328:301C07F2
632C:DCC6AE98
6330:80684F36	DEFB of 16 bytes
6334:1B02E6CC
6338:B093775A
633C:3C1EFFE0
6340:C0A07F5E	DEFB of 16 bytes
6344:3C1AF7D4
6348:B08C6742
634C:1BF6CFA8
6350:80582E06	DEFB of 16 bytes
6354:DCB2875C
6358:3004D7AA
635C:7B4E1FF0
6360:C0905F2E	DEFB of 16 bytes
6364:FCCA9764
6368:30FCC792
636C:5B26EFB8
6370:80480FD6	DEFB of 16 bytes
6374:9C6227EC
6378:B07437FA
637C:BC7E3F00
6380:00003F7E	DEFB of 16 bytes
6384:BCFA3774
6388:B0EC2762
638C:9CD60F48
6390:80B8EF26	DEFB of 16 bytes
6394:5B92C7FC
6398:306497CA
639C:FC2E5F90
63A0:C0F01F4E	DEFB of 16 bytes
63A4:7BAAD704
63A8:305C87B2
63AC:DC062E58
63B0:80A8CFF6	DEFB of 16 bytes
63B4:1B42678C
63B8:B0D4F71A
63BC:3C5E7FA0
63C0:C0E0FF1E	DEFB of 16 bytes
63C4:3C5A7793
63C8:B0CCE602
63CC:1B364F68
63D0:8098AEC6	DEFB of 16 bytes
63D4:DCF2071C
63D8:3044576A
63DC:7B8E9FB0
63E0:C0D0DEEE	DEFB of 16 bytes
63E4:FB0A1624
63E8:303B4652
63EC:5B666E78
63F0:80888E96	DEFB of 16 bytes
63F4:9CA2A6AC
63F8:AFB4B6BA
63FC:BBBEBEC0
6400:0F0F0F0F	DEFB of 16 bytes
6404:0F0F0F0F
6408:0F0F0F0F
640C:0F0F0F0F
6410:0F0F0F0F	DEFB of 16 bytes
6414:0F0F0F0F
6418:0F0F0F0F
641C:0E0E0E0E
6420:0E0E0E0E	DEFB of 16 bytes
6424:0E0E0E0E
6428:0E0E0E0D
642C:0D0D0D0D
6430:0D0D0D0D	DEFB of 16 bytes
6434:0D0D0C0C
6438:0C0C0C0C
643C:0C0C0B0B
6440:0B0B0B0B	DEFB of 16 bytes
6444:0B0B0A0A
6448:0A0A0A0A
644C:0A090909
6450:09090909	DEFB of 16 bytes
6454:08080808
6458:08080707
645C:07070706
6460:06060606	DEFB of 16 bytes
6464:05050505
6468:05040404
646C:04040303
6470:03030302	DEFB of 16 bytes
6474:02020201
6478:01010100
647C:00000000
6480:00000000	DEFB of 16 bytes
6484:00000101
6488:01010202
648C:02020303
6490:03030304	DEFB of 16 bytes
6494:04040404
6498:05050505
649C:05060606
64A0:06060707	DEFB of 16 bytes
64A4:07070708
64A8:08080808
64AC:08090909
64B0:09090909	DEFB of 16 bytes
64B4:0A0A0A0A
64B8:0A0A0A0B
64BC:0B0B0B0B
64C0:0B0B0B0C	DEFB of 16 bytes
64C4:0C0C0C0C
64C8:0C0C0C0D
64CC:0D0D0D0D
64D0:0D0D0D0D	DEFB of 16 bytes
64D4:0D0D0E0E
64D8:0E0E0E0E
64DC:0E0E0E0E
64E0:0E0E0E0E	DEFB of 16 bytes
64E4:0E0F0F0F
64E8:0F0F0F0F
64EC:0F0F0F0F
64F0:0F0F0F0F	DEFB of 16 bytes
64F4:0F0F0F0F
64F8:0F0F0F0F
64FC:0F0F0F0F
6500:		label Tab_ApB_lo
6500:80008102	DEFB of 16 bytes
6504:8406890C
6508:9014991E
650C:A42AB138
6510:BF48D15A	DEFB of 16 bytes
6514:E36EF984
6518:109C29B6
651C:44D261F0
6520:7F10A132	DEFB of 16 bytes
6524:C456E97C
6528:10A439CE
652C:63FA9128
6530:BF58F18A	DEFB of 16 bytes
6534:23BE59F4
6538:902CC866
653C:03A240E0
6540:7F1FC161	DEFB of 16 bytes
6544:04A549EC
6548:9033D97D
654C:23C97117
6550:BF6711B9	DEFB of 16 bytes
6554:630DB963
6558:10BB6915
655C:C37121CF
6560:7F2FE091	DEFB of 16 bytes
6564:43F5A85B
6568:10C4782E
656C:E39A5108
6570:BF7830EA	DEFB of 16 bytes
6574:A45E19D4
6578:8F4C09C6
657C:834201C0
6580:804001C2	DEFB of 16 bytes
6584:834609CC
6588:8F5419DE
658C:A46A31F8
6590:C088511A	DEFB of 16 bytes
6594:E3AE7944
6598:0FDCA976
659C:4412E1B0
65A0:805020F2	DEFB of 16 bytes
65A4:C496683C
65A8:0FE4B88E
65AC:643A11E8
65B0:C098704A	DEFB of 16 bytes
65B4:23FED9B4
65B8:8F6C4826
65BC:04E2C0A0
65C0:80604122	DEFB of 16 bytes
65C4:04E6C9AC
65C8:8F74593E
65CC:230AF1D8
65D0:C0A8917A	DEFB of 16 bytes
65D4:644E3924
65D8:10FCE9D6
65DC:C4B2A190
65E0:80706152	DEFB of 16 bytes
65E4:4436291C
65E8:1004F9EE
65EC:E4DAD1C8
65F0:C0B8B1AA	DEFB of 16 bytes
65F4:A49E9994
65F8:908C8986
65FC:84828100
6600:30313132	DEFB of 16 bytes
6604:32333334
6608:34353536
660C:36373738
6610:3839393A	DEFB of 16 bytes
6614:3A3B3B3C
6618:3D3D3E3E
661C:3F3F4040
6620:41424243	DEFB of 16 bytes
6624:43444445
6628:46464747
662C:4848494A
6630:4A4B4B4C	DEFB of 16 bytes
6634:4D4D4E4E
6638:4F505051
663C:52525353
6640:54555556	DEFB of 16 bytes
6644:57575858
6648:595A5A5B
664C:5C5C5D5E
6650:5E5F6060	DEFB of 16 bytes
6654:61626263
6658:64646566
665C:66676868
6660:696A6A6B	DEFB of 16 bytes
6664:6C6C6D6E
6668:6F6F7071
666C:71727374
6670:74757676	DEFB of 16 bytes
6674:77787979
6678:7A7B7C7C
667C:7D7E7F7F
6680:80818282	DEFB of 16 bytes
6684:83848585
6688:86878888
668C:898A8B8B
6690:8C8D8E8F	DEFB of 16 bytes
6694:8F909192
6698:93939495
669C:96979798
66A0:999A9B9B	DEFB of 16 bytes
66A4:9C9D9E9F
66A8:A0A0A1A2
66AC:A3A4A5A5
66B0:A6A7A8A9	DEFB of 16 bytes
66B4:AAAAABAC
66B8:ADAEAFB0
66BC:B1B1B2B3
66C0:B4B5B6B7	DEFB of 16 bytes
66C4:B8B8B9BA
66C8:BBBCBDBE
66CC:BFC0C0C1
66D0:C2C3C4C5	DEFB of 16 bytes
66D4:C6C7C8C9
66D8:CACACBCC
66DC:CDCECFD0
66E0:D1D2D3D4	DEFB of 16 bytes
66E4:D5D6D7D8
66E8:D9DADADB
66EC:DCDDDEDF
66F0:E0E1E2E3	DEFB of 16 bytes
66F4:E4E5E6E7
66F8:E8E9EAEB
66FC:ECEDEE00
		ENDIF
		End of INCLUDE
		ENDIF
		End of INCLUDE
		INCLUDE fmul.tab
		IF (false)
- DEFS    (($ + $FF) / $100) * $100 - $
- Tab_AmB_lo:	; $FC0 - tab_minus[i]
- db $c0,$c0,$be,$be,$bb,$ba,$b6,$b4,$af,$ac,$a6,$a2,$9c,$96,$8e,$88   ; 0_     fc0,fc0,fbe,fbe,fbb,fba,fb6,fb4,faf,fac,fa6,fa2,f9c,f96,f8e,f88 0_
- db $80,$78,$6e,$66,$5b,$52,$46,$3b,$30,$24,$16,$0a,$fb,$ee,$de,$d0   ; 1_     f80,f78,f6e,f66,f5b,f52,f46,f3b,f30,f24,f16,f0a,efb,eee,ede,ed0 1_
- db $c0,$b0,$9f,$8e,$7b,$6a,$57,$44,$30,$1c,$07,$f2,$dc,$c6,$ae,$98   ; 2_     ec0,eb0,e9f,e8e,e7b,e6a,e57,e44,e30,e1c,e07,df2,ddc,dc6,dae,d98 2_
- db $80,$68,$4f,$36,$1b,$02,$e6,$cc,$b0,$93,$77,$5a,$3c,$1e,$ff,$e0   ; 3_     d80,d68,d4f,d36,d1b,d02,ce6,ccc,cb0,c93,c77,c5a,c3c,c1e,bff,be0 3_
- db $c0,$a0,$7f,$5e,$3c,$1a,$f7,$d4,$b0,$8c,$67,$42,$1b,$f6,$cf,$a8   ; 4_     bc0,ba0,b7f,b5e,b3c,b1a,af7,ad4,ab0,a8c,a67,a42,a1b,9f6,9cf,9a8 4_
- db $80,$58,$2e,$06,$dc,$b2,$87,$5c,$30,$04,$d7,$aa,$7b,$4e,$1f,$f0   ; 5_     980,958,92e,906,8dc,8b2,887,85c,830,804,7d7,7aa,77b,74e,71f,6f0 5_
- db $c0,$90,$5f,$2e,$fc,$ca,$97,$64,$30,$fc,$c7,$92,$5b,$26,$ef,$b8   ; 6_     6c0,690,65f,62e,5fc,5ca,597,564,530,4fc,4c7,492,45b,426,3ef,3b8 6_
- db $80,$48,$0f,$d6,$9c,$62,$27,$ec,$b0,$74,$37,$fa,$bc,$7e,$3f,$00   ; 7_     380,348,30f,2d6,29c,262,227,1ec,1b0,174,137, fa, bc, 7e, 3f, 00 7_
- db $00,$00,$3f,$7e,$bc,$fa,$37,$74,$b0,$ec,$27,$62,$9c,$d6,$0f,$48   ; 8_      00, 00, 3f, 7e, bc, fa,137,174,1b0,1ec,227,262,29c,2d6,30f,348 8_
- db $80,$b8,$ef,$26,$5b,$92,$c7,$fc,$30,$64,$97,$ca,$fc,$2e,$5f,$90   ; 9_     380,3b8,3ef,426,45b,492,4c7,4fc,530,564,597,5ca,5fc,62e,65f,690 9_
- db $c0,$f0,$1f,$4e,$7b,$aa,$d7,$04,$30,$5c,$87,$b2,$dc,$06,$2e,$58   ; A_     6c0,6f0,71f,74e,77b,7aa,7d7,804,830,85c,887,8b2,8dc,906,92e,958 A_
- db $80,$a8,$cf,$f6,$1b,$42,$67,$8c,$b0,$d4,$f7,$1a,$3c,$5e,$7f,$a0   ; B_     980,9a8,9cf,9f6,a1b,a42,a67,a8c,ab0,ad4,af7,b1a,b3c,b5e,b7f,ba0 B_
- db $c0,$e0,$ff,$1e,$3c,$5a,$77,$93,$b0,$cc,$e6,$02,$1b,$36,$4f,$68   ; C_     bc0,be0,bff,c1e,c3c,c5a,c77,c93,cb0,ccc,ce6,d02,d1b,d36,d4f,d68 C_
- db $80,$98,$ae,$c6,$dc,$f2,$07,$1c,$30,$44,$57,$6a,$7b,$8e,$9f,$b0   ; D_     d80,d98,dae,dc6,ddc,df2,e07,e1c,e30,e44,e57,e6a,e7b,e8e,e9f,eb0 D_
- db $c0,$d0,$de,$ee,$fb,$0a,$16,$24,$30,$3b,$46,$52,$5b,$66,$6e,$78   ; E_     ec0,ed0,ede,eee,efb,f0a,f16,f24,f30,f3b,f46,f52,f5b,f66,f6e,f78 E_
- db $80,$88,$8e,$96,$9c,$a2,$a6,$ac,$af,$b4,$b6,$ba,$bb,$be,$be,$c0   ; F_     f80,f88,f8e,f96,f9c,fa2,fa6,fac,faf,fb4,fb6,fba,fbb,fbe,fbe,fc0 F_
- db $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f   ; 0_  
- db $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0e,$0e,$0e,$0e   ; 1_  
- db $0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0d,$0d,$0d,$0d,$0d   ; 2_  
- db $0d,$0d,$0d,$0d,$0d,$0d,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0b,$0b   ; 3_  
- db $0b,$0b,$0b,$0b,$0b,$0b,$0a,$0a,$0a,$0a,$0a,$0a,$0a,$09,$09,$09   ; 4_  
- db $09,$09,$09,$09,$08,$08,$08,$08,$08,$08,$07,$07,$07,$07,$07,$06   ; 5_  
- db $06,$06,$06,$06,$05,$05,$05,$05,$05,$04,$04,$04,$04,$04,$03,$03   ; 6_  
- db $03,$03,$03,$02,$02,$02,$02,$01,$01,$01,$01,$00,$00,$00,$00,$00   ; 7_  
- db $00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03   ; 8_  
- db $03,$03,$03,$04,$04,$04,$04,$04,$05,$05,$05,$05,$05,$06,$06,$06   ; 9_  
- db $06,$06,$07,$07,$07,$07,$07,$08,$08,$08,$08,$08,$08,$09,$09,$09   ; A_  
- db $09,$09,$09,$09,$0a,$0a,$0a,$0a,$0a,$0a,$0a,$0b,$0b,$0b,$0b,$0b   ; B_  
- db $0b,$0b,$0b,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0d,$0d,$0d,$0d,$0d   ; C_  
- db $0d,$0d,$0d,$0d,$0d,$0d,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e   ; D_  
- db $0e,$0e,$0e,$0e,$0e,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f   ; E_  
- db $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f   ; F_  
- Tab_ApB_lo:	; tab_plus[i] - $FC0
- db $80,$00,$81,$02,$84,$06,$89,$0c,$90,$14,$99,$1e,$a4,$2a,$b1,$38   ; 0_     3080,3100,3181,3202,3284,3306,3389,340c,3490,3514,3599,361e,36a4,372a,37b1,3838 0_
- db $bf,$48,$d1,$5a,$e3,$6e,$f9,$84,$10,$9c,$29,$b6,$44,$d2,$61,$f0   ; 1_     38bf,3948,39d1,3a5a,3ae3,3b6e,3bf9,3c84,3d10,3d9c,3e29,3eb6,3f44,3fd2,4061,40f0 1_
- db $7f,$10,$a1,$32,$c4,$56,$e9,$7c,$10,$a4,$39,$ce,$63,$fa,$91,$28   ; 2_     417f,4210,42a1,4332,43c4,4456,44e9,457c,4610,46a4,4739,47ce,4863,48fa,4991,4a28 2_
- db $bf,$58,$f1,$8a,$23,$be,$59,$f4,$90,$2c,$c8,$66,$03,$a2,$40,$e0   ; 3_     4abf,4b58,4bf1,4c8a,4d23,4dbe,4e59,4ef4,4f90,502c,50c8,5166,5203,52a2,5340,53e0 3_
- db $7f,$1f,$c1,$61,$04,$a5,$49,$ec,$90,$33,$d9,$7d,$23,$c9,$71,$17   ; 4_     547f,551f,55c1,5661,5704,57a5,5849,58ec,5990,5a33,5ad9,5b7d,5c23,5cc9,5d71,5e17 4_
- db $bf,$67,$11,$b9,$63,$0d,$b9,$63,$10,$bb,$69,$15,$c3,$71,$21,$cf   ; 5_     5ebf,5f67,6011,60b9,6163,620d,62b9,6363,6410,64bb,6569,6615,66c3,6771,6821,68cf 5_
- db $7f,$2f,$e0,$91,$43,$f5,$a8,$5b,$10,$c4,$78,$2e,$e3,$9a,$51,$08   ; 6_     697f,6a2f,6ae0,6b91,6c43,6cf5,6da8,6e5b,6f10,6fc4,7078,712e,71e3,729a,7351,7408 6_
- db $bf,$78,$30,$ea,$a4,$5e,$19,$d4,$8f,$4c,$09,$c6,$83,$42,$01,$c0   ; 7_     74bf,7578,7630,76ea,77a4,785e,7919,79d4,7a8f,7b4c,7c09,7cc6,7d83,7e42,7f01,7fc0 7_
- db $80,$40,$01,$c2,$83,$46,$09,$cc,$8f,$54,$19,$de,$a4,$6a,$31,$f8   ; 8_     8080,8140,8201,82c2,8383,8446,8509,85cc,868f,8754,8819,88de,89a4,8a6a,8b31,8bf8 8_
- db $c0,$88,$51,$1a,$e3,$ae,$79,$44,$0f,$dc,$a9,$76,$44,$12,$e1,$b0   ; 9_     8cc0,8d88,8e51,8f1a,8fe3,90ae,9179,9244,930f,93dc,94a9,9576,9644,9712,97e1,98b0 9_
- db $80,$50,$20,$f2,$c4,$96,$68,$3c,$0f,$e4,$b8,$8e,$64,$3a,$11,$e8   ; A_     9980,9a50,9b20,9bf2,9cc4,9d96,9e68,9f3c,a00f,a0e4,a1b8,a28e,a364,a43a,a511,a5e8 A_
- db $c0,$98,$70,$4a,$23,$fe,$d9,$b4,$8f,$6c,$48,$26,$04,$e2,$c0,$a0   ; B_     a6c0,a798,a870,a94a,aa23,aafe,abd9,acb4,ad8f,ae6c,af48,b026,b104,b1e2,b2c0,b3a0 B_
- db $80,$60,$41,$22,$04,$e6,$c9,$ac,$8f,$74,$59,$3e,$23,$0a,$f1,$d8   ; C_     b480,b560,b641,b722,b804,b8e6,b9c9,baac,bb8f,bc74,bd59,be3e,bf23,c00a,c0f1,c1d8 C_
- db $c0,$a8,$91,$7a,$64,$4e,$39,$24,$10,$fc,$e9,$d6,$c4,$b2,$a1,$90   ; D_     c2c0,c3a8,c491,c57a,c664,c74e,c839,c924,ca10,cafc,cbe9,ccd6,cdc4,ceb2,cfa1,d090 D_
- db $80,$70,$61,$52,$44,$36,$29,$1c,$10,$04,$f9,$ee,$e4,$da,$d1,$c8   ; E_     d180,d270,d361,d452,d544,d636,d729,d81c,d910,da04,daf9,dbee,dce4,ddda,ded1,dfc8 E_
- db $c0,$b8,$b1,$aa,$a4,$9e,$99,$94,$90,$8c,$89,$86,$84,$82,$81,$00   ; F_     e0c0,e1b8,e2b1,e3aa,e4a4,e59e,e699,e794,e890,e98c,ea89,eb86,ec84,ed82,ee81,  00 F_
- db $30,$31,$31,$32,$32,$33,$33,$34,$34,$35,$35,$36,$36,$37,$37,$38   ; 0_  
- db $38,$39,$39,$3a,$3a,$3b,$3b,$3c,$3d,$3d,$3e,$3e,$3f,$3f,$40,$40   ; 1_  
- db $41,$42,$42,$43,$43,$44,$44,$45,$46,$46,$47,$47,$48,$48,$49,$4a   ; 2_  
- db $4a,$4b,$4b,$4c,$4d,$4d,$4e,$4e,$4f,$50,$50,$51,$52,$52,$53,$53   ; 3_  
- db $54,$55,$55,$56,$57,$57,$58,$58,$59,$5a,$5a,$5b,$5c,$5c,$5d,$5e   ; 4_  
- db $5e,$5f,$60,$60,$61,$62,$62,$63,$64,$64,$65,$66,$66,$67,$68,$68   ; 5_  
- db $69,$6a,$6a,$6b,$6c,$6c,$6d,$6e,$6f,$6f,$70,$71,$71,$72,$73,$74   ; 6_  
- db $74,$75,$76,$76,$77,$78,$79,$79,$7a,$7b,$7c,$7c,$7d,$7e,$7f,$7f   ; 7_  
- db $80,$81,$82,$82,$83,$84,$85,$85,$86,$87,$88,$88,$89,$8a,$8b,$8b   ; 8_  
- db $8c,$8d,$8e,$8f,$8f,$90,$91,$92,$93,$93,$94,$95,$96,$97,$97,$98   ; 9_  
- db $99,$9a,$9b,$9b,$9c,$9d,$9e,$9f,$a0,$a0,$a1,$a2,$a3,$a4,$a5,$a5   ; A_  
- db $a6,$a7,$a8,$a9,$aa,$aa,$ab,$ac,$ad,$ae,$af,$b0,$b1,$b1,$b2,$b3   ; B_  
- db $b4,$b5,$b6,$b7,$b8,$b8,$b9,$ba,$bb,$bc,$bd,$be,$bf,$c0,$c0,$c1   ; C_  
- db $c2,$c3,$c4,$c5,$c6,$c7,$c8,$c9,$ca,$ca,$cb,$cc,$cd,$ce,$cf,$d0   ; D_  
- db $d1,$d2,$d3,$d4,$d5,$d6,$d7,$d8,$d9,$da,$da,$db,$dc,$dd,$de,$df   ; E_  
- db $e0,$e1,$e2,$e3,$e4,$e5,$e6,$e7,$e8,$e9,$ea,$eb,$ec,$ed,$ee,$00   ; F_  
		ENDIF
		End of INCLUDE
		INCLUDE fsqrt.tab
		IF (true)
	DEFS of 0 bytes with value 00
6700:		label SQR_TAB
6700:00000101	DEFB of 16 bytes
6704:02020303
6708:04040505
670C:06060707
6710:08080909	DEFB of 16 bytes
6714:0A0A0B0B
6718:0B0C0C0D
671C:0D0E0E0F
6720:0F101010	DEFB of 16 bytes
6724:11111212
6728:13131414
672C:14151516
6730:16171717	DEFB of 16 bytes
6734:18181919
6738:191A1A1B
673C:1B1C1C1C
6740:1D1D1E1E	DEFB of 16 bytes
6744:1E1F1F20
6748:20202121
674C:22222223
6750:23242424	DEFB of 16 bytes
6754:25252626
6758:26272727
675C:28282929
6760:292A2A2A	DEFB of 16 bytes
6764:2B2B2C2C
6768:2C2D2D2D
676C:2E2E2F2F
6770:2F303030	DEFB of 16 bytes
6774:31313132
6778:32333333
677C:34343435
6780:35363637	DEFB of 16 bytes
6784:3839393A
6788:3B3B3C3D
678C:3D3E3F3F
6790:40414142	DEFB of 16 bytes
6794:43434445
6798:45464747
679C:4848494A
67A0:4A4B4C4C	DEFB of 16 bytes
67A4:4D4E4E4F
67A8:4F505151
67AC:52525354
67B0:54555556	DEFB of 16 bytes
67B4:57575858
67B8:595A5A5B
67BC:5B5C5D5D
67C0:5E5E5F5F	DEFB of 16 bytes
67C4:60616162
67C8:62636364
67CC:65656666
67D0:67676868	DEFB of 16 bytes
67D4:696A6A6B
67D8:6B6C6C6D
67DC:6D6E6E6F
67E0:6F707171	DEFB of 16 bytes
67E4:72727373
67E8:74747575
67EC:76767777
67F0:78787979	DEFB of 16 bytes
67F4:7A7A7B7B
67F8:7C7C7D7D
67FC:7E7E7F7F
		ENDIF
		End of INCLUDE
		INCLUDE fpow2.tab
		IF (true)
	DEFS of 0 bytes with value 00
6800:		label POW2TAB
6800:00020406	DEFB of 16 bytes
6804:080A0C0E
6808:10131517
680C:191B1E20
6810:22242729	DEFB of 16 bytes
6814:2B2D3032
6818:3437393C
681C:3E414346
6820:484B4D50	DEFB of 16 bytes
6824:5255575A
6828:5C5F6264
682C:676A6D6F
6830:7275787A	DEFB of 16 bytes
6834:7D000103
6838:04060709
683C:0A0C0D0F
6840:10121315	DEFB of 16 bytes
6844:1618191B
6848:1C1E1F21
684C:23242627
6850:292B2C2E	DEFB of 16 bytes
6854:30313335
6858:36383A3B
685C:3D3F4142
6860:44464849	DEFB of 16 bytes
6864:4B4D4F50
6868:52545658
686C:5A5B5D5F
6870:61636567	DEFB of 16 bytes
6874:696A6C6E
6878:70727476
687C:787A7C7E
PREDEL_POW2	EQU 0034
		ENDIF
		End of INCLUDE
		INCLUDE fln.tab
		IF (true)
6880:00000000	DEFS of 128 bytes with value 00
6884:00000000
6888:00000000
688C:00000000
6890:00000000
6894:00000000
6898:00000000
689C:00000000
68A0:00000000
68A4:00000000
68A8:00000000
68AC:00000000
68B0:00000000
68B4:00000000
68B8:00000000
68BC:00000000
68C0:00000000
68C4:00000000
68C8:00000000
68CC:00000000
68D0:00000000
68D4:00000000
68D8:00000000
68DC:00000000
68E0:00000000
68E4:00000000
68E8:00000000
68EC:00000000
68F0:00000000
68F4:00000000
68F8:00000000
68FC:00000000
6900:		label LN_M
6900:0000	DEFW of 1 words
6902:7F77	DEFW of 1 words
6904:7E78	DEFW of 1 words
6906:3E79	DEFW of 1 words
6908:7C79	DEFW of 1 words
690A:1D7A	DEFW of 1 words
690C:3C7A	DEFW of 1 words
690E:5A7A	DEFW of 1 words
6910:787A	DEFW of 1 words
6912:0B7B	DEFW of 1 words
6914:1A7B	DEFW of 1 words
6916:297B	DEFW of 1 words
6918:387B	DEFW of 1 words
691A:467B	DEFW of 1 words
691C:557B	DEFW of 1 words
691E:637B	DEFW of 1 words
6920:717B	DEFW of 1 words
6922:7F7B	DEFW of 1 words
6924:077C	DEFW of 1 words
6926:0E7C	DEFW of 1 words
6928:157C	DEFW of 1 words
692A:1C7C	DEFW of 1 words
692C:227C	DEFW of 1 words
692E:297C	DEFW of 1 words
6930:307C	DEFW of 1 words
6932:377C	DEFW of 1 words
6934:3D7C	DEFW of 1 words
6936:447C	DEFW of 1 words
6938:4B7C	DEFW of 1 words
693A:517C	DEFW of 1 words
693C:587C	DEFW of 1 words
693E:5E7C	DEFW of 1 words
6940:647C	DEFW of 1 words
6942:6B7C	DEFW of 1 words
6944:717C	DEFW of 1 words
6946:787C	DEFW of 1 words
6948:7E7C	DEFW of 1 words
694A:027D	DEFW of 1 words
694C:057D	DEFW of 1 words
694E:087D	DEFW of 1 words
6950:0B7D	DEFW of 1 words
6952:0E7D	DEFW of 1 words
6954:117D	DEFW of 1 words
6956:147D	DEFW of 1 words
6958:177D	DEFW of 1 words
695A:1A7D	DEFW of 1 words
695C:1D7D	DEFW of 1 words
695E:207D	DEFW of 1 words
6960:237D	DEFW of 1 words
6962:267D	DEFW of 1 words
6964:297D	DEFW of 1 words
6966:2C7D	DEFW of 1 words
6968:2F7D	DEFW of 1 words
696A:317D	DEFW of 1 words
696C:347D	DEFW of 1 words
696E:377D	DEFW of 1 words
6970:3A7D	DEFW of 1 words
6972:3D7D	DEFW of 1 words
6974:3F7D	DEFW of 1 words
6976:427D	DEFW of 1 words
6978:457D	DEFW of 1 words
697A:487D	DEFW of 1 words
697C:4A7D	DEFW of 1 words
697E:4D7D	DEFW of 1 words
6980:507D	DEFW of 1 words
6982:527D	DEFW of 1 words
6984:557D	DEFW of 1 words
6986:587D	DEFW of 1 words
6988:5A7D	DEFW of 1 words
698A:5D7D	DEFW of 1 words
698C:5F7D	DEFW of 1 words
698E:627D	DEFW of 1 words
6990:647D	DEFW of 1 words
6992:677D	DEFW of 1 words
6994:6A7D	DEFW of 1 words
6996:6C7D	DEFW of 1 words
6998:6F7D	DEFW of 1 words
699A:717D	DEFW of 1 words
699C:747D	DEFW of 1 words
699E:767D	DEFW of 1 words
69A0:797D	DEFW of 1 words
69A2:7B7D	DEFW of 1 words
69A4:7D7D	DEFW of 1 words
69A6:007E	DEFW of 1 words
69A8:017E	DEFW of 1 words
69AA:027E	DEFW of 1 words
69AC:047E	DEFW of 1 words
69AE:057E	DEFW of 1 words
69B0:067E	DEFW of 1 words
69B2:077E	DEFW of 1 words
69B4:087E	DEFW of 1 words
69B6:097E	DEFW of 1 words
69B8:0B7E	DEFW of 1 words
69BA:0C7E	DEFW of 1 words
69BC:0D7E	DEFW of 1 words
69BE:0E7E	DEFW of 1 words
69C0:0F7E	DEFW of 1 words
69C2:107E	DEFW of 1 words
69C4:127E	DEFW of 1 words
69C6:137E	DEFW of 1 words
69C8:147E	DEFW of 1 words
69CA:157E	DEFW of 1 words
69CC:167E	DEFW of 1 words
69CE:177E	DEFW of 1 words
69D0:187E	DEFW of 1 words
69D2:197E	DEFW of 1 words
69D4:1A7E	DEFW of 1 words
69D6:1C7E	DEFW of 1 words
69D8:1D7E	DEFW of 1 words
69DA:1E7E	DEFW of 1 words
69DC:1F7E	DEFW of 1 words
69DE:207E	DEFW of 1 words
69E0:217E	DEFW of 1 words
69E2:227E	DEFW of 1 words
69E4:237E	DEFW of 1 words
69E6:247E	DEFW of 1 words
69E8:257E	DEFW of 1 words
69EA:267E	DEFW of 1 words
69EC:277E	DEFW of 1 words
69EE:287E	DEFW of 1 words
69F0:297E	DEFW of 1 words
69F2:2A7E	DEFW of 1 words
69F4:2B7E	DEFW of 1 words
69F6:2C7E	DEFW of 1 words
69F8:2D7E	DEFW of 1 words
69FA:2E7E	DEFW of 1 words
69FC:2F7E	DEFW of 1 words
69FE:307E	DEFW of 1 words
6A00:		label LN2_EXP
6A00:B0AFADAC	DEFB of 16 bytes
6A04:ABA9A8A6
6A08:A5A4A2A1
6A0C:9F9E9D9B
6A10:9A989796	DEFB of 16 bytes
6A14:94939290
6A18:8F8D8C8B
6A1C:89888685
6A20:848281FF	DEFB of 16 bytes
6A24:FCFAF7F4
6A28:F1EEECE9
6A2C:E6E3E1DE
6A30:DBD8D5D3	DEFB of 16 bytes
6A34:D0CDCAC8
6A38:C5C2BFBD
6A3C:BAB7B4B1
6A40:AFACA9A6	DEFB of 16 bytes
6A44:A4A19E9B
6A48:98969390
6A4C:8D8B8885
6A50:82FFFAF4	DEFB of 16 bytes
6A54:EEE9E3DE
6A58:D8D3CDC8
6A5C:C2BDB7B1
6A60:ACA6A19B	DEFB of 16 bytes
6A64:96908B85
6A68:FFF4E9DE
6A6C:D3C8BDB1
6A70:A69B9085	DEFB of 16 bytes
6A74:F4DEC8B1
6A78:9B85DEB1
6A7C:85B1B100
6A80:31310531	DEFB of 16 bytes
6A84:5E051B31
6A88:485E7405
6A8C:101B2631
6A90:3D48535E	DEFB of 16 bytes
6A94:69747F05
6A98:0B10161B
6A9C:21262C31
6AA0:373D4248	DEFB of 16 bytes
6AA4:4D53585E
6AA8:63696E74
6AAC:7A7F0205
6AB0:080B0D10	DEFB of 16 bytes
6AB4:1316181B
6AB8:1E212426
6ABC:292C2F31
6AC0:34373A3D	DEFB of 16 bytes
6AC4:3F424548
6AC8:4A4D5053
6ACC:55585B5E
6AD0:61636669	DEFB of 16 bytes
6AD4:6C6E7174
6AD8:777A7C7F
6ADC:01020405
6AE0:0608090B	DEFB of 16 bytes
6AE4:0C0D0F10
6AE8:12131416
6AEC:17181A1B
6AF0:1D1E1F21	DEFB of 16 bytes
6AF4:22242526
6AF8:28292B2C
6AFC:2D2F3031
6B00:85858585	DEFB of 16 bytes
6B04:85858585
6B08:85858585
6B0C:85858585
6B10:85858585	DEFB of 16 bytes
6B14:85858585
6B18:85858585
6B1C:85858585
6B20:85858584	DEFB of 16 bytes
6B24:84848484
6B28:84848484
6B2C:84848484
6B30:84848484	DEFB of 16 bytes
6B34:84848484
6B38:84848484
6B3C:84848484
6B40:84848484	DEFB of 16 bytes
6B44:84848484
6B48:84848484
6B4C:84848484
6B50:84838383	DEFB of 16 bytes
6B54:83838383
6B58:83838383
6B5C:83838383
6B60:83838383	DEFB of 16 bytes
6B64:83838383
6B68:82828282
6B6C:82828282
6B70:82828282	DEFB of 16 bytes
6B74:81818181
6B78:81818080
6B7C:807F7E00
6B80:7E7F8080	DEFB of 16 bytes
6B84:80818181
6B88:81818182
6B8C:82828282
6B90:82828282	DEFB of 16 bytes
6B94:82828283
6B98:83838383
6B9C:83838383
6BA0:83838383	DEFB of 16 bytes
6BA4:83838383
6BA8:83838383
6BAC:83838484
6BB0:84848484	DEFB of 16 bytes
6BB4:84848484
6BB8:84848484
6BBC:84848484
6BC0:84848484	DEFB of 16 bytes
6BC4:84848484
6BC8:84848484
6BCC:84848484
6BD0:84848484	DEFB of 16 bytes
6BD4:84848484
6BD8:84848484
6BDC:85858585
6BE0:85858585	DEFB of 16 bytes
6BE4:85858585
6BE8:85858585
6BEC:85858585
6BF0:85858585	DEFB of 16 bytes
6BF4:85858585
6BF8:85858585
6BFC:85858585
		IF (true)
6C00:		label LN_FIX
6C00:B17FB07F	DEFW of 16 words
6C04:AF7FAE7F
6C08:AE7FAD7F
6C0C:AC7FAB7F
6C10:AA7FA97F
6C14:A87FA77F
6C18:A67FA57F
6C1C:A47FA37F
6C20:A27FA17F	DEFW of 16 words
6C24:A17FA07F
6C28:9F7F9E7F
6C2C:9D7F9C7F
6C30:9B7F9B7F
6C34:9A7F997F
6C38:987F977F
6C3C:967F967F
6C40:957F947F	DEFW of 16 words
6C44:937F937F
6C48:927F917F
6C4C:907F8F7F
6C50:8F7F8E7F
6C54:8D7F8C7F
6C58:8C7F8B7F
6C5C:8A7F897F
6C60:897F887F	DEFW of 16 words
6C64:877F877F
6C68:867F857F
6C6C:847F847F
6C70:837F827F
6C74:827F817F
6C78:807FFF7E
6C7C:FE7EFC7E
6C80:FB7EFA7E	DEFW of 16 words
6C84:F87EF77E
6C88:F67EF57E
6C8C:F37EF27E
6C90:F17EEF7E
6C94:EE7EED7E
6C98:EC7EEA7E
6C9C:E97EE87E
6CA0:E77EE57E	DEFW of 16 words
6CA4:E47EE37E
6CA8:E27EE17E
6CAC:DF7EDE7E
6CB0:DD7EDC7E
6CB4:DB7ED97E
6CB8:D87ED77E
6CBC:D67ED57E
6CC0:D47ED27E	DEFW of 16 words
6CC4:D17ED07E
6CC8:CF7ECE7E
6CCC:CD7ECC7E
6CD0:CB7ECA7E
6CD4:C87EC77E
6CD8:C67EC57E
6CDC:C47EC37E
6CE0:C27EC17E	DEFW of 16 words
6CE4:C07EBF7E
6CE8:BE7EBD7E
6CEC:BC7EBB7E
6CF0:BA7EB97E
6CF4:B87EB67E
6CF8:B57EB47E
6CFC:B37EB27E
6D00:B17EAF7E	DEFW of 16 words
6D04:AD7EAC7E
6D08:AA7EA87E
6D0C:A67EA47E
6D10:A27EA07E
6D14:9E7E9C7E
6D18:9B7E997E
6D1C:977E957E
6D20:937E927E	DEFW of 16 words
6D24:907E8E7E
6D28:8C7E8B7E
6D2C:897E877E
6D30:857E847E
6D34:827E807E
6D38:FE7DFA7D
6D3C:F77DF47D
6D40:F17DED7D	DEFW of 16 words
6D44:EA7DE77D
6D48:E47DE17D
6D4C:DE7DDB7D
6D50:D87DD57D
6D54:D27DCF7D
6D58:CC7DC97D
6D5C:C67DC37D
6D60:C07DBD7D	DEFW of 16 words
6D64:BA7DB77D
6D68:B47DB27D
6D6C:AF7DAC7D
6D70:A97DA67D
6D74:A47DA17D
6D78:9E7D9B7D
6D7C:997D967D
6D80:937D917D	DEFW of 16 words
6D84:8E7D8B7D
6D88:897D867D
6D8C:847D817D
6D90:FD7CF87C
6D94:F37CEE7C
6D98:E97CE37C
6D9C:DF7CDA7C
6DA0:D57CD07C	DEFW of 16 words
6DA4:CB7CC67C
6DA8:C17CBC7C
6DAC:B87CB37C
6DB0:AE7CA97C
6DB4:A57CA07C
6DB8:9B7C977C
6DBC:927C8D7C
6DC0:897C847C	DEFW of 16 words
6DC4:FF7BF67B
6DC8:ED7BE47B
6DCC:DB7BD27B
6DD0:CA7BC17B
6DD4:B87BAF7B
6DD8:A77B9E7B
6DDC:957B8D7B
6DE0:847BF77A	DEFW of 16 words
6DE4:E67AD57A
6DE8:C57AB47A
6DEC:A37A937A
6DF0:827AE379
6DF4:C279A279
6DF8:8179C178
6DFC:81788077
		ENDIF
		ENDIF
		End of INCLUDE
		INCLUDE fexp.tab
		IF (true)
		INCLUDE fmul.tab
		IF (false)
- DEFS    (($ + $FF) / $100) * $100 - $
- Tab_AmB_lo:	; $FC0 - tab_minus[i]
- db $c0,$c0,$be,$be,$bb,$ba,$b6,$b4,$af,$ac,$a6,$a2,$9c,$96,$8e,$88   ; 0_     fc0,fc0,fbe,fbe,fbb,fba,fb6,fb4,faf,fac,fa6,fa2,f9c,f96,f8e,f88 0_
- db $80,$78,$6e,$66,$5b,$52,$46,$3b,$30,$24,$16,$0a,$fb,$ee,$de,$d0   ; 1_     f80,f78,f6e,f66,f5b,f52,f46,f3b,f30,f24,f16,f0a,efb,eee,ede,ed0 1_
- db $c0,$b0,$9f,$8e,$7b,$6a,$57,$44,$30,$1c,$07,$f2,$dc,$c6,$ae,$98   ; 2_     ec0,eb0,e9f,e8e,e7b,e6a,e57,e44,e30,e1c,e07,df2,ddc,dc6,dae,d98 2_
- db $80,$68,$4f,$36,$1b,$02,$e6,$cc,$b0,$93,$77,$5a,$3c,$1e,$ff,$e0   ; 3_     d80,d68,d4f,d36,d1b,d02,ce6,ccc,cb0,c93,c77,c5a,c3c,c1e,bff,be0 3_
- db $c0,$a0,$7f,$5e,$3c,$1a,$f7,$d4,$b0,$8c,$67,$42,$1b,$f6,$cf,$a8   ; 4_     bc0,ba0,b7f,b5e,b3c,b1a,af7,ad4,ab0,a8c,a67,a42,a1b,9f6,9cf,9a8 4_
- db $80,$58,$2e,$06,$dc,$b2,$87,$5c,$30,$04,$d7,$aa,$7b,$4e,$1f,$f0   ; 5_     980,958,92e,906,8dc,8b2,887,85c,830,804,7d7,7aa,77b,74e,71f,6f0 5_
- db $c0,$90,$5f,$2e,$fc,$ca,$97,$64,$30,$fc,$c7,$92,$5b,$26,$ef,$b8   ; 6_     6c0,690,65f,62e,5fc,5ca,597,564,530,4fc,4c7,492,45b,426,3ef,3b8 6_
- db $80,$48,$0f,$d6,$9c,$62,$27,$ec,$b0,$74,$37,$fa,$bc,$7e,$3f,$00   ; 7_     380,348,30f,2d6,29c,262,227,1ec,1b0,174,137, fa, bc, 7e, 3f, 00 7_
- db $00,$00,$3f,$7e,$bc,$fa,$37,$74,$b0,$ec,$27,$62,$9c,$d6,$0f,$48   ; 8_      00, 00, 3f, 7e, bc, fa,137,174,1b0,1ec,227,262,29c,2d6,30f,348 8_
- db $80,$b8,$ef,$26,$5b,$92,$c7,$fc,$30,$64,$97,$ca,$fc,$2e,$5f,$90   ; 9_     380,3b8,3ef,426,45b,492,4c7,4fc,530,564,597,5ca,5fc,62e,65f,690 9_
- db $c0,$f0,$1f,$4e,$7b,$aa,$d7,$04,$30,$5c,$87,$b2,$dc,$06,$2e,$58   ; A_     6c0,6f0,71f,74e,77b,7aa,7d7,804,830,85c,887,8b2,8dc,906,92e,958 A_
- db $80,$a8,$cf,$f6,$1b,$42,$67,$8c,$b0,$d4,$f7,$1a,$3c,$5e,$7f,$a0   ; B_     980,9a8,9cf,9f6,a1b,a42,a67,a8c,ab0,ad4,af7,b1a,b3c,b5e,b7f,ba0 B_
- db $c0,$e0,$ff,$1e,$3c,$5a,$77,$93,$b0,$cc,$e6,$02,$1b,$36,$4f,$68   ; C_     bc0,be0,bff,c1e,c3c,c5a,c77,c93,cb0,ccc,ce6,d02,d1b,d36,d4f,d68 C_
- db $80,$98,$ae,$c6,$dc,$f2,$07,$1c,$30,$44,$57,$6a,$7b,$8e,$9f,$b0   ; D_     d80,d98,dae,dc6,ddc,df2,e07,e1c,e30,e44,e57,e6a,e7b,e8e,e9f,eb0 D_
- db $c0,$d0,$de,$ee,$fb,$0a,$16,$24,$30,$3b,$46,$52,$5b,$66,$6e,$78   ; E_     ec0,ed0,ede,eee,efb,f0a,f16,f24,f30,f3b,f46,f52,f5b,f66,f6e,f78 E_
- db $80,$88,$8e,$96,$9c,$a2,$a6,$ac,$af,$b4,$b6,$ba,$bb,$be,$be,$c0   ; F_     f80,f88,f8e,f96,f9c,fa2,fa6,fac,faf,fb4,fb6,fba,fbb,fbe,fbe,fc0 F_
- db $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f   ; 0_  
- db $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0e,$0e,$0e,$0e   ; 1_  
- db $0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0d,$0d,$0d,$0d,$0d   ; 2_  
- db $0d,$0d,$0d,$0d,$0d,$0d,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0b,$0b   ; 3_  
- db $0b,$0b,$0b,$0b,$0b,$0b,$0a,$0a,$0a,$0a,$0a,$0a,$0a,$09,$09,$09   ; 4_  
- db $09,$09,$09,$09,$08,$08,$08,$08,$08,$08,$07,$07,$07,$07,$07,$06   ; 5_  
- db $06,$06,$06,$06,$05,$05,$05,$05,$05,$04,$04,$04,$04,$04,$03,$03   ; 6_  
- db $03,$03,$03,$02,$02,$02,$02,$01,$01,$01,$01,$00,$00,$00,$00,$00   ; 7_  
- db $00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03   ; 8_  
- db $03,$03,$03,$04,$04,$04,$04,$04,$05,$05,$05,$05,$05,$06,$06,$06   ; 9_  
- db $06,$06,$07,$07,$07,$07,$07,$08,$08,$08,$08,$08,$08,$09,$09,$09   ; A_  
- db $09,$09,$09,$09,$0a,$0a,$0a,$0a,$0a,$0a,$0a,$0b,$0b,$0b,$0b,$0b   ; B_  
- db $0b,$0b,$0b,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0d,$0d,$0d,$0d,$0d   ; C_  
- db $0d,$0d,$0d,$0d,$0d,$0d,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e   ; D_  
- db $0e,$0e,$0e,$0e,$0e,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f   ; E_  
- db $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f   ; F_  
- Tab_ApB_lo:	; tab_plus[i] - $FC0
- db $80,$00,$81,$02,$84,$06,$89,$0c,$90,$14,$99,$1e,$a4,$2a,$b1,$38   ; 0_     3080,3100,3181,3202,3284,3306,3389,340c,3490,3514,3599,361e,36a4,372a,37b1,3838 0_
- db $bf,$48,$d1,$5a,$e3,$6e,$f9,$84,$10,$9c,$29,$b6,$44,$d2,$61,$f0   ; 1_     38bf,3948,39d1,3a5a,3ae3,3b6e,3bf9,3c84,3d10,3d9c,3e29,3eb6,3f44,3fd2,4061,40f0 1_
- db $7f,$10,$a1,$32,$c4,$56,$e9,$7c,$10,$a4,$39,$ce,$63,$fa,$91,$28   ; 2_     417f,4210,42a1,4332,43c4,4456,44e9,457c,4610,46a4,4739,47ce,4863,48fa,4991,4a28 2_
- db $bf,$58,$f1,$8a,$23,$be,$59,$f4,$90,$2c,$c8,$66,$03,$a2,$40,$e0   ; 3_     4abf,4b58,4bf1,4c8a,4d23,4dbe,4e59,4ef4,4f90,502c,50c8,5166,5203,52a2,5340,53e0 3_
- db $7f,$1f,$c1,$61,$04,$a5,$49,$ec,$90,$33,$d9,$7d,$23,$c9,$71,$17   ; 4_     547f,551f,55c1,5661,5704,57a5,5849,58ec,5990,5a33,5ad9,5b7d,5c23,5cc9,5d71,5e17 4_
- db $bf,$67,$11,$b9,$63,$0d,$b9,$63,$10,$bb,$69,$15,$c3,$71,$21,$cf   ; 5_     5ebf,5f67,6011,60b9,6163,620d,62b9,6363,6410,64bb,6569,6615,66c3,6771,6821,68cf 5_
- db $7f,$2f,$e0,$91,$43,$f5,$a8,$5b,$10,$c4,$78,$2e,$e3,$9a,$51,$08   ; 6_     697f,6a2f,6ae0,6b91,6c43,6cf5,6da8,6e5b,6f10,6fc4,7078,712e,71e3,729a,7351,7408 6_
- db $bf,$78,$30,$ea,$a4,$5e,$19,$d4,$8f,$4c,$09,$c6,$83,$42,$01,$c0   ; 7_     74bf,7578,7630,76ea,77a4,785e,7919,79d4,7a8f,7b4c,7c09,7cc6,7d83,7e42,7f01,7fc0 7_
- db $80,$40,$01,$c2,$83,$46,$09,$cc,$8f,$54,$19,$de,$a4,$6a,$31,$f8   ; 8_     8080,8140,8201,82c2,8383,8446,8509,85cc,868f,8754,8819,88de,89a4,8a6a,8b31,8bf8 8_
- db $c0,$88,$51,$1a,$e3,$ae,$79,$44,$0f,$dc,$a9,$76,$44,$12,$e1,$b0   ; 9_     8cc0,8d88,8e51,8f1a,8fe3,90ae,9179,9244,930f,93dc,94a9,9576,9644,9712,97e1,98b0 9_
- db $80,$50,$20,$f2,$c4,$96,$68,$3c,$0f,$e4,$b8,$8e,$64,$3a,$11,$e8   ; A_     9980,9a50,9b20,9bf2,9cc4,9d96,9e68,9f3c,a00f,a0e4,a1b8,a28e,a364,a43a,a511,a5e8 A_
- db $c0,$98,$70,$4a,$23,$fe,$d9,$b4,$8f,$6c,$48,$26,$04,$e2,$c0,$a0   ; B_     a6c0,a798,a870,a94a,aa23,aafe,abd9,acb4,ad8f,ae6c,af48,b026,b104,b1e2,b2c0,b3a0 B_
- db $80,$60,$41,$22,$04,$e6,$c9,$ac,$8f,$74,$59,$3e,$23,$0a,$f1,$d8   ; C_     b480,b560,b641,b722,b804,b8e6,b9c9,baac,bb8f,bc74,bd59,be3e,bf23,c00a,c0f1,c1d8 C_
- db $c0,$a8,$91,$7a,$64,$4e,$39,$24,$10,$fc,$e9,$d6,$c4,$b2,$a1,$90   ; D_     c2c0,c3a8,c491,c57a,c664,c74e,c839,c924,ca10,cafc,cbe9,ccd6,cdc4,ceb2,cfa1,d090 D_
- db $80,$70,$61,$52,$44,$36,$29,$1c,$10,$04,$f9,$ee,$e4,$da,$d1,$c8   ; E_     d180,d270,d361,d452,d544,d636,d729,d81c,d910,da04,daf9,dbee,dce4,ddda,ded1,dfc8 E_
- db $c0,$b8,$b1,$aa,$a4,$9e,$99,$94,$90,$8c,$89,$86,$84,$82,$81,$00   ; F_     e0c0,e1b8,e2b1,e3aa,e4a4,e59e,e699,e794,e890,e98c,ea89,eb86,ec84,ed82,ee81,  00 F_
- db $30,$31,$31,$32,$32,$33,$33,$34,$34,$35,$35,$36,$36,$37,$37,$38   ; 0_  
- db $38,$39,$39,$3a,$3a,$3b,$3b,$3c,$3d,$3d,$3e,$3e,$3f,$3f,$40,$40   ; 1_  
- db $41,$42,$42,$43,$43,$44,$44,$45,$46,$46,$47,$47,$48,$48,$49,$4a   ; 2_  
- db $4a,$4b,$4b,$4c,$4d,$4d,$4e,$4e,$4f,$50,$50,$51,$52,$52,$53,$53   ; 3_  
- db $54,$55,$55,$56,$57,$57,$58,$58,$59,$5a,$5a,$5b,$5c,$5c,$5d,$5e   ; 4_  
- db $5e,$5f,$60,$60,$61,$62,$62,$63,$64,$64,$65,$66,$66,$67,$68,$68   ; 5_  
- db $69,$6a,$6a,$6b,$6c,$6c,$6d,$6e,$6f,$6f,$70,$71,$71,$72,$73,$74   ; 6_  
- db $74,$75,$76,$76,$77,$78,$79,$79,$7a,$7b,$7c,$7c,$7d,$7e,$7f,$7f   ; 7_  
- db $80,$81,$82,$82,$83,$84,$85,$85,$86,$87,$88,$88,$89,$8a,$8b,$8b   ; 8_  
- db $8c,$8d,$8e,$8f,$8f,$90,$91,$92,$93,$93,$94,$95,$96,$97,$97,$98   ; 9_  
- db $99,$9a,$9b,$9b,$9c,$9d,$9e,$9f,$a0,$a0,$a1,$a2,$a3,$a4,$a5,$a5   ; A_  
- db $a6,$a7,$a8,$a9,$aa,$aa,$ab,$ac,$ad,$ae,$af,$b0,$b1,$b1,$b2,$b3   ; B_  
- db $b4,$b5,$b6,$b7,$b8,$b8,$b9,$ba,$bb,$bc,$bd,$be,$bf,$c0,$c0,$c1   ; C_  
- db $c2,$c3,$c4,$c5,$c6,$c7,$c8,$c9,$ca,$ca,$cb,$cc,$cd,$ce,$cf,$d0   ; D_  
- db $d1,$d2,$d3,$d4,$d5,$d6,$d7,$d8,$d9,$da,$da,$db,$dc,$dd,$de,$df   ; E_  
- db $e0,$e1,$e2,$e3,$e4,$e5,$e6,$e7,$e8,$e9,$ea,$eb,$ec,$ed,$ee,$00   ; F_  
		ENDIF
		End of INCLUDE
	DEFS of 0 bytes with value 00
6E00:		label EXP_TAB
6E00:00000000	DEFB of 16 bytes
6E04:00000001
6E08:01020408
6E0C:1124532E
6E10:6C5A3A08	DEFB of 16 bytes
6E14:10217F7F
6E18:7F7F7F7F
6E1C:7F7F7F7F
6E20:7F7F7F7F	DEFB of 16 bytes
6E24:7F7F7F7F
6E28:7F7F7F7F
6E2C:7F7F7F7F
6E30:7F7F7F7F	DEFB of 16 bytes
6E34:7F7F7F7F
6E38:7F7F7F7F
6E3C:7F7F7F7F
6E40:7F7F7F7F	DEFB of 16 bytes
6E44:7F7F7F7F
6E48:7F7F7F7F
6E4C:7F7F7F7F
6E50:7F7F7F7F	DEFB of 16 bytes
6E54:7F7F7F7F
6E58:7F7F7F7F
6E5C:7F7F7F7F
6E60:7F7F7F7F	DEFB of 16 bytes
6E64:7F7F7F7F
6E68:7F7F7F7F
6E6C:7F7F7F7F
6E70:00000000	DEFB of 16 bytes
6E74:00000000
6E78:00000000
6E7C:00000000
6E80:00000000	DEFB of 16 bytes
6E84:0000007F
6E88:7E7C7870
6E8C:62471B3C
6E90:0B163072	DEFB of 16 bytes
6E94:644B0000
6E98:00000000
6E9C:00000000
6EA0:00000000	DEFB of 16 bytes
6EA4:00000000
6EA8:00000000
6EAC:00000000
6EB0:00000000	DEFB of 16 bytes
6EB4:00000000
6EB8:00000000
6EBC:00000000
6EC0:00000000	DEFB of 16 bytes
6EC4:00000000
6EC8:00000000
6ECC:00000000
6ED0:00000000	DEFB of 16 bytes
6ED4:00000000
6ED8:00000000
6EDC:00000000
6EE0:00000000	DEFB of 16 bytes
6EE4:00000000
6EE8:00000000
6EEC:00000000
6EF0:00000000	DEFB of 16 bytes
6EF4:00000000
6EF8:00000000
6EFC:00000000
6F00:7F7F7F7F	DEFB of 16 bytes
6F04:7F7F7F7F
6F08:7F7F7F7F
6F0C:7F7F7F80
6F10:81848A96	DEFB of 16 bytes
6F14:ADDBFFFF
6F18:FFFFFFFF
6F1C:FFFFFFFF
6F20:FFFFFFFF	DEFB of 16 bytes
6F24:FFFFFFFF
6F28:FFFFFFFF
6F2C:FFFFFFFF
6F30:FFFFFFFF	DEFB of 16 bytes
6F34:FFFFFFFF
6F38:FFFFFFFF
6F3C:FFFFFFFF
6F40:FFFFFFFF	DEFB of 16 bytes
6F44:FFFFFFFF
6F48:FFFFFFFF
6F4C:FFFFFFFF
6F50:FFFFFFFF	DEFB of 16 bytes
6F54:FFFFFFFF
6F58:FFFFFFFF
6F5C:FFFFFFFF
6F60:FFFFFFFF	DEFB of 16 bytes
6F64:FFFFFFFF
6F68:FFFFFFFF
6F6C:FFFFFFFF
6F70:7F7F7F7F	DEFB of 16 bytes
6F74:7F7F7F7F
6F78:7F7F7F7F
6F7C:7F7F7F7F
6F80:7F7F7F7F	DEFB of 16 bytes
6F84:7F7F7F7E
6F88:7E7E7E7E
6F8C:7E7E7E7D
6F90:7C797367	DEFB of 16 bytes
6F94:50220000
6F98:00000000
6F9C:00000000
6FA0:00000000	DEFB of 16 bytes
6FA4:00000000
6FA8:00000000
6FAC:00000000
6FB0:00000000	DEFB of 16 bytes
6FB4:00000000
6FB8:00000000
6FBC:00000000
6FC0:00000000	DEFB of 16 bytes
6FC4:00000000
6FC8:00000000
6FCC:00000000
6FD0:00000000	DEFB of 16 bytes
6FD4:00000000
6FD8:00000000
6FDC:00000000
6FE0:00000000	DEFB of 16 bytes
6FE4:00000000
6FE8:00000000
6FEC:00000000
6FF0:00000000	DEFB of 16 bytes
6FF4:00000000
6FF8:00000000
6FFC:00000000
		ENDIF
		End of INCLUDE
		INCLUDE fdiv.asm
		IF (true)
		INCLUDE fdiv_pow2.asm
		IF (true)
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
7000:		label @FDIV_POW2
		IF (true)
7000:		label FDIV_POW2
		ENDIF
7000:7D		LD A, L
7001:A9		XOR C
7002:6F		LD L, A
7003:78		LD A, B
7004:94		SUB H
7005:380C	JR C, 7013
7007:C67F	ADD A, 7F
7009:67		LD H, A
700A:D0		RET NC
700B:		label FDIV_POW2_OVER
700B:26FF	LD H, FF
700D:7D		LD A, L
700E:F67F	OR 7F
7010:6F		LD L, A
		IF (false)
-         CALL    OVER_COL_WARNING    ;  3:17
		ENDIF
		IF (true)
7011:37		SCF
		ENDIF
7012:C9		RET
7013:		label FDIV_POW2_HL_GR
7013:C67F	ADD A, 7F
7015:67		LD H, A
7016:D8		RET C
7017:		label FDIV_POW2_UNDER
7017:2600	LD H, 00
7019:7D		LD A, L
701A:E680	AND 80
701C:6F		LD L, A
		IF (false)
-         CALL    UNDER_COL_WARNING   ;  3:17
		ENDIF
		IF (true)
701D:37		SCF
		ENDIF
701E:C9		RET
		ENDIF
		End of INCLUDE
		IF (true)
701F:		label FDIV_UNDERFLOW
701F:7B		LD A, E
7020:A9		XOR C
7021:E680	AND 80
7023:62		LD H, D
7024:6F		LD L, A
7025:37		SCF
7026:C9		RET
		ENDIF
7027:		label @FDIV
		IF (true)
7027:		label FDIV
		ENDIF
7027:7D		LD A, L
7028:87		ADD A, A
7029:28D5	JR Z, 7000
702B:3EFD	LD A, FD
702D:94		SUB H
702E:2662	LD H, 62
7030:5E		LD E, (HL)
7031:57		LD D, A
7032:3006	JR NC, 703A
7034:80		ADD A, B
7035:47		LD B, A
7036:1600	LD D, 00
		IF (true)
7038:30E5	JR NC, 701F
		INCLUDE fmul.asm
		IF (true)
703A:		label @FMUL
		IF (true)
703A:		label FMUL
		ENDIF
703A:79		LD A, C
703B:AB		XOR E
703C:F67F	OR 7F
703E:6F		LD L, A
703F:7A		LD A, D
7040:80		ADD A, B
7041:3815	JR C, 7058
7043:D67F	SUB 7F
7045:3015	JR NC, 705C
7047:3C		INC A
7048:2006	JR NZ, 7050
704A:14		INC D
704B:CD3A70	CALL 703A
704E:25		DEC H
704F:C8		RET Z
7050:		label FMULP_UNDERFLOW
7050:2600	LD H, 00
		IF (false)
-         CALL    UNDER_COL_WARNING   ;  3:17
		ENDIF
7052:7D		LD A, L
7053:E680	AND 80
7055:6F		LD L, A
		IF (true)
7056:37		SCF
		ENDIF
7057:C9		RET
7058:		label FMUL_C1
7058:D67F	SUB 7F
705A:3027	JR NC, 7083
705C:		label FMUL_NEXT
705C:67		LD H, A
705D:E5		PUSH HL
705E:CBB9	RES 7, C
7060:CBBB	RES 7, E
7062:79		LD A, C
7063:83		ADD A, E
7064:5F		LD E, A
7065:1665	LD D, 65
7067:91		SUB C
7068:91		SUB C
7069:6F		LD L, A
706A:2663	LD H, 63
706C:1A		LD A, (DE)
706D:86		ADD A, (HL)
706E:4F		LD C, A
706F:14		INC D
7070:1A		LD A, (DE)
7071:24		INC H
7072:8E		ADC A, (HL)
7073:F28770	JP P, 7087
7076:E1		POP HL
7077:24		INC H
7078:2809	JR Z, 7083
707A:A5		AND L
707B:6F		LD L, A
707C:79		LD A, C
707D:C640	ADD A, 40
707F:D0		RET NC
7080:2C		INC L
		IF (true)
7081:B7		OR A
		ENDIF
7082:C9		RET
7083:		label FMULP_OVERFLOW
7083:26FF	LD H, FF
		IF (false)
-         CALL    OVER_COL_WARNING    ;  3:17
		ENDIF
		IF (true)
7085:37		SCF
		ENDIF
7086:C9		RET
7087:		label FMULP_SAME_EXP
7087:CB11	RL C
7089:8F		ADC A, A
708A:E1		POP HL
708B:A5		AND L
708C:6F		LD L, A
708D:C9		RET
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
		ENDIF
		End of INCLUDE
		ELSE (false)
-         JR      c, @FMUL            ;  2:7/12       continues with FMUL (HL = BC * DE), DE = 1 / HL
- FDIV_UNDERFLOW:                     ;
-         LD      A, E                ;  1:4
-         XOR     C                   ;  1:4
-         AND     SIGN_MASK           ;  2:7
-         LD      H, D                ;  1:4
-         LD      L, A                ;  1:4
-         SCF                         ;  1:4          carry = error
-         RET                         ;  1:10         HL = 0000 0000 s000 0000
		ENDIF
		ENDIF
		End of INCLUDE
		INCLUDE fmul.asm
		IF (false)
- @FMUL:
-                    FMUL                ; *
-         LD      A, C                ;  1:4
-         XOR     E                   ;  1:4
-         OR      $FF - SIGN_MASK     ;  2:7
-         LD      L, A                ;  1:4          s111 1111
-         LD      A, D                ;  1:4
-         ADD     A, B                ;  1:4
-         JR      c, FMUL_C1          ;  2:12/7
-         SUB     BIAS                ;  2:7
-         JR      nc, FMUL_NEXT       ;  2:12/7
-         INC     A                   ;  1:4          $FF => $00?
-         JR      nz, FMULP_UNDERFLOW ;  2:12/7       no chance        
-         INC     D                   ;  1:4
-         CALL    FMUL                ;  3:17         recursion
-         DEC     H                   ;  1:4
-         RET     z                   ;  1:11/5      
- FMULP_UNDERFLOW:
-         LD      H, $00              ;  1:4          HL = 0000 0000 s000 0000
-         CALL    UNDER_COL_WARNING   ;  3:17
-         LD      A, L                ;  1:4          s111 1111
-         AND     SIGN_MASK           ;  2:7          
-         LD      L, A                ;  1:4
-         SCF                         ;  1:4          carry = error
-         RET                         ;  1:10
- FMUL_C1:
-         SUB     BIAS                ;  2:7
-         JR      nc, FMULP_OVERFLOW  ;  2:12/7        
- FMUL_NEXT:
-         LD      H, A                ;  1:4          new exponent
-         PUSH    HL                  ;  1:11
-         RES     7, C                ;  2:8
-         RES     7, E                ;  2:8
-         LD      A, C                ;  1:4
-         ADD     A, E                ;  1:4
-         LD      E, A                ;  1:4          E = A + B
-         LD      D, Tab_ApB_lo/256   ;  2:7          (DE) = Tab_ApB_lo
-         SUB     C                   ;  1:4
-         SUB     C                   ;  1:4
-         LD      L, A                ;  1:4          L = A - B
-         LD      H, Tab_AmB_lo/256   ;  2:7
-         LD      A, (DE)             ;  1:7
-         ADD     A, (HL)             ;  1:7
-         LD      C, A                ;  1:4
-         INC     D                   ;  1:4
-         LD      A, (DE)             ;  1:7
-         INC     H                   ;  1:4
-         ADC     A, (HL)             ;  1:7
-         JP      p, FMULP_SAME_EXP   ;  3:10
-         POP     HL                  ;  1:10
-         INC     H                   ;  1:4          exp++
-         JR      z, FMULP_OVERFLOW   ;  2:7/12
-         AND     L                   ;  1:4
-         LD      L, A                ;  1:4
-         LD      A, C                ;  1:4
-         ADD     A, $40              ;  2:7
-         RET     nc                  ;  1:11/5       RET with reset carry
-         INC     L                   ;  1:4          25%
-         OR      A                   ;  1:4          RET with reset carry
-         RET                         ;  1:10
- FMULP_OVERFLOW:
-         LD      H, $FF              ;  3:10
-         CALL    OVER_COL_WARNING    ;  3:17
-         SCF                         ;  1:4          carry = error
-         RET                         ;  1:10
- FMULP_SAME_EXP:                     ;               (ApB)+(AmB) >= $4000 => pricti: $0 (38.882446%)
-         RL      C                   ;  2:8          
-         ADC     A, A                ;  1:4
-         POP     HL                  ;  1:10         AC = 1mmm mmmm mmmm mmm0
-         AND     L                   ;  1:4          RET with reset carry
-         LD      L, A                ;  1:4
-         RET                         ;  1:10
-     include "color_flow_warning.asm"
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- 
		ENDIF
		End of INCLUDE
		INCLUDE fsub.asm
		IF (true)
708E:		label @FSUB
		IF (true)
708E:		label FSUB
		ENDIF
		IF (false)
-         LD      A, D                ;  1:4
-         XOR     SIGN_MASK           ;  2:7
-         LD      D, A                ;  1:4      DE = -DE
		ENDIF
		IF (true)
708E:7B		LD A, E
708F:EE80	XOR 80
7091:5F		LD E, A
		ENDIF
		IF (false)
-         .ERROR Unexpected value in SIGN_BIT!
		ENDIF
		IF (false)
-         .ERROR  You must exclude the file "fadd.asm" or include "fsub.asm" first
		ELSE (true)
		INCLUDE fadd.asm
		IF (true)
7092:		label @FADD
		IF (true)
7092:		label FADD
		ENDIF
		IF (false)
-         LD      A, H                ;  1:4
-         XOR     D                   ;  1:4
-         JP      m, FSUBP_FADD_OP_SGN;  3:10
		ENDIF
		IF (true)
7092:7D		LD A, L
7093:AB		XOR E
7094:FAE070	JP M, 70E0
		ENDIF
		IF (false)
-         .ERROR Unexpected value in SIGN_BIT!
		ENDIF
		IF (false)
-         .ERROR  You must exclude the file "faddp.asm" or include "fadd.asm" first
		ELSE (true)
		INCLUDE faddp.asm
		IF (true)
7097:		label @FADDP
		IF (true)
7097:		label FADDP
		ENDIF
7097:7C		LD A, H
7098:92		SUB D
7099:2834	JR Z, 70CF
709B:3003	JR NC, 70A0
709D:EB		EX DE, HL
709E:ED44	NEG
70A0:		label FADDP_HL_GR
70A0:FE09	CP 09
70A2:D0		RET NC
70A3:CBFB	SET 7, E
70A5:1D		DEC E
70A6:3D		DEC A
70A7:2805	JR Z, 70AE
70A9:47		LD B, A
70AA:		label FADDP_LOOP
70AA:CB3B	SRL E
70AC:10FC	DJNZ 70AA
70AE:		label FADDP_STOP
70AE:7D		LD A, L
70AF:87		ADD A, A
70B0:83		ADD A, E
70B1:300C	JR NC, 70BF
70B3:C602	ADD A, 02
70B5:1F		RRA
70B6:		label FADDP_EXP_PLUS
70B6:CB15	RL L
70B8:1F		RRA
70B9:6F		LD L, A
		IF (true)
70BA:B7		OR A
		ENDIF
70BB:24		INC H
70BC:C0		RET NZ
70BD:1817	JR 70D6
70BF:		label FADDP_SAME_EXP
		IF (true)
70BF:CB15	RL L
70C1:1F		RRA
70C2:6F		LD L, A
70C3:D0		RET NC
70C4:2C		INC L
70C5:AD		XOR L
70C6:F0		RET P
70C7:7D		LD A, L
70C8:EE80	XOR 80
70CA:6F		LD L, A
70CB:24		INC H
70CC:C0		RET NZ
70CD:1807	JR 70D6
		ELSE (false)
-         INC     A                   ;  1:4      rounding
-         JR      z, FADDP_EXP_PLUS   ;  2:12/7   A = 10 0000 0000 && carry = 0
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         RET                         ;  1:10
		ENDIF
70CF:		label FADDP_EQ_EXP
70CF:7D		LD A, L
70D0:83		ADD A, E
70D1:1F		RRA
70D2:6F		LD L, A
		IF (true)
70D3:B7		OR A
		ENDIF
70D4:24		INC H
70D5:C0		RET NZ
70D6:		label FADDP_OVERFLOW
70D6:25		DEC H
70D7:F67F	OR 7F
70D9:6F		LD L, A
		IF (false)
-         CALL    OVER_COL_WARNING    ;  3:17
		ENDIF
		IF (true)
70DA:37		SCF
		ENDIF
70DB:C9		RET
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
		ENDIF
		End of INCLUDE
		ENDIF
		INCLUDE fsubp.asm
		IF (true)
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
70DC:		label @FSUBP
		IF (true)
70DC:		label FSUBP
		ENDIF
70DC:7B		LD A, E
70DD:EE80	XOR 80
70DF:5F		LD E, A
70E0:		label FSUBP_FADD_OP_SGN
70E0:7C		LD A, H
70E1:92		SUB D
70E2:283E	JR Z, 7122
70E4:3003	JR NC, 70E9
70E6:EB		EX DE, HL
70E7:ED44	NEG
70E9:		label FSUBP_HL_GR
70E9:FE09	CP 09
70EB:3052	JR NC, 713F
70ED:47		LD B, A
70EE:7B		LD A, E
70EF:F680	OR 80
70F1:05		DEC B
70F2:2806	JR Z, 70FA
70F4:		label FSUBP_LOOP
70F4:B7		OR A
70F5:1F		RRA
70F6:10FC	DJNZ 70F4
70F8:CB10	RL B
70FA:		label FSUBP_NOLOOP
70FA:5F		LD E, A
70FB:7D		LD A, L
70FC:87		ADD A, A
70FD:93		SUB E
70FE:300F	JR NC, 710F
7100:54		LD D, H
7101:		label FSUBP_NORM
7101:25		DEC H
7102:87		ADD A, A
7103:30FC	JR NC, 7101
7105:90		SUB B
7106:CB15	RL L
7108:1F		RRA
7109:6F		LD L, A
710A:7A		LD A, D
710B:94		SUB H
710C:D0		RET NC
710D:1828	JR 7137
710F:		label FSUBP_SAME_EXP
710F:CB15	RL L
7111:1F		RRA
7112:6F		LD L, A
7113:8F		ADC A, A
		IF (true)
7114:B7		OR A
		ENDIF
7115:C0		RET NZ
7116:05		DEC B
7117:C0		RET NZ
7118:7D		LD A, L
7119:F67F	OR 7F
711B:6F		LD L, A
711C:7C		LD A, H
711D:25		DEC H
711E:94		SUB H
711F:D0		RET NC
7120:1815	JR 7137
7122:		label FSUBP_EQ_EXP
7122:7D		LD A, L
7123:93		SUB E
7124:87		ADD A, A
7125:2810	JR Z, 7137
7127:3803	JR C, 712C
7129:EB		EX DE, HL
712A:ED44	NEG
712C:		label FSUBP_EQ_LOOP
712C:25		DEC H
712D:87		ADD A, A
712E:30FC	JR NC, 712C
7130:CB15	RL L
7132:1F		RRA
7133:6F		LD L, A
7134:7A		LD A, D
7135:94		SUB H
7136:D0		RET NC
7137:		label FSUBP_UNDERFLOW
7137:2600	LD H, 00
7139:7D		LD A, L
713A:E680	AND 80
713C:6F		LD L, A
		IF (false)
-         CALL    UNDER_COL_WARNING   ;  3:17
		ENDIF
		IF (true)
713D:37		SCF
		ENDIF
713E:C9		RET
713F:		label FSUBP_TOOBIG
713F:C0		RET NZ
7140:7D		LD A, L
		IF (true)
7141:E67F	AND 7F
7143:C0		RET NZ
7144:7D		LD A, L
7145:F67F	OR 7F
7147:6F		LD L, A
		ELSE (false)
-         ADD     A, A                ;  1:4      sign out
-         RET     nz                  ;  1:11/5   HL_mant > 1.0           => HL - DE = HL
-         DEC     A                   ;  1:4      $00 => $ff
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
		ENDIF
7148:25		DEC H
7149:C9		RET
		ENDIF
		End of INCLUDE
		ENDIF
		End of INCLUDE
		ENDIF
		ENDIF
		End of INCLUDE
		INCLUDE fadd.asm
		IF (false)
- @FADD:
-                     FADD                ; *
-         LD      A, H                ;  1:4
-         XOR     D                   ;  1:4
-         JP      m, FSUBP_FADD_OP_SGN;  3:10
-         LD      A, L                ;  1:4
-         XOR     E                   ;  1:4
-         JP      m, FSUBP_FADD_OP_SGN;  3:10
-         .ERROR Unexpected value in SIGN_BIT!
-         .ERROR  You must exclude the file "faddp.asm" or include "fadd.asm" first
-         include "faddp.asm"
- @FADDP:
-                    FADDP                ; *
-         LD      A, H                ;  1:4
-         SUB     D                   ;  1:4
-         JR      z, FADDP_EQ_EXP     ;  2:7/12
-         JR      nc, FADDP_HL_GR     ;  2:7/12   
-         EX      DE, HL              ;  1:4      
-         NEG                         ;  2:8
- FADDP_HL_GR:
-         CP      2 + MANT_BITS       ;  2:7      pri posunu o NEUKLADANY_BIT+BITS_MANTIS uz mantisy nemaji prekryt, ale jeste se muze zaokrouhlovat 
-         RET     nc                  ;  1:5/11   HL + DE = HL
-         SET     7, E                ;  2:8
-         DEC     E                   ;  1:4
-         DEC     A                   ;  1:4
-         JR      z, FADDP_STOP       ;  2:12/7
-         LD      B, A                ;  1:4
- FADDP_LOOP:
-         SRL     E                   ;  2:8
-         DJNZ    FADDP_LOOP          ;  2:13/8
- FADDP_STOP:
-         LD      A, L                ;  1:4
-         ADD     A, A                ;  1:4      A = 01 mmmm mmm0, kvuli zaokrouhleni potrebujeme znat hodnotu prvniho bitu za desetinou carkou 
-         ADD     A, E                ;  1:4      soucet mantis
-         JR      nc, FADDP_SAME_EXP  ;  2:12/7
-         ADD     A, $02              ;  2:7      rounding
-         RRA                         ;  1:4      A = 01 cmmm mmmr
- FADDP_EXP_PLUS:
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         INC     H                   ;  1:4      exp++
-         RET     nz                  ;  1:11/5
-         JR      FADDP_OVERFLOW      ;  2:12
- FADDP_SAME_EXP:                     ;           A = 01 mmmm mmmr, r = rounding bit
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         RET     nc                  ;  1:11/5   50%
-         INC     L                   ;  1:4      rounding
-         XOR     L                   ;  1:4      clear carry
-         RET     p                   ;  1.11/5   49% same sign
-         LD      A, L                ;  1:4      
-         XOR     SIGN_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         INC     H                   ;  1:4      exp++
-         RET     nz                  ;  1:11/5
-         JR      FADDP_OVERFLOW      ;  2:12        
-         INC     A                   ;  1:4      rounding
-         JR      z, FADDP_EXP_PLUS   ;  2:12/7   A = 10 0000 0000 && carry = 0
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         RET                         ;  1:10
- FADDP_EQ_EXP:                       ;           HL exp = DE exp
-         LD      A, L                ;  1:4        1mmm mmmm    0mmm mmmm
-         ADD     A, E                ;  1:4       +1mmm mmmm    0mmm mmmm
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         INC     H                   ;  1:4      exp++
-         RET     nz                  ;  1:11/5
- FADDP_OVERFLOW:
-         DEC     H                   ;  1:4      $00 => $FF
-         OR      SIGN_XOR            ;  2:7
-         LD      L, A                ;  1:4
-         CALL    OVER_COL_WARNING    ;  3:17
-         SCF                         ;  1:4      carry = error
-         RET                         ;  1:10
-     include "color_flow_warning.asm"
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- 
- 
-     include "fsubp.asm"
- include "color_flow_warning.asm"
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- 
- @FSUBP:
-                    FSUBP                ; *
-         LD      A, E                ;  1:4
-         XOR     SIGN_MASK           ;  2:7
-         LD      E, A                ;  1:4
- FSUBP_FADD_OP_SGN:
-         LD      A, H                ;  1:4
-         SUB     D                   ;  1:4
-         JR      z, FSUBP_EQ_EXP     ;  2:12/7
-         JR      nc, FSUBP_HL_GR     ;  2:12/7
-         EX      DE, HL              ;  1:4
-         NEG                         ;  2:8
- FSUBP_HL_GR:
-         CP      2 + MANT_BITS       ;  2:7      pri posunu vetsim nez o MANT_BITS + NEUKLADANY_BIT + ZAOKROUHLOVACI_BIT uz mantisy nemaji prekryt
-         JR      nc, FSUBP_TOOBIG    ;  2:12/7   HL - DE = HL
-         LD      B, A                ;  1:4
-         LD      A, E                ;  1:4
-         OR      SIGN_MASK           ;  2:7
-         DEC     B                   ;  1:4
-         JR      z, FSUBP_NOLOOP     ;  2:12/7
- FSUBP_LOOP:
-         OR      A                   ;  1:4
-         RRA                         ;  1:4
-         DJNZ    FSUBP_LOOP          ;  2:13/8
-         RL      B                   ;  2:8      B = rounding 0.25
- FSUBP_NOLOOP:                       ;
-         LD      E, A                ;  1:4
-         LD      A, L                ;  1:4
-         ADD     A, A                ;  1:4
-         SUB     E                   ;  1:4
-         JR      nc, FSUBP_SAME_EXP  ;  2:12/7
-         LD      D, H                ;  1:4      save exp
- FSUBP_NORM:                         ;           normalizace cisla
-         DEC     H                   ;  1:4      exp--
-         ADD     A, A                ;  1:4
-         JR      nc, FSUBP_NORM      ;  2:7/12
-         SUB     B                   ;  1:4
-         RL      L                   ;  2:8      sign out  
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         LD      A, D                ;  1:4
-         SUB     H                   ;  1:4
-         RET     nc                  ;  1:11/5   RET with reset carry
-         JR      FSUBP_UNDERFLOW     ;  2:12
- FSUBP_SAME_EXP:                     ;  2:8      reset carry
-         RL      L                   ;  2:8      sign out  
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         ADC     A, A                ;  1:4      
-         OR      A                   ;  1:4
-         RET     nz                  ;  1:11/5
-         DEC     B                   ;  1:4
-         RET     nz                  ;  1:11/5
-         LD      A, L                ;  1:4
-         OR      MANT_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         LD      A, H                ;  1:4
-         DEC     H                   ;  1:4
-         SUB     H                   ;  1:4
-         RET     nc                  ;  1:11/5   RET with reset carry
-         JR      FSUBP_UNDERFLOW     ;  2:12
- FSUBP_EQ_EXP:
-         LD      A, L                ;  1:4
-         SUB     E                   ;  1:4
-         ADD     A, A                ;  1:4      delete sign
-         JR      z, FSUBP_UNDERFLOW  ;  2:12/7   (HL_exp = DE_exp && HL_mant = DE_mant) => HL = -DE
-         JR      c, FSUBP_EQ_LOOP    ;  2:12/7
-         EX      DE, HL              ;  1:4
-         NEG                         ;  2:8
- FSUBP_EQ_LOOP:                      ;           normalizace cisla
-         DEC     H                   ;  1:4      exp--
-         ADD     A, A                ;  1:4      musime posouvat minimalne jednou, protoze NEUKLADANY_BIT byl vynulovan
-         JR      nc, FSUBP_EQ_LOOP   ;  2:7/12
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         LD      A, D                ;  1:4      old exp
-         SUB     H                   ;  1:4      -new exp
-         RET     nc                  ;  1:11/5
- FSUBP_UNDERFLOW:
-         LD      H, $00              ;  2:7      sign only
-         LD      A, L                ;  1:4
-         AND     SIGN_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         CALL    UNDER_COL_WARNING   ;  3:17
-         SCF                         ;  1:4      carry = error
-         RET                         ;  1:10
- FSUBP_TOOBIG:
-         RET     nz                  ;  1:11/5   HL_exp - DE_exp > 7+1+1 => HL - DE = HL
-         LD      A, L                ;  1:4
-         AND     MANT_MASK           ;  2:7
-         RET     nz                  ;  1:11/5   HL_mant > 1.0           => HL - DE = HL
-         LD      A, L                ;  1:4
-         OR      MANT_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         ADD     A, A                ;  1:4      sign out
-         RET     nz                  ;  1:11/5   HL_mant > 1.0           => HL - DE = HL
-         DEC     A                   ;  1:4      $00 => $ff
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         DEC     H                   ;  1:4      HL_exp = 7 + 1 + DE_exp  => HL_exp >= 8 => not underflow
-         RET                         ;  1:10
- 
		ENDIF
		End of INCLUDE
		INCLUDE fmod.asm
		IF (true)
714A:		label @FMOD
		IF (true)
714A:		label FMOD
		ENDIF
		INCLUDE mcmpa.asm
		IF (true)
Defining MACRO MCMPA
Params: reg1_hi, reg1_lo, reg2_hi, reg2_lo
		ENDIF
		End of INCLUDE
Expanding MACRO MCMPA
reg1_hi= H 
reg1_lo= L 
reg2_hi= B 
reg2_lo= C 
IF SIGN_BIT > 0007 
		IF (false)
-         LD      A, reg1_hi          ;  1:4
-         XOR     reg2_hi             ;  1:4
-         AND     SIGN_MASK           ;  2:7
-         XOR     reg1_hi             ;  1:4      A = 2111 1111
-         SUB     reg2_hi             ;  1:4
-         JP      nz, $+5             ;  3:10    
-         JR      nz, $+4             ;  2:12/7
-         LD      A, reg1_lo          ;  1:4
		ELSE (true)
LD A , reg1_hi 
714A:7C		LD A, H
SUB reg2_hi 
714B:90		SUB B
IF 0000 
		IF (false)
-         JP      nz, $+9             ;  3:10
		ELSE (true)
JR NZ , $ + 0008 
714C:2006	JR NZ, 7154
ENDIF 
		ENDIF
LD A , reg1_lo 
714E:7D		LD A, L
XOR reg2_lo 
714F:A9		XOR C
AND SIGN_MASK 
7150:E680	AND 80
XOR reg1_lo 
7152:AD		XOR L
ENDIF 
		ENDIF
SUB reg2_lo 
7153:91		SUB C
ENDM 
		ENDM
End of MACRO MCMPA
7154:DA6071	JP C, 7160
7157:60		LD H, B
7158:69		LD L, C
7159:C0		RET NZ
715A:67		LD H, A
715B:79		LD A, C
715C:E680	AND 80
715E:6F		LD L, A
715F:C9		RET
7160:		label FMOD_BC_GR
7160:54		LD D, H
7161:60		LD H, B
7162:7D		LD A, L
7163:F680	OR 80
7165:5F		LD E, A
7166:79		LD A, C
7167:E680	AND 80
7169:6F		LD L, A
716A:79		LD A, C
716B:87		ADD A, A
716C:4F		LD C, A
716D:7A		LD A, D
716E:94		SUB H
716F:79		LD A, C
7170:2819	JR Z, 718B
7172:		label FMOD_SUB
7172:93		SUB E
7173:30FD	JR NC, 7172
7175:		label FMOD_NORM
7175:24		INC H
7176:		label FMOD_NORM_LOOP
7176:25		DEC H
		IF (false)
-         RET     z                   ;           
		ELSE (true)
7177:281C	JR Z, 7195
		ENDIF
7179:87		ADD A, A
717A:30FA	JR NC, 7176
717C:25		DEC H
717D:4F		LD C, A
717E:7A		LD A, D
717F:BC		CP H
7180:79		LD A, C
7181:38EF	JR C, 7172
7183:2806	JR Z, 718B
7185:		label FMOD_EXIT
7185:CB15	RL L
7187:1F		RRA
		IF (true)
7188:B7		OR A
		ENDIF
7189:6F		LD L, A
718A:C9		RET
718B:		label FMOD_SAME_EXP
718B:CB23	SLA E
718D:BB		CP E
718E:38F5	JR C, 7185
7190:93		SUB E
7191:20E2	JR NZ, 7175
7193:67		LD H, A
7194:C9		RET
7195:		label FMOD_UNDERFLOW
		IF (false)
-         CALL    UNDER_COL_WARNING   ;  3:17
		ENDIF
		IF (true)
7195:37		SCF
		ENDIF
7196:C9		RET
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
		ENDIF
		End of INCLUDE
		INCLUDE fpow2.asm
		IF (true)
7197:		label @FPOW2
		IF (true)
7197:		label FPOW2
		ENDIF
7197:CBBD	RES 7, L
7199:3E34	LD A, 34
719B:BD		CP L
719C:7C		LD A, H
719D:8F		ADC A, A
719E:2668	LD H, 68
71A0:6E		LD L, (HL)
71A1:3808	JR C, 71AB
71A3:D67F	SUB 7F
71A5:67		LD H, A
71A6:D0		RET NC
71A7:		label FPOW2_UNDERFLOW
71A7:210000	LD HL, 0000
		IF (false)
-         CALL    UNDER_COL_WARNING   ;  3:17
		ENDIF
71AA:C9		RET
71AB:		label FPOW2_HI
71AB:D67F	SUB 7F
71AD:67		LD H, A
		IF (true)
71AE:3F		CCF
71AF:D0		RET NC
		ELSE (false)
-         RET     c                   ;  1:11/5
		ENDIF
71B0:		label FPOW2_OVERFLOW
71B0:217FFF	LD HL, FF7F
		IF (false)
-         CALL    OVER_COL_WARNING    ;  3:17
		ENDIF
		IF (true)
71B3:37		SCF
		ENDIF
71B4:C9		RET
		IF (true)
71B5:		label FPOW2_USE_FMUL
71B5:C5		PUSH BC
71B6:D5		PUSH DE
71B7:44		LD B, H
71B8:4D		LD C, L
71B9:EB		EX DE, HL
71BA:CD3A70	CALL 703A
71BD:D1		POP DE
71BE:C1		POP BC
71BF:C9		RET
		ENDIF
		ENDIF
		End of INCLUDE
		INCLUDE fsqrt.asm
		IF (true)
71C0:		label @FSQRT
		IF (true)
71C0:		label FSQRT
		ENDIF
71C0:CB25	SLA L
71C2:7C		LD A, H
71C3:C67F	ADD A, 7F
71C5:1F		RRA
71C6:CB1D	RR L
71C8:2667	LD H, 67
71CA:6E		LD L, (HL)
71CB:67		LD H, A
71CC:C9		RET
		ENDIF
		End of INCLUDE
		INCLUDE frac.asm
		IF (true)
71CD:		label @FRAC
		IF (true)
71CD:		label FRAC
		ENDIF
71CD:7C		LD A, H
71CE:FE86	CP 86
		IF (false)
-         JR      nc, FINT_ZERO       ;           Already integer
		ELSE (true)
71D0:3018	JR NC, 71EA
		ENDIF
71D2:D67F	SUB 7F
71D4:D8		RET C
71D5:3C		INC A
71D6:47		LD B, A
71D7:7D		LD A, L
71D8:87		ADD A, A
71D9:		label FRAC_LOOP
71D9:25		DEC H
71DA:87		ADD A, A
71DB:10FC	DJNZ 71D9
71DD:3806	JR C, 71E5
		IF (false)
-         JR      z, FINT_ZERO        ;
		ELSE (true)
71DF:2809	JR Z, 71EA
		ENDIF
71E1:		label FRAC_LOOP2
71E1:25		DEC H
71E2:87		ADD A, A
71E3:30FC	JR NC, 71E1
71E5:		label FRAC_SIGN
71E5:CB15	RL L
71E7:1F		RRA
71E8:6F		LD L, A
71E9:C9		RET
		IF (true)
71EA:		label FRAC_ZERO
71EA:210000	LD HL, 0000
71ED:C9		RET
		ENDIF
		ENDIF
		End of INCLUDE
		INCLUDE fint.asm
		IF (true)
71EE:		label @FINT
		IF (true)
71EE:		label FINT
		ENDIF
71EE:7C		LD A, H
71EF:D67F	SUB 7F
		IF (true)
71F1:38F7	JR C, 71EA
		ELSE (false)
-         JR      c, FINT_ZERO        ;  2:12/7   Completely fractional
		ENDIF
71F3:D607	SUB 07
71F5:D0		RET NC
71F6:ED44	NEG
71F8:47		LD B, A
71F9:3EFF	LD A, FF
71FB:		label FINT_LOOP
71FB:87		ADD A, A
71FC:10FD	DJNZ 71FB
71FE:A5		AND L
71FF:6F		LD L, A
7200:C9		RET
		IF (false)
- FINT_ZERO:
-         LD      HL, FPMIN           ; -0???
-         RET
		ENDIF
		ENDIF
		End of INCLUDE
		INCLUDE fwld.asm
		IF (true)
7201:		label @FWLD
		IF (true)
7201:		label FWLD
		ENDIF
7201:7C		LD A, H
7202:B7		OR A
7203:2816	JR Z, 721B
7205:3E8F	LD A, 8F
7207:		label FWLD_NORM
7207:29		ADD HL, HL
7208:3D		DEC A
7209:D20772	JP NC, 7207
720C:CB3C	SRL H
720E:3F		CCF
720F:CB1D	RR L
7211:6C		LD L, H
7212:67		LD H, A
7213:F8		RET M
7214:C8		RET Z
7215:2C		INC L
7216:F0		RET P
7217:24		INC H
7218:2E00	LD L, 00
721A:C9		RET
721B:		label FWLD_BYTE
721B:B5		OR L
721C:C8		RET Z
721D:2687	LD H, 87
721F:		label FWLD_BYTE_NORM
721F:25		DEC H
7220:87		ADD A, A
7221:30FC	JR NC, 721F
7223:0F		RRCA
7224:6F		LD L, A
7225:C9		RET
		ENDIF
		End of INCLUDE
		INCLUDE fwst.asm
		IF (true)
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
7226:		label @FWST
		IF (true)
7226:		label FWST
		ENDIF
7226:CBFD	SET 7, L
7228:7C		LD A, H
7229:FE8F	CP 8F
722B:301E	JR NC, 724B
722D:D67E	SUB 7E
722F:381F	JR C, 7250
		IF (false)
-         LD      B, A                ;  1:4
-         LD      A, L                ;  1:4
-         LD      HL, $0000           ;  3:10
-         JR      z, FWST_ROUNDING    ;  2:7/12
-         ADD     A, A                ;  1:4
-         ADC     HL, HL              ;  2:15
-         DJNZ    $-3                 ;  2:13/8
- FWST_ROUNDING:        
-         ADD     A, A                ;  1:4
-         RET     nc                  ;  1:11/5
-         OR      A                   ;  1:4          reset carry
-         RET     z                   ;  1:11/5
-         INC     HL                  ;  1:6
-         RET                         ;  1:10
		ELSE (true)
7231:2600	LD H, 00
7233:47		LD B, A
7234:2807	JR Z, 723D
7236:D608	SUB 08
7238:300B	JR NC, 7245
723A:29		ADD HL, HL
723B:10FD	DJNZ 723A
723D:		label FWST_ROUNDING
723D:7D		LD A, L
723E:C67F	ADD A, 7F
7240:7C		LD A, H
7241:60		LD H, B
		IF (true)
7242:88		ADC A, B
7243:6F		LD L, A
		ELSE (false)
-         RET     nc                  ;  1:5/11
-         INC     L                   ;  1:4
		ENDIF
7244:C9		RET
7245:		label FWST_256PLUS
7245:C8		RET Z
7246:47		LD B, A
7247:29		ADD HL, HL
7248:10FD	DJNZ 7247
724A:C9		RET
		ENDIF
724B:		label FWST_OVERFLOW
		IF (false)
-         CALL    OVER_COL_WARNING    ;  3:17
		ENDIF
724B:21FFFF	LD HL, FFFF
		IF (true)
724E:37		SCF
		ENDIF
724F:C9		RET
7250:		label FWST_ZERO
		IF (true)
7250:AF		XOR A
7251:67		LD H, A
7252:6F		LD L, A
		ELSE (false)
-         LD      HL, $0000           ;  3:10    
		ENDIF
7253:C9		RET
		ENDIF
		End of INCLUDE
		INCLUDE fbld.asm
		IF (true)
7254:		label @FBLD
		IF (true)
7254:		label FBLD
		ENDIF
		IF (true)
FBLD_D		EQU 0086
7254:1686	LD D, 86
7256:		label FBLD_X
7256:87		ADD A, A
7257:3806	JR C, 725F
		ELSE (false)
-         FBLD_D  EQU     BIAS+8
-         LD      D, FBLD_D           ;  2:7
- FBLD_X:
-         OR      A, A                ;  1:4
		ENDIF
7259:2807	JR Z, 7262
725B:		label FBLD_LOOP
725B:15		DEC D
725C:87		ADD A, A
725D:30FC	JR NC, 725B
725F:		label FBLD_ALIGNED
725F:0F		RRCA
7260:5F		LD E, A
7261:C9		RET
7262:		label FBLD_OUT_ZERO
7262:57		LD D, A
7263:5F		LD E, A
7264:C9		RET
		ENDIF
		End of INCLUDE
		INCLUDE fln.asm
		IF (true)
		INCLUDE fadd.asm
		IF (false)
- @FADD:
-                     FADD                ; *
-         LD      A, H                ;  1:4
-         XOR     D                   ;  1:4
-         JP      m, FSUBP_FADD_OP_SGN;  3:10
-         LD      A, L                ;  1:4
-         XOR     E                   ;  1:4
-         JP      m, FSUBP_FADD_OP_SGN;  3:10
-         .ERROR Unexpected value in SIGN_BIT!
-         .ERROR  You must exclude the file "faddp.asm" or include "fadd.asm" first
-         include "faddp.asm"
- @FADDP:
-                    FADDP                ; *
-         LD      A, H                ;  1:4
-         SUB     D                   ;  1:4
-         JR      z, FADDP_EQ_EXP     ;  2:7/12
-         JR      nc, FADDP_HL_GR     ;  2:7/12   
-         EX      DE, HL              ;  1:4      
-         NEG                         ;  2:8
- FADDP_HL_GR:
-         CP      2 + MANT_BITS       ;  2:7      pri posunu o NEUKLADANY_BIT+BITS_MANTIS uz mantisy nemaji prekryt, ale jeste se muze zaokrouhlovat 
-         RET     nc                  ;  1:5/11   HL + DE = HL
-         SET     7, E                ;  2:8
-         DEC     E                   ;  1:4
-         DEC     A                   ;  1:4
-         JR      z, FADDP_STOP       ;  2:12/7
-         LD      B, A                ;  1:4
- FADDP_LOOP:
-         SRL     E                   ;  2:8
-         DJNZ    FADDP_LOOP          ;  2:13/8
- FADDP_STOP:
-         LD      A, L                ;  1:4
-         ADD     A, A                ;  1:4      A = 01 mmmm mmm0, kvuli zaokrouhleni potrebujeme znat hodnotu prvniho bitu za desetinou carkou 
-         ADD     A, E                ;  1:4      soucet mantis
-         JR      nc, FADDP_SAME_EXP  ;  2:12/7
-         ADD     A, $02              ;  2:7      rounding
-         RRA                         ;  1:4      A = 01 cmmm mmmr
- FADDP_EXP_PLUS:
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         INC     H                   ;  1:4      exp++
-         RET     nz                  ;  1:11/5
-         JR      FADDP_OVERFLOW      ;  2:12
- FADDP_SAME_EXP:                     ;           A = 01 mmmm mmmr, r = rounding bit
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         RET     nc                  ;  1:11/5   50%
-         INC     L                   ;  1:4      rounding
-         XOR     L                   ;  1:4      clear carry
-         RET     p                   ;  1.11/5   49% same sign
-         LD      A, L                ;  1:4      
-         XOR     SIGN_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         INC     H                   ;  1:4      exp++
-         RET     nz                  ;  1:11/5
-         JR      FADDP_OVERFLOW      ;  2:12        
-         INC     A                   ;  1:4      rounding
-         JR      z, FADDP_EXP_PLUS   ;  2:12/7   A = 10 0000 0000 && carry = 0
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         RET                         ;  1:10
- FADDP_EQ_EXP:                       ;           HL exp = DE exp
-         LD      A, L                ;  1:4        1mmm mmmm    0mmm mmmm
-         ADD     A, E                ;  1:4       +1mmm mmmm    0mmm mmmm
-         RRA                         ;  1:4      sign in && shift       
-         LD      L, A                ;  1:4
-         OR      A                   ;  1:4      RET with reset carry
-         INC     H                   ;  1:4      exp++
-         RET     nz                  ;  1:11/5
- FADDP_OVERFLOW:
-         DEC     H                   ;  1:4      $00 => $FF
-         OR      SIGN_XOR            ;  2:7
-         LD      L, A                ;  1:4
-         CALL    OVER_COL_WARNING    ;  3:17
-         SCF                         ;  1:4      carry = error
-         RET                         ;  1:10
-     include "color_flow_warning.asm"
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- 
- 
-     include "fsubp.asm"
- include "color_flow_warning.asm"
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- 
- @FSUBP:
-                    FSUBP                ; *
-         LD      A, E                ;  1:4
-         XOR     SIGN_MASK           ;  2:7
-         LD      E, A                ;  1:4
- FSUBP_FADD_OP_SGN:
-         LD      A, H                ;  1:4
-         SUB     D                   ;  1:4
-         JR      z, FSUBP_EQ_EXP     ;  2:12/7
-         JR      nc, FSUBP_HL_GR     ;  2:12/7
-         EX      DE, HL              ;  1:4
-         NEG                         ;  2:8
- FSUBP_HL_GR:
-         CP      2 + MANT_BITS       ;  2:7      pri posunu vetsim nez o MANT_BITS + NEUKLADANY_BIT + ZAOKROUHLOVACI_BIT uz mantisy nemaji prekryt
-         JR      nc, FSUBP_TOOBIG    ;  2:12/7   HL - DE = HL
-         LD      B, A                ;  1:4
-         LD      A, E                ;  1:4
-         OR      SIGN_MASK           ;  2:7
-         DEC     B                   ;  1:4
-         JR      z, FSUBP_NOLOOP     ;  2:12/7
- FSUBP_LOOP:
-         OR      A                   ;  1:4
-         RRA                         ;  1:4
-         DJNZ    FSUBP_LOOP          ;  2:13/8
-         RL      B                   ;  2:8      B = rounding 0.25
- FSUBP_NOLOOP:                       ;
-         LD      E, A                ;  1:4
-         LD      A, L                ;  1:4
-         ADD     A, A                ;  1:4
-         SUB     E                   ;  1:4
-         JR      nc, FSUBP_SAME_EXP  ;  2:12/7
-         LD      D, H                ;  1:4      save exp
- FSUBP_NORM:                         ;           normalizace cisla
-         DEC     H                   ;  1:4      exp--
-         ADD     A, A                ;  1:4
-         JR      nc, FSUBP_NORM      ;  2:7/12
-         SUB     B                   ;  1:4
-         RL      L                   ;  2:8      sign out  
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         LD      A, D                ;  1:4
-         SUB     H                   ;  1:4
-         RET     nc                  ;  1:11/5   RET with reset carry
-         JR      FSUBP_UNDERFLOW     ;  2:12
- FSUBP_SAME_EXP:                     ;  2:8      reset carry
-         RL      L                   ;  2:8      sign out  
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         ADC     A, A                ;  1:4      
-         OR      A                   ;  1:4
-         RET     nz                  ;  1:11/5
-         DEC     B                   ;  1:4
-         RET     nz                  ;  1:11/5
-         LD      A, L                ;  1:4
-         OR      MANT_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         LD      A, H                ;  1:4
-         DEC     H                   ;  1:4
-         SUB     H                   ;  1:4
-         RET     nc                  ;  1:11/5   RET with reset carry
-         JR      FSUBP_UNDERFLOW     ;  2:12
- FSUBP_EQ_EXP:
-         LD      A, L                ;  1:4
-         SUB     E                   ;  1:4
-         ADD     A, A                ;  1:4      delete sign
-         JR      z, FSUBP_UNDERFLOW  ;  2:12/7   (HL_exp = DE_exp && HL_mant = DE_mant) => HL = -DE
-         JR      c, FSUBP_EQ_LOOP    ;  2:12/7
-         EX      DE, HL              ;  1:4
-         NEG                         ;  2:8
- FSUBP_EQ_LOOP:                      ;           normalizace cisla
-         DEC     H                   ;  1:4      exp--
-         ADD     A, A                ;  1:4      musime posouvat minimalne jednou, protoze NEUKLADANY_BIT byl vynulovan
-         JR      nc, FSUBP_EQ_LOOP   ;  2:7/12
-         RL      L                   ;  2:8      sign out
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         LD      A, D                ;  1:4      old exp
-         SUB     H                   ;  1:4      -new exp
-         RET     nc                  ;  1:11/5
- FSUBP_UNDERFLOW:
-         LD      H, $00              ;  2:7      sign only
-         LD      A, L                ;  1:4
-         AND     SIGN_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         CALL    UNDER_COL_WARNING   ;  3:17
-         SCF                         ;  1:4      carry = error
-         RET                         ;  1:10
- FSUBP_TOOBIG:
-         RET     nz                  ;  1:11/5   HL_exp - DE_exp > 7+1+1 => HL - DE = HL
-         LD      A, L                ;  1:4
-         AND     MANT_MASK           ;  2:7
-         RET     nz                  ;  1:11/5   HL_mant > 1.0           => HL - DE = HL
-         LD      A, L                ;  1:4
-         OR      MANT_MASK           ;  2:7
-         LD      L, A                ;  1:4
-         ADD     A, A                ;  1:4      sign out
-         RET     nz                  ;  1:11/5   HL_mant > 1.0           => HL - DE = HL
-         DEC     A                   ;  1:4      $00 => $ff
-         RRA                         ;  1:4      sign in
-         LD      L, A                ;  1:4
-         DEC     H                   ;  1:4      HL_exp = 7 + 1 + DE_exp  => HL_exp >= 8 => not underflow
-         RET                         ;  1:10
- 
		ENDIF
		End of INCLUDE
7265:		label @FLN
		IF (true)
7265:		label FLN
		ENDIF
		IF (true)
7265:7C		LD A, H
7266:D67D	SUB 7D
7268:CB1F	RR A
726A:2816	JR Z, 7282
		ENDIF
726C:7D		LD A, L
726D:6C		LD L, H
726E:266B	LD H, 6B
7270:56		LD D, (HL)
7271:25		DEC H
7272:5E		LD E, (HL)
7273:87		ADD A, A
7274:2815	JR Z, 728B
7276:25		DEC H
7277:6F		LD L, A
7278:7E		LD A, (HL)
7279:2C		INC L
727A:66		LD H, (HL)
727B:6F		LD L, A
727C:7A		LD A, D
727D:B3		OR E
727E:C29270	JP NZ, 7092
7281:C9		RET
		IF (true)
7282:		label FLN_FIX
7282:CE6C	ADC A, 6C
7284:67		LD H, A
7285:CB25	SLA L
7287:5E		LD E, (HL)
7288:2C		INC L
7289:56		LD D, (HL)
		IF (true)
728A:B7		OR A
		ENDIF
		ENDIF
728B:		label FLN_NO_ADD
728B:EB		EX DE, HL
728C:C9		RET
		ENDIF
		End of INCLUDE
		INCLUDE fexp.asm
		IF (true)
		INCLUDE fmul.asm
		IF (false)
- @FMUL:
-                    FMUL                ; *
-         LD      A, C                ;  1:4
-         XOR     E                   ;  1:4
-         OR      $FF - SIGN_MASK     ;  2:7
-         LD      L, A                ;  1:4          s111 1111
-         LD      A, D                ;  1:4
-         ADD     A, B                ;  1:4
-         JR      c, FMUL_C1          ;  2:12/7
-         SUB     BIAS                ;  2:7
-         JR      nc, FMUL_NEXT       ;  2:12/7
-         INC     A                   ;  1:4          $FF => $00?
-         JR      nz, FMULP_UNDERFLOW ;  2:12/7       no chance        
-         INC     D                   ;  1:4
-         CALL    FMUL                ;  3:17         recursion
-         DEC     H                   ;  1:4
-         RET     z                   ;  1:11/5      
- FMULP_UNDERFLOW:
-         LD      H, $00              ;  1:4          HL = 0000 0000 s000 0000
-         CALL    UNDER_COL_WARNING   ;  3:17
-         LD      A, L                ;  1:4          s111 1111
-         AND     SIGN_MASK           ;  2:7          
-         LD      L, A                ;  1:4
-         SCF                         ;  1:4          carry = error
-         RET                         ;  1:10
- FMUL_C1:
-         SUB     BIAS                ;  2:7
-         JR      nc, FMULP_OVERFLOW  ;  2:12/7        
- FMUL_NEXT:
-         LD      H, A                ;  1:4          new exponent
-         PUSH    HL                  ;  1:11
-         RES     7, C                ;  2:8
-         RES     7, E                ;  2:8
-         LD      A, C                ;  1:4
-         ADD     A, E                ;  1:4
-         LD      E, A                ;  1:4          E = A + B
-         LD      D, Tab_ApB_lo/256   ;  2:7          (DE) = Tab_ApB_lo
-         SUB     C                   ;  1:4
-         SUB     C                   ;  1:4
-         LD      L, A                ;  1:4          L = A - B
-         LD      H, Tab_AmB_lo/256   ;  2:7
-         LD      A, (DE)             ;  1:7
-         ADD     A, (HL)             ;  1:7
-         LD      C, A                ;  1:4
-         INC     D                   ;  1:4
-         LD      A, (DE)             ;  1:7
-         INC     H                   ;  1:4
-         ADC     A, (HL)             ;  1:7
-         JP      p, FMULP_SAME_EXP   ;  3:10
-         POP     HL                  ;  1:10
-         INC     H                   ;  1:4          exp++
-         JR      z, FMULP_OVERFLOW   ;  2:7/12
-         AND     L                   ;  1:4
-         LD      L, A                ;  1:4
-         LD      A, C                ;  1:4
-         ADD     A, $40              ;  2:7
-         RET     nc                  ;  1:11/5       RET with reset carry
-         INC     L                   ;  1:4          25%
-         OR      A                   ;  1:4          RET with reset carry
-         RET                         ;  1:10
- FMULP_OVERFLOW:
-         LD      H, $FF              ;  3:10
-         CALL    OVER_COL_WARNING    ;  3:17
-         SCF                         ;  1:4          carry = error
-         RET                         ;  1:10
- FMULP_SAME_EXP:                     ;               (ApB)+(AmB) >= $4000 => pricti: $0 (38.882446%)
-         RL      C                   ;  2:8          
-         ADC     A, A                ;  1:4
-         POP     HL                  ;  1:10         AC = 1mmm mmmm mmmm mmm0
-         AND     L                   ;  1:4          RET with reset carry
-         LD      L, A                ;  1:4
-         RET                         ;  1:10
-     include "color_flow_warning.asm"
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- 
		ENDIF
		End of INCLUDE
		INCLUDE color_flow_warning.asm
		IF (false)
-     BORDER      EQU     $229B         ; ROM border change permanent
-   $229B  OUT    ($FE), A            ; The '#S/OUT/' instruction is then used to set the border colour.
-   $229D  RLCA                       ; {The parameter is then multiplied by eight.
-   $229E  RLCA                       ;
-   $229F  RLCA                       ; }
-   $22A0  BIT    5, A                ; Is the border colour a 'light' colour?
-   $22A2  JR     nz, $22A6           ; Jump if so (the INK colour will be black).
-   $22A4  XOR    $07                 ; Change the INK colour to white.
- @label=BORDER_1
-  *$22A6  LD     ($5C48), A          ; {Set the system variable (#SYSVAR(BORDCR)) as required
-   $22A9  RET                        ; and return.}
- CBLU     EQU    1
- CMNG     EQU    3
- CRED     EQU    2
- CYEL     EQU    6
- UNDER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CBLU + CMNG      ;  2:7      A = 4
- FMUL_SELF_U:
-         SUB     CBLU                ;  2:7      A = 3 or 1 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
- OVER_COL_WARNING:
-         PUSH    AF                  ;  1:11
-         LD      A, CRED + CYEL      ;  2:7      A = 8
- FMUL_SELF_O:
-         SUB     CRED                ;  2:7      A = 6 or 2 
-         LD      ($-1), A            ;  3:13
-         CALL    BORDER              ;  3:17     change border colour
-         POP     AF                  ;  1:10
-         RET                         ;  1:10
		ENDIF
		End of INCLUDE
728D:		label @FEXP
		IF (true)
728D:		label FEXP
		ENDIF
728D:7C		LD A, H
728E:FE77	CP 77
7290:3828	JR C, 72BA
7292:FE86	CP 86
7294:3029	JR NC, 72BF
7296:D670	SUB 70
7298:67		LD H, A
7299:7D		LD A, L
729A:87		ADD A, A
729B:6C		LD L, H
729C:266E	LD H, 6E
729E:3002	JR NC, 72A2
72A0:CBFD	SET 7, L
72A2:5E		LD E, (HL)
72A3:E5		PUSH HL
72A4:24		INC H
72A5:56		LD D, (HL)
72A6:		label FEXP_LOOP
72A6:E1		POP HL
72A7:		label FEXP_ZEROBIT
72A7:2814	JR Z, 72BD
72A9:2D		DEC L
72AA:87		ADD A, A
72AB:30FA	JR NC, 72A7
72AD:4E		LD C, (HL)
72AE:E5		PUSH HL
72AF:24		INC H
72B0:46		LD B, (HL)
72B1:F5		PUSH AF
72B2:CD3A70	CALL 703A
72B5:F1		POP AF
72B6:EB		EX DE, HL
72B7:C3A672	JP 72A6
72BA:		label FEXP_ONE
72BA:11007F	LD DE, 7F00
72BD:		label FEXP_EXIT
72BD:EB		EX DE, HL
72BE:C9		RET
72BF:		label FEXP_FLOW
72BF:7D		LD A, L
72C0:87		ADD A, A
72C1:3805	JR C, 72C8
72C3:		label FEXP_OVER
		IF (false)
-         CALL    OVER_COL_WARNING    ;
		ENDIF
		IF (true)
72C3:37		SCF
		ENDIF
72C4:217FFF	LD HL, FF7F
72C7:C9		RET
72C8:		label FEXP_UNDER
		IF (false)
-         CALL    UNDER_COL_WARNING   ;
		ENDIF
72C8:210000	LD HL, 0000
72CB:C9		RET
		ENDIF
		End of INCLUDE
		INCLUDE fsin.asm
		IF (true)
72CC:		label @FSIN
		IF (true)
72CC:		label FSIN
		ENDIF
72CC:7C		LD A, H
72CD:C684	ADD A, 84
72CF:380A	JR C, 72DB
72D1:3C		INC A
72D2:C0		RET NZ
72D3:7D		LD A, L
72D4:87		ADD A, A
72D5:C630	ADD A, 30
72D7:D0		RET NC
72D8:2D		DEC L
		IF (true)
72D9:B7		OR A
		ENDIF
72DA:C9		RET
72DB:		label FSIN_7C7F
72DB:CB3F	SRL A
72DD:7C		LD A, H
72DE:2660	LD H, 60
72E0:2801	JR Z, 72E3
72E2:24		INC H
72E3:CB15	RL L
72E5:6E		LD L, (HL)
72E6:CB1D	RR L
72E8:DE00	SBC A, 00
72EA:67		LD H, A
72EB:C9		RET
		ENDIF
		End of INCLUDE
Emiting raw binary from 6000 to 72EB
